-- dbo.BOOKINGEXEC_VIEW source

CREATE VIEW BOOKINGEXEC_VIEW AS
select COMPANY_CODE
	,ORG_ID
	,ORG_DESC
	,ITEM_CODE
	,ITEM_DESC
	,BUSINESS_LINE_ID
	,BUSINESS_LINE
	,STATUS
	,ORDER_NUMBER
	,SALES_ORDER_NO
	,ORDER_DATE
--	,FORMAT(ORDER_DATE,'MMM yy') ORDR_MONTH
	,DELIVERY_DATE
--	,FORMAT(DELIVERY_DATE,'MMM yy') DELV_MONTH
	,CUSTOMER_NUMER
	,CUSTOMER_NAME
	,BOOKER_CODE
	,BOOKER_NAME
	,SUPPLIER_ID
	,SUPPLIER_NAME
	,sum(ORDER_UNITS) ORDER_UNITS
	,sum(SOLD_QTY) SOLD_QTY 	-- Column added
	,SUM(BOOKING) BOOKING
	,SUM(RETURN_AMOUNT) RETURN_AMOUNT 
	,SUM(CANCELLED) CANCELLED  
	,SUM(BOOKING_LOSS) BOOKING_LOSS 
	,SUM(GROSS_AMOUNT) GROSS_AMOUNT 
	,SUM(EXECUTION) EXECUTION 
	,SUM(LOSS) LOSS
	,DATA_FLAG
	,CASE WHEN SUM(BOOKING)>0 THEN ISNULL(ORDER_NUMBER,SALES_ORDER_NO) ELSE NULL END BOOKED_ORDERS
	,CASE WHEN SUM(BOOKING-ABS(CANCELLED+BOOKING_LOSS))>0 THEN ISNULL(ORDER_NUMBER,SALES_ORDER_NO) /*SALES_ORDER_NO*/  ELSE NULL END EXECUTED_ORDERS
	,CASE WHEN SUM(LOSS)>0 THEN ISNULL(ORDER_NUMBER,SALES_ORDER_NO)  ELSE NULL END LOST_ORDERS
	FROM
	(
SELECT
	COMPANY_CODE
	,ORG_ID
	,ORG_DESC
	,ITEM_CODE
	,ITEM_DESC
	,BUSINESS_LINE_ID
	,BUSINESS_LINE
	,STATUS
	,ORDER_NUMBER
	,SALES_ORDER_NO
	,ORDER_DATE
	,DELIVERY_DATE
	,CUSTOMER_NUMBER CUSTOMER_NUMER
	,CUSTOMER_NAME
	,BOOKER_CODE
	,BOOKER_NAME
	,SUPPLIER_ID
	,SUPPLIER_NAME,
	case
		when SALES_ORDER_NO is not null and ORDER_AMOUNT = 0 then sold_qty
--		WHEN SALES_ORDER_NO IS NOT NULL AND ORDER_NUMBER IS NOT NULL AND ORDER_AMOUNT=0 AND CANCELLED =0 THEN SOLD_QTY 
		else ORDER_UNITS
	end ORDER_UNITS -- Column added
	,	CASE WHEN ORDER_UNITS =0 THEN 0 ELSE SOLD_QTY END SOLD_QTY 	-- Column added
	,CASE
		WHEN SALES_ORDER_NO IS NOT NULL AND ORDER_NUMBER IS NOT NULL AND CANCELLED <>0 AND GROSS_AMOUNT =0 THEN ABS(CANCELLED)
	    WHEN ORDER_NUMBER IS NOT NULL and SALES_ORDER_NO IS NULL THEN order_units * unit_selling_price--ORDER_AMOUNT
		WHEN SALES_ORDER_NO IS NOT NULL	AND ORDER_NUMBER IS NOT NULL AND gross_amount>0 THEN isnull(order_units,sold_qty ) * unit_selling_price
		WHEN SALES_ORDER_NO IS NOT NULL AND ORDER_NUMBER IS NULL AND CANCELLED <>0 AND GROSS_AMOUNT=0 THEN ABS(CANCELLED)
		WHEN SALES_ORDER_NO IS NOT NULL AND ORDER_NUMBER IS NULL AND CANCELLED=0 AND GROSS_AMOUNT>0 THEN GROSS_AMOUNT 
	--**	WHEN SALES_ORDER_NO IS NOT NULL	AND ORDER_AMOUNT = 0 THEN 0
--		WHEN SALES_ORDER_NO IS NOT NULL	AND ORDER_AMOUNT > 0 and CANCELLED = 0 THEN ROUND(ORDER_UNITS * UNIT_SELLING_PRICE, 0)
--		WHEN SALES_ORDER_NO IS NOT NULL AND ORDER_NUMBER IS NOT NULL AND ORDER_AMOUNT=0 AND CANCELLED =0 THEN GROSS_AMOUNT -- added
		ELSE order_amount
	END BOOKING
	,RETURN_AMOUNT
	,CANCELLED 
	,CASE
	    WHEN (SALES_ORDER_NO IS NOT NULL AND CANCELLED <> 0 AND ORDER_AMOUNT>0 AND GROSS_AMOUNT=0) THEN (CASE
		WHEN SALES_ORDER_NO IS NOT NULL AND ORDER_NUMBER IS NOT NULL AND CANCELLED <>0 AND GROSS_AMOUNT =0 THEN ABS(CANCELLED)
	    WHEN ORDER_NUMBER IS NOT NULL and SALES_ORDER_NO IS NULL THEN order_units * unit_selling_price--ORDER_AMOUNT
		WHEN SALES_ORDER_NO IS NOT NULL	AND ORDER_NUMBER IS NOT NULL AND gross_amount>0 THEN order_units * unit_selling_price
		WHEN SALES_ORDER_NO IS NOT NULL AND ORDER_NUMBER IS NULL AND CANCELLED <>0 AND GROSS_AMOUNT=0 THEN ABS(CANCELLED)
		WHEN SALES_ORDER_NO IS NOT NULL AND ORDER_NUMBER IS NULL AND CANCELLED=0 AND GROSS_AMOUNT>0 THEN GROSS_AMOUNT 
	--**	WHEN SALES_ORDER_NO IS NOT NULL	AND ORDER_AMOUNT = 0 THEN 0
--		WHEN SALES_ORDER_NO IS NOT NULL	AND ORDER_AMOUNT > 0 and CANCELLED = 0 THEN ROUND(ORDER_UNITS * UNIT_SELLING_PRICE, 0)
--		WHEN SALES_ORDER_NO IS NOT NULL AND ORDER_NUMBER IS NOT NULL AND ORDER_AMOUNT=0 AND CANCELLED =0 THEN GROSS_AMOUNT -- added
		ELSE 0
	END)-ABS(CANCELLED)
--	    WHEN (SALES_ORDER_NO IS NOT NULL AND CANCELLED <> 0 AND ORDER_AMOUNT>0 AND GROSS_AMOUNT=0) THEN ORDER_AMOUNT-ABS(CANCELLED)
	    WHEN (SALES_ORDER_NO IS NOT NULL AND CANCELLED = 0 AND ORDER_AMOUNT>0) THEN (ORDER_UNITS-SOLD_QTY) * UNIT_SELLING_PRICE
		WHEN (SALES_ORDER_NO IS NULL AND ORDER_AMOUNT>0) THEN ORDER_AMOUNT ELSE 0
	END BOOKING_LOSS
	,GROSS_AMOUNT
	,/*CASE
		WHEN SALES_ORDER_NO IS NULL THEN 0
		WHEN (SALES_ORDER_NO IS NOT NULL AND CANCELLED = 0 AND SOLD_QTY>0) THEN (UNIT_SELLING_PRICE * ABS(SOLD_QTY))
		ELSE 0 END */
		/*WHEN SALES_ORDER_NO IS NOT NULL
		AND ORDER_AMOUNT = 0 THEN 0
		ELSE */GROSS_AMOUNT
	 EXECUTION
	,CASE
		WHEN SALES_ORDER_NO IS NULL THEN ORDER_AMOUNT
		WHEN (SALES_ORDER_NO IS NOT NULL
		AND CANCELLED <> 0) THEN abs(CANCELLED)
		ELSE 0--(UNIT_SELLING_PRICE * ABS(SOLD_QTY))
	END LOSS
	,DATA_FLAG
from
	BOOKING_EXEC_DATA bed
WHERE
	1 = 1 /*AND SALES_ORDER_NO IS not NULL AND ORDER_NUMBER IS NOT NULL AND ORDER_AMOUNT=0 AND CANCELLED =0*/)B
WHERE 1 =1 and delivery_date>='2022-01-03'-- and order_number='D0109ORD5016'
group by 
COMPANY_CODE
	,ORG_ID
	,ORG_DESC
	,ITEM_CODE
	,ITEM_DESC
	,BUSINESS_LINE_ID
	,BUSINESS_LINE
	,STATUS
	,ORDER_NUMBER
	,SALES_ORDER_NO
	,ORDER_DATE
	,DELIVERY_DATE
	,CUSTOMER_NUMER
	,CUSTOMER_NAME
	,BOOKER_CODE
	,BOOKER_NAME
	,SUPPLIER_ID
	,SUPPLIER_NAME
	,DATA_FLAG;


-- dbo.BO_CUSTOMER_AGING_NEW source

CREATE VIEW dbo.BO_CUSTOMER_AGING_NEW
AS
SELECT        CUSTOMER_TRX_ID, TRX_DATE, TRX_NUMBER, ORIGNALE_AMOUNT, OPERATING_UNIT, DESCRIPTION, ORG_ID, RECEIPT_AMOUNT, REMANING_AMOUNT, ADJUSTMENTS, [RETURNS], TOT, 
                         CREDITMEME_AMOUNT, INVOICE_NOT_YET_DUE, SEVEN, EIGHT, SIXTEEN, NINTYONE, ABOVE_360, NET_BALANCE, TOTAL_NOT_DUE_NET, CUSTOMER_NUMBER, CUSTOMER_NAME, 
                         PRIMARY_SALESREP_ID, SALESREP_NAME, BUSNIESS_LINE, NINTY, AGING_DATE
FROM            dbo.EBS_AGING_TBL;


-- dbo.BO_INVENTORY_ORG_UNIIT source

CREATE VIEW [dbo].[BO_INVENTORY_ORG_UNIIT] AS
SELECT 
ORGANIZATION_ID, NAME, ATTRIBUTE1 LOC_
FROM HR_ALL_ORGANIZATION_UNITS
union all
select vkbur,bezei,null attribute1 from TVKBT where 1=1 and mandt=300 and spras='E';


-- dbo.BO_REDBULL source

CREATE   VIEW BO_REDBULL AS
--CREATE   VIEW BO_REDBULL_2 AS
SELECT TOP 100 PERCENT TRX_DATE DEVLIVERY_DATE
      ,ORG_ID BRANCH
      ,CUSTOMER_NUMBER
      ,CUSTOMER_NAME
      ,HP.ADDRESS1
      ,HP.ADDRESS2
      ,CHANNEL CUSTOMER_TYPE
      ,(SELECT CMR.MASTER_CHAN
        FROM   CHANNEL_MAPPING_REDBULL CMR
        WHERE  CHAN_DES = A.CHANNEL) MASTER_CHANNEL
      ,(SELECT CMR.CHANNEL
        FROM   CHANNEL_MAPPING_REDBULL CMR
        WHERE  CHAN_DES = A.CHANNEL) CHANNEL
      ,'Sale' ORDER_TYPE
      ,ISNULL(TRX_NUMBER, '') + ' - ' +
       ISNULL((SELECT X.ATTRIBUTE1
        FROM   HR_ALL_ORGANIZATION_UNITS X
        WHERE  X.ORGANIZATION_ID = A.ORG_ID), '') TRANSECTION_NO
      ,ITEM_CODE PROD_CD
      ,DESCRIPTION PROD_DESC
      ,'WRB' BUSINESS_LINE
      ,sum(SOLD_QTY) TRANS_STOCK_QTY
      ,UNIT_SELLING_PRICE SOLD_PROD_TP
      ,  sum(a.BONUS_QTY)  FOC
      ,NULL DISCOUNT_PERCENTAGE
      ,sum(ABS(CLAIMABLE_DISCOUNT)) CLAIMABLE_DISCOUNT
      ,sum(ABS(UNCLAIMABLE_DISCOUNT)) UN_CLAIMABLE_DISCOUNT
      ,NULL PHA_SALE_TAX
      ,sum(SOLD_QTY * UNIT_SELLING_PRICE) TOTAL_AMOUNT
      ,BOOKER_ID TSO_CD
      ,BOOKER_NAME TSO_NAME
      ,CASE
         WHEN QTY_FORMULA IS NOT NULL
              AND QTY_FORMULA = '*' THEN
        sum(  ISNULL(SOLD_QTY, 0) * PPQ.STANDARD_QTY)
         ELSE
          0
       END CONVER_TRANS_STOCK
     
       ,sum(a.BONUS_QTY)  CONER_FOC_STOCK
    
        ,CASE
         WHEN QTY_FORMULA IS NOT NULL
              AND QTY_FORMULA = '*' THEN
         sum( ISNULL(SOLD_QTY, 0) * PPQ.STANDARD_QTY)
         ELSE
          0
       END
      +
       sum(a.BONUS_QTY)  SELLING_UNIT
      ,PPQ.QTY_FORMULA
      ,PPQ.STANDARD_QTY
      FROM   IBL_SALE_DISCOUNT_MIS_VW A
left outer join HZ_PARTIES HP on a.CUSTOMER_NUMBER = HP.PARTY_NUMBER
left outer join PRODUCT_PRINCIPAL_QTY PPQ on PPQ.PROD_CD = A.ITEM_CODE --IBL_BO_SALE_DATA A  --MYP  --11-AUG-2016
WHERE  1=1
 
AND    A.SALES_ORDER_TYPE NOT LIKE '%MR%'
AND    SOLD_QTY ! = 0
      
AND    A.BUSINESS_LINE_ID IN (126, 145)
                              
group by
TRX_DATE
      ,ORG_ID
      ,CUSTOMER_NUMBER
      ,CUSTOMER_NAME
      ,HP.ADDRESS1
      ,HP.ADDRESS2
      ,CHANNEL ,trx_number
      ,ITEM_CODE
      ,DESCRIPTION ,UNIT_SELLING_PRICE
          ,BOOKER_ID
      ,BOOKER_NAME ,QTY_FORMULA,STANDARD_QTY
ORDER  BY CUSTOMER_NUMBER;


-- dbo.CHANNEL_MAPPING source

CREATE VIEW CHANNEL_MAPPING AS
SELECT  DISTINCT 
CASE 
WHEN CHANNEL=' On Promise' THEN '1'
WHEN CHANNEL='Blank' THEN '2'
WHEN CHANNEL='Canteen Store Department' THEN '3'
WHEN CHANNEL='Cosmetic Store' THEN '4'
WHEN CHANNEL='E Commerce' THEN '5'
WHEN CHANNEL='Electrical Retail' THEN '7'
WHEN CHANNEL='Fix Distribution Officer' THEN '8'

WHEN CHANNEL='FT Trade' THEN '10'
WHEN CHANNEL='Genaral Trade Tier 2' THEN '11'
WHEN CHANNEL='General Trade Tier 1' THEN '12'
WHEN CHANNEL='Grocery Store' THEN '13'

WHEN CHANNEL='HoReCa' THEN '14'
WHEN CHANNEL='Hyperstar' THEN '15'
WHEN CHANNEL='IBL Direct Institution' THEN '16'
WHEN CHANNEL='Institution' THEN '17'

WHEN CHANNEL='Institutions' THEN '18'
WHEN CHANNEL='Key OutetF' THEN '19'

WHEN CHANNEL='Key Outlet' THEN '20'
WHEN CHANNEL='Key OutletA' THEN '21'
WHEN CHANNEL='Key OutletB' THEN '22'
WHEN CHANNEL='Key OutletC' THEN '23'

WHEN CHANNEL='KeyOutlet' THEN '24'
WHEN CHANNEL='Large Grocers' THEN '25'
WHEN CHANNEL='Main Market' THEN '26'
WHEN CHANNEL='Metro Cash & Carry' THEN '27'
WHEN CHANNEL='Metro Makro' THEN '28'
WHEN CHANNEL='Mini Markets' THEN '29'
WHEN CHANNEL='Modern Retail' THEN '30'
WHEN CHANNEL='Modern Trade' THEN '31'
WHEN CHANNEL='Modern TradeA' THEN '32'

WHEN CHANNEL='Modern TradeB' THEN '33'
WHEN CHANNEL='Modern TradeC' THEN '34'
WHEN CHANNEL='Off Premise' THEN '35'
WHEN CHANNEL='On Promise' THEN '36'
WHEN CHANNEL='Online Store' THEN '37'
WHEN CHANNEL='Others' THEN '38'
WHEN CHANNEL='Over The Counter' THEN '39'
WHEN CHANNEL='Perfect Store' THEN '40'
WHEN CHANNEL='Perfect Store  Wholesale' THEN '41'
WHEN CHANNEL='Perfect Store/Purple Blocks ' THEN '42'

WHEN CHANNEL=' Perfect Store/Purple Blocks ' THEN '43'
WHEN CHANNEL='Petro Mart' THEN '44'
WHEN CHANNEL='Petro Mart  GT' THEN '45'
WHEN CHANNEL='Petro Mart LMT' THEN '46'
WHEN CHANNEL='Petro Mart Total Parco' THEN '47'
WHEN CHANNEL='Pharmacy' THEN '48'
WHEN CHANNEL='Purple Block' THEN '49'

WHEN CHANNEL='Retail' THEN '50'
WHEN CHANNEL='Retail C&D Class' THEN '51'
WHEN CHANNEL='Retail Con' THEN '52'
WHEN CHANNEL='Retail Hawaks' THEN '53'
WHEN CHANNEL='Retail Hawks' THEN '54'
WHEN CHANNEL='RetailA' THEN '55'

WHEN CHANNEL='RetailA Hawks' THEN '56'
WHEN CHANNEL='Retailer' THEN '57'
WHEN CHANNEL='Rural Coverage Plan' THEN '58'
WHEN CHANNEL='Self Service Store' THEN '59'
WHEN CHANNEL='Shop Sale' THEN '60'
WHEN CHANNEL='Spar Pakistan' THEN '61'
WHEN CHANNEL='Stockiest' THEN '62'
WHEN CHANNEL='Sub Distributor' THEN '63'

WHEN CHANNEL='SubDistributor' THEN '64'
WHEN CHANNEL='Super Markets' THEN '65'
WHEN CHANNEL='Top General Trade' THEN '66'
WHEN CHANNEL='W/SALE' THEN '67'
WHEN CHANNEL='Whole sale' THEN '68'
WHEN CHANNEL='whole Sales' THEN '69'
WHEN CHANNEL='Wholesale' THEN '70'

WHEN CHANNEL='Wholesale Dealer' THEN '71'
WHEN CHANNEL='Wholesale Hawks' THEN '72'
WHEN CHANNEL='wholesales' THEN '73'

WHEN CHANNEL='Institutions-A' THEN '74'

WHEN CHANNEL='Institutions-A' THEN '75'
WHEN CHANNEL='Key Outet-F' THEN '76'
WHEN CHANNEL='Key Outlet-A' THEN '77'
WHEN CHANNEL='Key Outlet-B' THEN '78'

WHEN CHANNEL='Key Outlet-C' THEN '79'
WHEN CHANNEL='Key-Outlet' THEN '80'
WHEN CHANNEL='Modern Trade-A' THEN '81'
WHEN CHANNEL='Modern Trade-B' THEN '82'
WHEN CHANNEL='Modern Trade-C' THEN '83'

WHEN CHANNEL='Perfect Store - Wholesale' THEN '84'
WHEN CHANNEL='Perfect Store/Purple Blocks ' THEN '85'
WHEN CHANNEL='Petro Mart - GT' THEN '86'
WHEN CHANNEL='Petro Mart- LMT' THEN '87'
WHEN CHANNEL='Petro Mart- Total Parco' THEN '88'
WHEN CHANNEL='Retail-A' THEN '89'
WHEN CHANNEL='Retail-A Hawks' THEN '90'
WHEN CHANNEL='Sub-Distributor' THEN '91'
WHEN CHANNEL='Perfect Store/Purple Blocks ' THEN '92'

ELSE
CHANNEL
END 
CHANNEL_ID
,CHANNEL
  FROM     IBL_SALE_DISCOUNT_MIS_VW_BO   ISDM
     WHERE   1=1 AND ISDM.TRX_DATE BETWEEN '01-JAN-16' AND '30-JUN-19';


-- dbo.CustoemrID_Number source

CREATE VIEW CustoemrID_Number AS 
SELECT DISTINCT CUSTOMER_ID, CUSTOMER_NUMBER, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4
FROM            dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS q
WHERE        (TRX_DATE BETWEEN '01-may-2019' AND '31-jul-2019');


-- dbo.DFL_BOOKER source

create VIEW DFL_BOOKER AS
select 
 distinct 
BOOKER_ID,BOOKER_NAME
from DFL_SALES_CRNT_YEAR1 dfs;


-- dbo.DFL_BO_CUSTOMER_AGING_NEW_crnt_year source

CREATE VIEW [dbo].[DFL_BO_CUSTOMER_AGING_NEW_crnt_year] AS
SELECT CUSTOMER_TRX_ID
                     ,TRX_DATE
                     ,TRX_NUMBER
                     ,ORIGNALE_AMOUNT
                     ,OPERATING_UNIT
                     ,DESCRIPTION
                     ,ORG_ID
                     ,RECEIPT_AMOUNT
                     ,REMANING_AMOUNT
                     ,ADJUSTMENTS
                     ,RETURNS
                     ,TOT
                     ,CREDITMEME_AMOUNT
                     ,INVOICE_NOT_YET_DUE
                     ,SEVEN
                     ,EIGHT
                     ,SIXTEEN
                     ,NINTYONE
                     ,ABOVE_360
                     ,NET_BALANCE
                     ,TOTAL_NOT_DUE_NET
                     ,BCAN.CUSTOMER_NUMBER
                     ,BCAN.CUSTOMER_NAME
                     ,BECL.ADDRESS1
                     ,PRIMARY_SALESREP_ID
                     ,SALESREP_NAME
                     ,BUSNIESS_LINE
                     ,NINTY
                     ,AGING_DATE
FROM   BO_CUSTOMER_AGING_NEW BCAN
LEFT   JOIN BO_EBS_CUSTOMER_LIST BECL
ON     BCAN.CUSTOMER_NUMBER = BECL.CUSTOMER_NUMBER
WHERE  1 = 1
AND    AGING_DATE >=
                     DATEADD(DAY, -30, EOMONTH(DATEADD(MONTH, -12, GETDATE())));


-- dbo.DFL_BUSLINE source

create VIEW DFL_BUSLINE
AS
select 
 distinct 
BUSINESS_LINE_ID,BUSINESS_LINE
from DFL_SALES_CRNT_YEAR1 dfs;


-- dbo.DFL_CUSTOMER source

CREATE VIEW [dbo].[DFL_CUSTOMER]
AS
select 
 distinct 
CUSTOMER_NUMBER,CUSTOMER_NAME
--,CUSTOMER_ADDRESS
, CASE 
  WHEN LEN(CUSTOMER_ADDRESS)>0  THEN  customer_address else  'N/A' END CUSTOMER_ADDRESS
----,CASE WHEN CUSTOMER_ADDRESS=' 'THEN 'N/A'END CUSTOMER_ADDRESS
----,ISNULL( Customer_Address,'N/A')Customer_Address
from DFL_SALES_CRNT_YEAR1 dfs;


-- dbo.DFL_ITEMS source

create VIEW DFL_ITEMS
AS
select 
 distinct 
ITEM_CODE,ITEM_DESC
from DFL_SALES_CRNT_YEAR1 dfs;


-- dbo.DFL_ORG_DESC source

create VIEW DFL_ORG_DESC AS
select 
 distinct 
 ORG_ID,
 ORG_DESCRIPTION
from DFL_SALES_CRNT_YEAR1 dfs;


-- dbo.DFL_SALES_CRNT_YEAR1 source

CREATE view [dbo].[DFL_SALES_CRNT_YEAR1] AS 
SELECT
DISTINCT   ISDM.ORG_ID,
   BIO.NAME AS ORG_DESCRIPTION,
   ISDM.BOOKER_ID,
   ISDM.BOOKER_NAME,
   ISDM.SUPPLIER_ID,
   ISDM.SUPPLIER_NAME,
   ISDM.BUSINESS_LINE_ID,
   ISDM.BUSINESS_LINE,
   ISDM.CUSTOMER_NUMBER,
   ISDM.CUSTOMER_NAME,
   becl.ADDRESS1 AS Customer_Address,
   ISDM.ITEM_CODE,
   ISDM.DESCRIPTION AS ITEM_DESC
FROM
   dbo.IBL_SALE_DISCOUNT_MIS_VW_BO AS ISDM 
   LEFT OUTER JOIN
      dbo.BO_INVENTORY_ORG_UNIIT AS BIO 
      ON ISDM.ORG_ID = BIO.ORGANIZATION_ID 
   LEFT OUTER JOIN
      dbo.BO_EBS_CUSTOMER_LIST AS becl 
      ON ISDM.CUSTOMER_ID = becl.CUSTOMER_ID 
WHERE
   (
      1 = 1
   )
   --AND ISDM.TRX_DATE>='01-JUL-20'
   AND 
   (
      ISDM.TRX_DATE >= DATEADD(DAY, - 30, EOMONTH(DATEADD(MONTH, - 12, GETDATE())))
   );


-- dbo.DFL_SUPPLIER source

create VIEW DFL_SUPPLIER
AS
select 
 distinct 
SUPPLIER_ID,SUPPLIER_NAME
from DFL_SALES_CRNT_YEAR1 dfs;


-- dbo.EBS_INVOICE_ORDER_VW source

create view EBS_INVOICE_ORDER_VW
AS
select
sdm.customer_name INSTITUTION,
sdm.ORG_ID BRANCH_ID,
sdm.ORG_DESC BRANCH_NAME,
'IBL Operations (Pvt.) Ltd.' DISTRIBUTOR,
sdm.CHANNEL INS_TYPE,
null PRODUCT,
sdm.ITEM_CODE ITEM_CODE,
sdm.DESCRIPTION SKU,
sdm.UNIT_SELLING_PRICE SELLING_PRICE,
sdm.CLAIMABLE_DISCOUNT CLAIMABLE_DISCOUNT,
sdm.UNCLAIMABLE_DISCOUNT UN_CLAIMABLE_DISCOUNT,
(sdm.CLAIMABLE_DISCOUNT+sdm.UNCLAIMABLE_DISCOUNT)INST_DISCOUNT,
DATENAME(mm, sdm.trx_date) 'Month',
sdm.SALES_ORDER_NO ORDER_REF_NO,
null DATE_OF_ORDER,
sdm.SOLD_QTY ORDER_QUANTITY,
sdm.BONUS_QTY FOC,
sdm.SOLD_QTY TOTAL_QTY,  --confusion
sdm.GROSS_AMOUNT SALES_VLAUE,
sdm.NET_AMOUNT NET_SALE_VALUE,
sdm.TRX_DATE INVOICE_DATE_IBL,
sdm.TRX_NUMBER INVOICE_NO_IBL,
null CUSTOMER_TRX_ID
from
IBL_SALE_DISCOUNT_MIS_VW_BO sdm 
where  1=1 and TRX_DATE >='03-jul-21' and sdm.COMPANY_CODE ='6300' and sdm.CHANNEL = 'Institution - Pharma';


-- dbo.EBS_SAS_ALL_LOC_DATA_NEW source

CREATE  VIEW [dbo].[EBS_SAS_ALL_LOC_DATA_NEW] AS
SELECT 
psd.ORG_ID br_cd
,psd.ORG_DESC br_desc
,psd.TRX_NUMBER TRX_NUMBER
,trx_date
,format(PSD.TRX_DATE,'dd-MMM-yy') TRX_DATE1

,PSD.CUSTOMER_NUMBER
,psd.CUSTOMER_NAME
,SUBSTRING(PSD.ITEM_CODE,9,30)ITEM_CODE,PSD.DESCRIPTION
,PSD.UNIT_SELLING_PRICE,PSD.SOLD_QTY SOLD_QTY
,ISNULL(PSD.BONUS_QTY,0)BONUS_QTY
,ISNULL(PSD.CLAIMABLE_DISCOUNT+PSD.UNCLAIMABLE_DISCOUNT,0) DISCOUNT,PSD.CHANNEL CHANNEL

,PSD.ADD1
	,PSD.ADD2
	,PSD.ADD3

,psd.ORG_DESC,PSD.COMPANY_CODE
, GROSS_AMOUNT  NET_AMT
--,(PSD.SOLD_QTY*PSD.UNIT_SELLING_PRICE)+(PSD.CLAIMABLE_DISCOUNT+PSD.UNCLAIMABLE_DISCOUNT) NET_AMT
,ISNULL(PSD.NET_AMOUNT,0) AS GROSS_VALUE
,CASE  WHEN PSD.SOLD_QTY<>0 AND (PSD.CLAIMABLE_DISCOUNT+PSD.UNCLAIMABLE_DISCOUNT)<>0 THEN
	(
		((PSD.SOLD_QTY*PSD.UNIT_SELLING_PRICE)+(PSD.CLAIMABLE_DISCOUNT+PSD.UNCLAIMABLE_DISCOUNT))/PSD.SOLD_QTY
	)
	ELSE
	0
	END   DISCOUNTED_RATE
	,psd.SALES_ORDER_TYPE
FROM IBL_SALE_DISCOUNT_MIS_VW_BO PSD
where 1=1 
and psd.TRX_DATE>='03-jan-22' 
and COMPANY_CODE=6300
;


-- dbo.FOR_MEDIAN_WORKING source

CREATE VIEW FOR_MEDIAN_WORKING AS
--SELECT q.bl_group, q.channel, q.bl,   sum(g) Gross, Median(G) Median_Bill_Size, min(g) Smallest_Bill_Size, max(g) Largest_Bill_Size, AVG(G) Average_Bill_Size, count(distinct unq) Productive_Calls
-- FROM 
--
(   
select T.MONTH, t.bl_group, isnull(t.CHANNEL,'Retail') Channel, t.bl, T.Unq_Customer_Trx_Id unq,  SUM(t.GROSS) G from WH_GRP_sales_base_tbl t    
where t.month = '01-SEP-2019'
and t.unq__inv_type = 'SALES'
GROUP BY T.MONTH, t.bl_group, isnull(t.CHANNEL,'Retail') , t.bl, T.Unq_Customer_Trx_Id
 having sum(t.GROSS) > 1
 );


-- dbo.IBL_CUSTOMER_CHANNEL_MV source

CREATE   VIEW IBL_CUSTOMER_CHANNEL_MV AS
SELECT
DISTINCT
QR.CHARACTER4,QR.CHARACTER2,QR.CHARACTER6
 FROM QA_RESULTS QR
WHERE  QR.ORGANIZATION_ID=82  AND  PLAN_ID=117;


-- dbo.IBL_DIV_BUS_LINE source

create   view IBL_DIV_BUS_LINE
 as
select
qr.character1 div_CD,QR.CHARACTER2 DIV_DESC,QR.CHARACTER3 BUS_LINE_ID,QR.CHARACTER4 BUS_LINE_DESC
 from qa_results qr where qr.plan_id=102;


-- dbo.IBL_INVENTORY_DATA_MV source

CREATE VIEW IBL_INVENTORY_DATA_MV AS
SELECT MOQ.ORGANIZATION_ID
			,EIO.INVENTORY_ORGANIZATION_NAME LOCATION
			,EB.FLEX_VALUE_MEANING           BLCODE
			,EB.DESCRIPTION                  BLDESC

			,MOQ.INVENTORY_ITEM_ID
			,MSI.ITEM_CODE
			,MSI.ITEM_DESC ITEM_NAME
			,CASE
				 WHEN MOQ.SUBINVENTORY_CODE LIKE 'DAMAGED%'
							AND MOQ.SUBINVENTORY_CODE NOT LIKE '%CLM%' THEN
					'DAMAGED'
				 WHEN MOQ.SUBINVENTORY_CODE LIKE 'EXPIRED%'
							AND MOQ.SUBINVENTORY_CODE NOT LIKE '%CLM%' THEN
					'EXPIRED'
				 WHEN MOQ.SUBINVENTORY_CODE LIKE 'NEAREXPIRY%'
							AND MOQ.SUBINVENTORY_CODE NOT LIKE '%CLM%' THEN
					'NEAREXPIRY'
				 WHEN MOQ.SUBINVENTORY_CODE LIKE 'SHORT%'
							AND MOQ.SUBINVENTORY_CODE NOT LIKE '%CLM%' THEN
					'SHORT'

				 WHEN MOQ.SUBINVENTORY_CODE LIKE '%CLM%' THEN
					'CLAIM'
				 ELSE
					MOQ.SUBINVENTORY_CODE
			 END CLASSIFICATION
			,SUM(MOQ.TRANSACTION_QUANTITY) OHQTY
      ,NULL CATEGORY_
FROM   MTL_ONHAND_QUANTITIES MOQ
			,MTL_SYSTEM_ITEMS_2                     MSI
			,EBS_BUSLINES                         EB
			,EBS_INV_ORG                          EIO
WHERE  1 = 1
AND    MSI.INVENTORY_ITEM_ID = MOQ.INVENTORY_ITEM_ID
AND    (EB.FLEX_VALUE_MEANING) = MSI.SEGMENT1
AND    (EIO.INV_ORGANIZATION_ID) = (MOQ.ORGANIZATION_ID)
GROUP  BY MOQ.SUBINVENTORY_CODE
				 ,MOQ.INVENTORY_ITEM_ID
				 ,MSI.ITEM_CODE
				 ,MSI.ITEM_DESC
				 ,EB.FLEX_VALUE_MEANING
				 ,EB.DESCRIPTION
				 ,MOQ.ORGANIZATION_ID,EIO.INVENTORY_ORGANIZATION_NAME;


-- dbo.IBL_SALE_DISCOUNT_MIS_VW_BO source

-- dbo.IBL_SALE_DISCOUNT_MIS_VW_BO source

CREATE VIEW [dbo].[IBL_SALE_DISCOUNT_MIS_VW_BO] AS 

SELECT
--DISTINCT 
ITEM_CATEGORY,
	ORG_ID,
	ORG_DESC,
	TRX_DATE,
	TRX_NUMBER,
	BOOKER_ID,
	BOOKER_NAME,
	SUPPLIER_ID,
	SUPPLIER_NAME,
	BUSINESS_LINE_ID,
	BUSINESS_LINE,
	CHANNEL,
	CUSTOMER_ID,
	CUSTOMER_NUMBER,
	CUSTOMER_NAME,
	SALES_ORDER_TYPE,
	INVENTORY_ITEM_ID,
	ITEM_CODE,
	DESCRIPTION,
	UNIT_SELLING_PRICE,
	SOLD_QTY,
	BONUS_QTY,
	CASE WHEN BILLING_TYPE IN ('ZORC') THEN
	CLAIMABLE_DISCOUNT*-1
	ELSE 
	CLAIMABLE_DISCOUNT
	END CLAIMABLE_DISCOUNT,
	
	CASE WHEN BILLING_TYPE IN ('ZORC') THEN
	UNCLAIMABLE_DISCOUNT*-1
	ELSE
	UNCLAIMABLE_DISCOUNT
	END UNCLAIMABLE_DISCOUNT,
	
	TAX_RECOVERABLE,
	CASE WHEN ITEM_CATEGORY IN ('ZFCL','ZFOU','ZBRC','ZBRU') THEN TAX_RECOVERABLE 
	
	ELSE 	
	
	CASE WHEN BILLING_TYPE IN ('ZUCC','ZURB') THEN
		((SOLD_QTY* UNIT_SELLING_PRICE )-TOTAL_DISCOUNT*-1)+TAX_RECOVERABLE
	ELSE
	((SOLD_QTY* UNIT_SELLING_PRICE )-ABS(TOTAL_DISCOUNT) )+TAX_RECOVERABLE
	
	END
	
	
	END NET_AMOUNT,
	

	CASE WHEN ITEM_CATEGORY IN ('ZFCL','ZFOU','ZBRC','ZBRU') THEN 0 
	ELSE
	
	CASE WHEN BILLING_TYPE IN ('ZORC') 
AND BILLING_TYPE NOT IN ('ZUB1')	
	THEN
	 SOLD_QTY *UNIT_SELLING_PRICE 
	ELSE
	SOLD_QTY* UNIT_SELLING_PRICE
	END 
		
	END  GROSS_AMOUNT,
	
	
	TOTAL_DISCOUNT,
	CUSTOMER_TRX_ID,
	REASON_CODE,
	BILL_TYPE_DESC,
	COMPANY_CODE,
	BILLING_TYPE,
	SALES_ORDER_NO,
	ADD1,
	ADD2,
	ADD3
FROM
	(
	SELECT
		NULL ITEM_CATEGORY,
		cast(ORG_ID as varchar(50)) ORG_ID,
		NULL ORG_DESC,
		TRX_DATE,
		TRX_NUMBER,
		cast( BOOKER_ID as varchar(100)) BOOKER_ID,
		BOOKER_NAME,
		cast(SUPPLIER_ID as varchar(100))SUPPLIER_ID,
		SUPPLIER_NAME,
		cast(TRIM(BUSINESS_LINE_ID) as varchar(100)) BUSINESS_LINE_ID,
		cast(BUSINESS_LINE as varchar(100)) BUSINESS_LINE,
		ISNULL(CHANNEL,
		'Blank') AS CHANNEL,
		CUSTOMER_ID,
		CUSTOMER_NUMBER,
		CUSTOMER_NAME,
		SALES_ORDER_TYPE,
		CAST( INVENTORY_ITEM_ID AS VARCHAR(100)) INVENTORY_ITEM_ID,
		ITEM_CODE,
		DESCRIPTION,
		UNIT_SELLING_PRICE,
		SOLD_QTY,
		BONUS_QTY,
		CLAIMABLE_DISCOUNT,
		UNCLAIMABLE_DISCOUNT,
		TAX_RECOVERABLE,
		GROSS NET_AMOUNT,
		
		CLAIMABLE_DISCOUNT + UNCLAIMABLE_DISCOUNT TOTAL_DISCOUNT,
		CUSTOMER_TRX_ID,
		CASE
			WHEN
         SALES_ORDER_TYPE LIKE '% MR %' 
      THEN
         'RETURN'
			ELSE
         'SALE'
		END
   AS REASON_CODE ,
		case
			when
         UPPER(SALES_ORDER_TYPE) LIKE '%CASH%' 
      THEN
         'CASH'
			ELSE
         'CREDIT'
		END
   BILL_TYPE_DESC ,
		0 COMPANY_CODE,
		NULL BILLING_TYPE ,
		NULL SALES_ORDER_NO
   ,
		NULL ADD1,
		NULL ADD2,
		NULL ADD3
	FROM
		dbo.IBL_SALE_DISCOUNT_MIS_VW
	WHERE
		(
      TRX_DATE >= '2017-01-01 00:00:00.000'
   )
UNION ALL
	--6100,6300
	select
	ITEM_CATEGORY,
		ORG_ID,
		PSDD.ORG_DESC,
		PSDD.TRX_DATE,
		PSDD.TRX_NUMBER,
		cast(PSDD.BOOKER_ID as varchar(100) )BOOKER_ID,
		PSDD.BOOKER_NAME,
		cast(PSDD.SUPPLIER_ID as varchar(100) )SUPPLIER_ID,
		PSDD.SUPPLIER_NAME,
		cast(TRIM(PSDD.BUSINESS_LINE_ID) as varchar(100)) BUSINESS_LINE_ID,
		PSDD.BUSINESS_LINE,
		ISNULL(PSDD.CHANNEL,
		'Blank') AS CHANNEL,
		PSDD.CUSTOMER_ID CUSTOMER_ID,
		PSDD.CUSTOMER_NUMBER CUSTOMER_NUMBER,
		PSDD.CUSTOMER_NAME CUSTOMER_NAME,
		PSDD.SALES_ORDER_TYPE SALES_ORDER_TYPE,
		PSDD.INVENTORY_ITEM_ID,
		PSDD.ITEM_CODE ITEM_CODE,
		PSDD.DESCRIPTION DESCRIPTION,
		PSDD.UNIT_SELLING_PRICE UNIT_SELLING_PRICE,
		PSDD.SOLD_QTY,
		PSDD.BONUS_QTY BONUS_QTY,
		PSDD.CLAIMABLE_DISCOUNT CLAIMABLE_DISCOUNT,
		PSDD.UNCLAIMABLE_DISCOUNT UNCLAIMABLE_DISCOUNT,
		PSDD.TAX_RECOVERABLE TAX_RECOVERABLE,
		PSDD.GROSS_AMOUNT NET_AMOUNT,
		PSDD.UNCLAIMABLE_DISCOUNT + PSDD.CLAIMABLE_DISCOUNT TOTAL_DISCOUNT,
		PSDD.CUSTOMER_NUMBER CUSTOMER_TRX_ID,
		PSDD.REASON_CODE,
		BILL_TYPE_DESC,
		COMPANY_CODE,
		PSDD.BILLING_TYPE ,
		PSDD.SALES_ORDER_NO   ,
		ADD1,
		ADD2,
		ADD3
	from
		PHNX_SALES_DATA PSDD
		---PHNX_SALES_DATA_VIEW
	where
		1 = 1
		AND PSDD.COMPANY_CODE IN ( 6100,6300)
		and psdd.BILLING_TYPE in ('ZOPC','ZOCC','ZUBC','ZUCC','ZORE','ZORC','ZURB','ZUB1','ZNES','ZNEC')
   )A;


-- dbo.IBL_SALE_DISCOUNT_MIS_VW_BO_IK source

CREATE VIEW IBL_SALE_DISCOUNT_MIS_VW_BO_IK AS 
SELECT ORG_ID, TRX_DATE, TRX_NUMBER, BOOKER_ID, BOOKER_NAME, SUPPLIER_ID, SUPPLIER_NAME, BUSINESS_LINE_ID, BUSINESS_LINE, ISNULL(CHANNEL, 'Blank') AS CHANNEL, CUSTOMER_ID, CUSTOMER_NUMBER, 
                  CUSTOMER_NAME, SALES_ORDER_TYPE, INVENTORY_ITEM_ID, ITEM_CODE, DESCRIPTION, UNIT_SELLING_PRICE, SOLD_QTY, BONUS_QTY, CLAIMABLE_DISCOUNT, UNCLAIMABLE_DISCOUNT, TAX_RECOVERABLE, GROSS, 
                  CUSTOMER_TRX_ID, CASE WHEN SALES_ORDER_TYPE LIKE '% MR %' THEN 'RETURN' ELSE 'SALE' END AS REASON_CODE
FROM     dbo.IBL_SALE_DISCOUNT_MIS_VW
--WHERE  (TRX_DATE >= '2017-01-01 00:00:00.000');


-- dbo.IBL_SALE_DISCOUNT_MIS_VW_BO_NEW source

CREATE VIEW [dbo].[IBL_SALE_DISCOUNT_MIS_VW_BO_NEW]
AS
SELECT        ORG_ID, TRX_DATE, TRX_NUMBER, BOOKER_ID, BOOKER_NAME, SUPPLIER_ID, SUPPLIER_NAME, BUSINESS_LINE_ID, BUSINESS_LINE, CHANNEL, CUSTOMER_ID, CUSTOMER_NUMBER, 
                         CUSTOMER_NAME, SALES_ORDER_TYPE, INVENTORY_ITEM_ID, ITEM_CODE, DESCRIPTION, UNIT_SELLING_PRICE, SOLD_QTY, BONUS_QTY, CLAIMABLE_DISCOUNT, UNCLAIMABLE_DISCOUNT, 
                         TAX_RECOVERABLE, GROSS, CUSTOMER_TRX_ID
FROM            dbo.IBL_SALE_DISCOUNT_MIS_VW
WHERE        (TRX_DATE = '2018-01-01');


-- dbo.IBL_SALE_DISCOUNT_MIS_VW_BO_SPF source

CREATE VIEW [dbo].[IBL_SALE_DISCOUNT_MIS_VW_BO_SPF]
AS
SELECT        ORG_ID, TRX_DATE, TRX_NUMBER, BOOKER_ID, BOOKER_NAME, SUPPLIER_ID, SUPPLIER_NAME, BUSINESS_LINE_ID, BUSINESS_LINE, ISNULL(CHANNEL, 'Blank') AS CHANNEL, CUSTOMER_ID, 
                         CUSTOMER_NUMBER, CUSTOMER_NAME, SALES_ORDER_TYPE, INVENTORY_ITEM_ID, ITEM_CODE, DESCRIPTION, UNIT_SELLING_PRICE, SOLD_QTY, BONUS_QTY, CLAIMABLE_DISCOUNT, 
                         UNCLAIMABLE_DISCOUNT, TAX_RECOVERABLE, GROSS, CUSTOMER_TRX_ID, CASE WHEN SALES_ORDER_TYPE LIKE '% MR %' THEN 'RETURN' ELSE 'SALE' END AS REASON_CODE
FROM            dbo.IBL_SALE_DISCOUNT_MIS_VW
WHERE        (TRX_DATE >= '2018-01-01 00:00:00.000') AND (BUSINESS_LINE_ID  in ('165', '160'));


-- dbo.IBL_SALE_DISCOUNT_MIS_VW_BO_bu source

CREATE VIEW [dbo].[IBL_SALE_DISCOUNT_MIS_VW_BO_bu]
AS
SELECT        ORG_ID, TRX_DATE, TRX_NUMBER, BOOKER_ID, BOOKER_NAME, SUPPLIER_ID, SUPPLIER_NAME, BUSINESS_LINE_ID, BUSINESS_LINE, CHANNEL, CUSTOMER_ID, CUSTOMER_NUMBER, 
                         CUSTOMER_NAME, SALES_ORDER_TYPE, INVENTORY_ITEM_ID, ITEM_CODE, DESCRIPTION, UNIT_SELLING_PRICE, SOLD_QTY, BONUS_QTY, CLAIMABLE_DISCOUNT, UNCLAIMABLE_DISCOUNT, 
                         TAX_RECOVERABLE, GROSS, CUSTOMER_TRX_ID
FROM            dbo.IBL_SALE_DISCOUNT_MIS_VW
WHERE        (TRX_DATE >= '2018-01-01 00:00:00.000');


-- dbo.IBL_SALE_DISCOUNT_MIS_VW_BO_dfl source

CREATE VIEW [dbo].[IBL_SALE_DISCOUNT_MIS_VW_BO_dfl]
AS
SELECT        ORG_ID, TRX_DATE, TRX_NUMBER, BOOKER_ID, BOOKER_NAME, SUPPLIER_ID, SUPPLIER_NAME, BUSINESS_LINE_ID, BUSINESS_LINE, ISNULL(CHANNEL, 'Blank') AS CHANNEL, CUSTOMER_ID, 
                         CUSTOMER_NUMBER, CUSTOMER_NAME, SALES_ORDER_TYPE, INVENTORY_ITEM_ID, ITEM_CODE, DESCRIPTION, UNIT_SELLING_PRICE, SOLD_QTY, BONUS_QTY, CLAIMABLE_DISCOUNT, 
                         UNCLAIMABLE_DISCOUNT, TAX_RECOVERABLE, GROSS, CUSTOMER_TRX_ID, CASE WHEN SALES_ORDER_TYPE LIKE '% MR %' THEN 'RETURN' ELSE 'SALE' END AS REASON_CODE
FROM            dbo.IBL_SALE_DISCOUNT_MIS_VW
WHERE        (TRX_DATE >= getdate()-3);


-- dbo.IBL_SALE_DISCOUNT_MIS_VW_EXT source

CREATE VIEW dbo.IBL_SALE_DISCOUNT_MIS_VW_EXT
AS
SELECT        BL_CD, UNQ__INV_TYPE, MONTH, LOCATION, REGION, CATEG, TSO_DIV, BR_CD, ORG_ID, TRX_DATE, TRX_NUMBER, UNQ_CUSTOMER_TRX_ID, UNQ__TRX_NUMBER, BOOKER_ID, BOOKER_NAME, 
                         SUPPLIER_ID, SUPPLIER_NAME, BUSINESS_LINE_ID, BUSINESS_LINE, CHANNEL, CUSTOMER_ID, CUSTOMER_NUMBER, CUSTOMER_NAME, SALES_ORDER_TYPE, INVENTORY_ITEM_ID, ITEM_CODE, 
                         DESCRIPTION, BILL_TYPE, SUM(TPchange) + MAX(UNIT_SELLING_PRICE) AS UNIT_SELLING_PRICE, SUM(TOT_QTY) AS TOTQTY, SUM(TOT_QTY) - SUM(BONUS_QTY) AS SOLD_QTY, SUM(BONUS_QTY) 
                         AS BONUS_QTY, SUM(CLAIMABLE_DISCOUNT) AS CLAIMABLE_DISCOUNT, SUM(UN_CLAIMABLE_DISCOUNT) AS UNCLAIMABLE_DISCOUNT, SUM(TAX_RECOVERABLE) AS TAX_RECOVERABLE, SUM(GROSS) 
                         AS GROSS, 'EBS' AS Source, UNQ__TRX_DATE, UNQ__MONTH
FROM            (SELECT        BL_CD, UNQ__INV_TYPE, MONTH, LOCATION, REGION, CATEG, TSO_DIV, BR_CD, ORG_ID, TRX_DATE, COALESCE (PREVIOUS_TRX_NUMBER, TRX_NUMBER) AS TRX_NUMBER, 
                                                    UNQ_CUSTOMER_TRX_ID, UNQ__TRX_NUMBER, BOOKER_ID, BOOKER_NAME, SUPPLIER_ID, SUPPLIER_NAME, BUS_LINE_ID AS BUSINESS_LINE_ID, BL_DESC AS BUSINESS_LINE, 
                                                    CH_DESC AS CHANNEL, CUSTOMER_ID, CUSTOMER_NUMBER, CUSTOMER_NAME, SALE_ORDER_TYPE_H AS SALES_ORDER_TYPE, INVENTORY_ITEM_ID, ITEM_CODE, 
                                                    ITEM_DESC AS DESCRIPTION, BUS_LINE_ID, CASE WHEN (T .LINETYPE = 'GROSS' AND t .x_modifier_type IS NULL) THEN MAX(T .UNIT_SELLING_PRICE) ELSE 0 END AS UNIT_SELLING_PRICE, 
                                                    CASE WHEN COALESCE (MODIFIER_TYPE, 'DLT') = 'DLT' THEN SUM(QTY) ELSE 0 END AS TOT_QTY, CASE WHEN MODIFIER_TYPE = 'PRO' THEN (SUM(QTY)) ELSE 0 END AS BONUS_QTY, 
                                                    CASE WHEN T .LINETYPE = 'CLAIMABLE DISCOUNT' THEN SUM(T .REVENUE) ELSE 0 END AS CLAIMABLE_DISCOUNT, 
                                                    CASE WHEN T .LINETYPE = 'UNCLAIMABLE DISCOUNT' THEN SUM(T .REVENUE) ELSE 0 END AS UN_CLAIMABLE_DISCOUNT, SUM(TAX) AS TAX_RECOVERABLE, 
                                                    CASE WHEN T .LINETYPE = 'GROSS' THEN SUM(T .REVENUE) ELSE 0 END AS GROSS, (CASE WHEN MODIFIER_TYPE = 'N/A' THEN SUM(UNIT_SELLING_PRICE) ELSE 0 END) AS TPchange, 
                                                    BILL_TYPE, UNQ__TRX_DATE, UNQ__MONTH
                          FROM            dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS T
                          WHERE        (1 = 1)
                          GROUP BY BL_CD, UNQ__INV_TYPE, MONTH, LOCATION, REGION, CATEG, TSO_DIV, BR_CD, ORG_ID, TRX_DATE, TRX_NUMBER, UNQ_CUSTOMER_TRX_ID, UNQ__TRX_NUMBER, BOOKER_ID, 
                                                    BOOKER_NAME, SUPPLIER_ID, SUPPLIER_NAME, BUS_LINE_ID, BL_DESC, CH_DESC, CUSTOMER_ID, CUSTOMER_NUMBER, CUSTOMER_NAME, SALE_ORDER_TYPE_H, INVENTORY_ITEM_ID, 
                                                    ITEM_CODE, ITEM_DESC, BUS_LINE_ID, MODIFIER_TYPE, LINETYPE, COALESCE (PREVIOUS_TRX_NUMBER, TRX_NUMBER), X_MODIFIER_TYPE, BILL_TYPE, UNQ__TRX_DATE, UNQ__MONTH) 
                         AS aa
GROUP BY BL_CD, UNQ__INV_TYPE, MONTH, LOCATION, REGION, CATEG, TSO_DIV, BR_CD, ORG_ID, TRX_DATE, TRX_NUMBER, UNQ_CUSTOMER_TRX_ID, UNQ__TRX_NUMBER, BOOKER_ID, BOOKER_NAME, 
                         SUPPLIER_ID, SUPPLIER_NAME, BUSINESS_LINE_ID, BUSINESS_LINE, CHANNEL, CUSTOMER_ID, CUSTOMER_NUMBER, CUSTOMER_NAME, SALES_ORDER_TYPE, INVENTORY_ITEM_ID, ITEM_CODE, 
                         DESCRIPTION, BUS_LINE_ID, BILL_TYPE, UNQ__TRX_DATE, UNQ__MONTH;


-- dbo.IBL_SALE_DISCOUNT_SAP_VW_BO source

CREATE VIEW IBL_SALE_DISCOUNT_SAP_VW_BO
AS
	select *
	from (
	SELECT BRANCH                                ORG_ID
	,      INVOICE_DATE                          TRX_DATE
	,      INVOICE_NUMBER                        TRX_NUMBER
	,      BOOKER_ID                            
	,      BOOKER_NAME                          
	,      SUPPLIER_ID                          
	,      SUPPLIER_NAME                        
	,      BUSINESS_LINE_ID                     
	,      BUSLINE_DESCRIPTION                  
	,      ISNULL(CHANNEL_DESCRIPTION,'Blank')   CHANNEL
	,      CUSTOMER_ID                          
	,      CUSTOMER_NUMBER                      
	,      CUSTOMER_NAME                        
	,      SALES_ORDER_TYPE_DESC                 SALE_ORDER_TYPE
	,      ITEM_CODE                             INVENTORY_ITEM_ID
	,      ITEM_CODE                            
	,      ITEM_DESCRIPTION                      DESCRIPTION
	,      UNIT_SELLING_PRICE                   
	,      CASE WHEN QTY_TYPE='SOLD' THEN SOLD_QTY
	                                 ELSE 0 END  SOLD_QTY

	,      CASE WHEN QTY_TYPE<>'SOLD' THEN SOLD_QTY
	                                  ELSE 0 END BONUS_QTY
	,      CLAIMABLE_DISCOUNT                   
	,      UN_CLAIMABLE_DISCOUNT                 UNCLAIMABLE_DISCOUNT
	,      TAX_RECOVERABLE                      
	,      GROSS                                
	,      CUSTOMER_TRX_ID                      
	,      'Pending'                             reason_code


	FROM ZPBI_SALE_INVOICES ZSI)a
	WHERE 1=1
;


-- dbo.LastTrheeMonthsForSaifSb source

CREATE VIEW dbo.LastTrheeMonthsForSaifSb
AS
SELECT        DIV, MONTH, RIGHT(CUSTOMER_ID, LEN(CUSTOMER_ID) - 3) AS CUSTOMER_ID, CUSTOMER_NAME, COUNT(DISTINCT TRX_NUMBER) AS bills, BL_CODE1, SUM(GROSS) AS sales
FROM            dbo.WH_PBI_SALES_ALL
GROUP BY DIV, MONTH, RIGHT(CUSTOMER_ID, LEN(CUSTOMER_ID) - 3), CUSTOMER_NAME, BR_CD, DIV_CD, BL_CODE1
HAVING        (MONTH BETWEEN CONVERT(DATETIME, '2019-05-01 00:00:00', 102) AND CONVERT(DATETIME, '2019-07-01 00:00:00', 102));


-- dbo.MONTH_SALES source

CREATE VIEW [dbo].[MONTH_SALES] AS
select
DATEADD(mm, DATEDIFF(mm, 0, isdm.TRX_DATE), 0)MONTH_
,isdm.BUSINESS_LINE

--,sum(isdm.SOLD_QTY)SOLD_QTY
,isdm.SOLD_QTY,isdm.GROSS
from IBL_SALE_DISCOUNT_MIS_VW_BO isdm
where 1=1 
--and trx_date>='01-AUG-20' 
--group by DATEADD(mm, DATEDIFF(mm, 0, isdm.TRX_DATE), 0),isdm.BUSINESS_LINE
;


-- dbo.NewView source

CREATE VIEW dbo.NewView AS
select 1 as x;


-- dbo.PBI_ITEMS source

CREATE VIEW PBI_ITEMS AS
  SELECT DISTINCT BUSINESS_LINE_ID,BUSINESS_LINE,ITEM_CODE,ITEM_DESC
   FROM PBI_order_replenishment;


-- dbo.PBI_STOCK_ONHAND source

create VIEW [dbo].[PBI_STOCK_ONHAND] AS
   select
  busline_id,busline_desc,item_code,item_desc
 ,sum(qty)qty
    from live_inv where 1=1 and SUBINVENTORY_CODE='SELLABLE' 
	GROUP BY
	 busline_id,busline_desc,item_code,item_desc 

	;


-- dbo.PHNX_BOOKING_DATA source

CREATE VIEW PHNX_BOOKING_DATA AS
SELECT
DISTINCT
	SUBSTRING(oi.SAP_DISTRIBUTOR_CODE,1,4) COMPANY_CODE,
	ISDM.ORG_ID,
	ISDM.ORG_DESC,
		oi.ORDER_NUMBER SALESFLO_ORDER,
		oi.ORDER_NUMBER BSTKD,
		isdm.SALES_ORDER_NO SALES_ORDER_NO,		
	OI.order_date ,
	CAST(isdm.TRX_NUMBER AS VARCHAR(100))DOCUMENT_NO,
	isdm.TRX_DATE BILLING_DATE,
	CAST(isdm.CUSTOMER_NUMBER AS VARCHAR(100))CUSTOMER_NUMBER,
	
	CAST(isdm.CUSTOMER_NAME AS VARCHAR(100))CUSTOMER_NAME,
	isdm.BOOKER_ID ,
	CAST(ISDM.BOOKER_NAME AS VARCHAR(100))BOOKER_NAME,
	isdm.SUPPLIER_ID ,
	CAST(isdm.SUPPLIER_NAME AS VARCHAR(100))SUPPLIER_NAME,
	isdm.BUSINESS_LINE_ID,
	isdm.BUSINESS_LINE BUSLINE_DESC,
	ISDM.ITEM_CODE,
	DESCRIPTION ITEM_DESC,
	OI.order_units,
	OI.order_amount,
	isdm.GROSS_AMOUNT GROSS_AMOUNT,
	CAST(isdm.BILL_TYPE_DESC AS VARCHAR(100))BILL_TYPE_DESC,
	CAST(isdm.SALES_ORDER_TYPE AS VARCHAR(100)) SALES_ORDER_TYPE,
	OI.status,
	isdm.SOLD_QTY delivered_qty
---OI.ORDER_DATE
FROM ORDER_INFO OI 
--IBL_SALE_DISCOUNT_MIS_VW_BO ISDM 
LEFT OUTER JOIN VBKD_VIEW VK ON (VK.BSTKD =OI.ORDER_NUMBER AND VK.MATNR=OI.SAP_SKU_CODE)
LEFT OUTER JOIN PHNX_SALES_DATA ISDM ON (ISDM.SALES_ORDER_NO=VK.VBELN 
		AND SUBSTRING(ISDM.ITEM_CODE,9,30)=VK.MATNR 
		--AND SUBSTRING( ITEM_CODE,9,30) = '6119001351'
		)
---LEFT OUTER JOIN ORDER_INFO OI ON (OI.ORDER_NUMBER=VK.BSTKD AND OI.SAP_SKU_CODE=VK.MATNR)
WHERE 1=1 
--ISDM .SALES_ORDER_NO  IN ('3900230652','3900230653')
AND OI.ORDER_DATE ='02-FEB-22' AND SUBSTRING(OI.SAP_DISTRIBUTOR_CODE,1,4)=6100 
--AND ISDM.SALES_ORDER_NO='3900230378'
--AND OI.ORDER_NUMBER ='D0003ORD4485'
;

/*WHERE
	1 = 1
	AND PSD.TRX_DATE >= '03-jul-21'
	AND PSD.COMPANY_CODE IN (6100, 6300)*/
	;


-- dbo.PHNX_BOOKING_VS_EXECUTION_DETAIL_DATA source

CREATE VIEW PHNX_BOOKING_VS_EXECUTION_DETAIL_DATA AS
SELECT
DISTINCT 
	PSD.COMPANY_CODE,
	PSD.ORG_ID,
	PSD.ORG_DESC,
	VBKD_VIEW.SALESFLO_ORDER_NUMBER SALESFLO_ORDER,
	VBKD_VIEW.SALESFLO_ORDER_NUMBER BSTKD,
	CAST(PSD.SALES_ORDER_NO AS VARCHAR(100))SALES_ORDER_NO,			
	OI.order_date ,
	CAST(PSD.TRX_NUMBER AS VARCHAR(100))DOCUMENT_NO,
	PSD.TRX_DATE BILLING_DATE,
	CAST(PSD.CUSTOMER_NUMBER AS VARCHAR(100))CUSTOMER_NUMBER,
	
	CAST(PSD.CUSTOMER_NAME AS VARCHAR(100))CUSTOMER_NAME,
	PSD.BOOKER_ID ,
	CAST(PSD.BOOKER_NAME AS VARCHAR(100))BOOKER_NAME,
	PSD.SUPPLIER_ID ,
	CAST(PSD.SUPPLIER_NAME AS VARCHAR(100))SUPPLIER_NAME,
	PSD.BUSINESS_LINE_ID,
	PSD.BUSINESS_LINE BUSLINE_DESC,
	ITEM_CODE,
	DESCRIPTION ITEM_DESC,
	OI.order_units,
	OI.order_amount,
	PSD.GROSS_AMOUNT GROSS_AMOUNT,
	CAST(BILL_TYPE_DESC AS VARCHAR(100))BILL_TYPE_DESC,
	CAST(PSD.SALES_ORDER_TYPE AS VARCHAR(100)) SALES_ORDER_TYPE,
	OI.status,
	psd.SOLD_QTY delivered_qty
FROM
	PHNX_SALES_DATA PSD
LEFT OUTER JOIN
      VBKD_VIEW 
      ON
	(VBKD_VIEW.VBELN = PSD.SALES_ORDER_NO)
LEFT OUTER JOIN
      ORDER_INFO OI 
      ON
	(OI.order_number = VBKD_VIEW.SALESFLO_ORDER_NUMBER 
		AND OI.sap_sku_code = SUBSTRING(TRIM(PSD.ITEM_CODE), 9, 30)
			AND OI.sap_store_code = PSD.CUSTOMER_NUMBER
			AND OI.STATUS = 'Invoiced'
	  )
WHERE
	1 = 1
	AND PSD.TRX_DATE >= '03-jul-21'
	AND PSD.COMPANY_CODE IN (6100, 6300)
	--EXCLUDING BONUS
		AND PSD.ITEM_CATEGORY NOT IN ('ZFOU')
	--and OI.ORDER_DATE<>'0000-00-00'
	UNION ALL
	--OPEN
SELECT
	SUBSTRING(SAP_DISTRIBUTOR_CODE, 1, 4)COMPANY_CODE,
	NULL ORG_ID,
	NULL ORG_DESC,
	OI.ORDER_NUMBER SALESFLO_ORDER,
	NULL BSTKD,
	NULL SALES_ORDER_NO,
	OI.ORDER_DATE ,
	NULL DOCUMENT_NO,
	NULL BILLING_DATE,
	SAP_STORE_CODE CUSTOMER_NUMBER,
	NULL CUSTOMER_NAME,
	OI.ORDER_BOOKER_CODE BOOKER_ID,
	NULL BOOKER_NAME,
	NULL SUPPLIER_ID,
	NULL SUPPLIER_NAME,
	NULL BUSINESS_LINE_ID,
	NULL BUSLINE_DESC,
	SAP_SKU_CODE ITEM_CODE,
	SKU_DESCRIPTION ITEM_DESC,
	OI.order_units,
	OI.order_amount,
	0 GROSS_AMOUNT,
	NULL BILL_TYPE_DESC,
	NULL SALES_ORDER_TYPE,
	OI.status,
	0 delivered_qty
FROM
	ORDER_INFO OI
WHERE 1=1 AND OI.STATUS<>'Invoiced'
union ALL 
SELECT
	SUBSTRING(SAP_DISTRIBUTOR_CODE, 1, 4)COMPANY_CODE,
	NULL ORG_ID,
	NULL ORG_DESC,
	OI.ORDER_NUMBER SALESFLO_ORDER,
	NULL BSTKD,
	NULL SALES_ORDER_NO,
	OI.ORDER_DATE ,
	NULL DOCUMENT_NO,
	NULL BILLING_DATE,
	SAP_STORE_CODE CUSTOMER_NUMBER,
	NULL CUSTOMER_NAME,
	OI.ORDER_BOOKER_CODE BOOKER_ID,
	NULL BOOKER_NAME,
	NULL SUPPLIER_ID,
	NULL SUPPLIER_NAME,
	NULL BUSINESS_LINE_ID,
	NULL BUSLINE_DESC,
	SAP_SKU_CODE ITEM_CODE,
	SKU_DESCRIPTION ITEM_DESC,
	OI.order_units,
	OI.order_amount,
	0 GROSS_AMOUNT,
	NULL BILL_TYPE_DESC,
	NULL SALES_ORDER_TYPE,
	OI.status,
	0 delivered_qty
FROM
	ORDER_INFO OI 	
WHERE
	1 = 1
	--AND OI.ORDER_DATE ='02-FEB-22'
	--AND SUBSTRING(SAP_DISTRIBUTOR_CODE, 1, 4)=6100	
	AND OI.STATUS not in ('Open')
	AND OI.ORDER_NUMBER  NOT IN (SELECT DISTINCT BSTKD FROM VBKD_DATA vd)
;


-- dbo.PHNX_BOOKING_VS_EXECUTION_DETAIL_DATA1 source

CREATE VIEW PHNX_BOOKING_VS_EXECUTION_DETAIL_DATA1 AS
SELECT
DISTINCT
	SUBSTRING(oi.SAP_DISTRIBUTOR_CODE,1,4) COMPANY_CODE,
	ISDM.ORG_ID,
	ISDM.ORG_DESC,
		oi.ORDER_NUMBER SALESFLO_ORDER,
		oi.ORDER_NUMBER BSTKD,
		isdm.SALES_ORDER_NO SALES_ORDER_NO,		
	OI.order_date ,
	CAST(isdm.TRX_NUMBER AS VARCHAR(100))DOCUMENT_NO,
	isdm.TRX_DATE BILLING_DATE,
	CAST(isdm.CUSTOMER_NUMBER AS VARCHAR(100))CUSTOMER_NUMBER,
	
	CAST(isdm.CUSTOMER_NAME AS VARCHAR(100))CUSTOMER_NAME,
	isdm.BOOKER_ID ,
	CAST(ISDM.BOOKER_NAME AS VARCHAR(100))BOOKER_NAME,
	isdm.SUPPLIER_ID ,
	CAST(isdm.SUPPLIER_NAME AS VARCHAR(100))SUPPLIER_NAME,
	isdm.BUSINESS_LINE_ID,
	isdm.BUSINESS_LINE BUSLINE_DESC,
	ISDM.ITEM_CODE,
	DESCRIPTION ITEM_DESC,
	OI.order_units,
	OI.order_amount,
	isdm.GROSS_AMOUNT GROSS_AMOUNT,
	CAST(isdm.BILL_TYPE_DESC AS VARCHAR(100))BILL_TYPE_DESC,
	CAST(isdm.SALES_ORDER_TYPE AS VARCHAR(100)) SALES_ORDER_TYPE,
	OI.status,
	isdm.SOLD_QTY delivered_qty
---OI.ORDER_DATE
FROM ORDER_INFO OI 
--IBL_SALE_DISCOUNT_MIS_VW_BO ISDM 
INNER JOIN VBKD_VIEW VK ON (VK.BSTKD =OI.ORDER_NUMBER 
AND VK.MATNR=OI.SAP_SKU_CODE
)
INNER JOIN PHNX_SALES_DATA ISDM ON (ISDM.SALES_ORDER_NO=VK.VBELN 
		AND SUBSTRING(ISDM.ITEM_CODE,9,30)=VK.MATNR 
				)
---LEFT OUTER JOIN ORDER_INFO OI ON (OI.ORDER_NUMBER=VK.BSTKD AND OI.SAP_SKU_CODE=VK.MATNR)
WHERE 1=1 
--ISDM .SALES_ORDER_NO  IN ('3900230652','3900230653')
--AND OI.ORDER_DATE ='02-FEB-22' 
AND SUBSTRING(OI.SAP_DISTRIBUTOR_CODE,1,4)=6100 
--AND ISDM.SALES_ORDER_NO='3900230378'
--AND OI.ORDER_NUMBER ='D0003ORD4485'
;

/*WHERE
	1 = 1
	AND PSD.TRX_DATE >= '03-jul-21'
	AND PSD.COMPANY_CODE IN (6100, 6300)*/
	;


-- dbo.PHNX_BOOKING_VS_EXECUTION_DETAIL_DATA2 source

CREATE VIEW PHNX_BOOKING_VS_EXECUTION_DETAIL_DATA2 AS
SELECT
DISTINCT
	SUBSTRING(oi.SAP_DISTRIBUTOR_CODE,1,4) COMPANY_CODE,
	ISDM.ORG_ID,
	ISDM.ORG_DESC,
		oi.ORDER_NUMBER SALESFLO_ORDER,
		oi.ORDER_NUMBER BSTKD,
		isdm.SALES_ORDER_NO SALES_ORDER_NO,		
	OI.order_date ,
	CAST(isdm.TRX_NUMBER AS VARCHAR(100))DOCUMENT_NO,
	isdm.TRX_DATE BILLING_DATE,
	CAST(isdm.CUSTOMER_NUMBER AS VARCHAR(100))CUSTOMER_NUMBER,
	
	CAST(isdm.CUSTOMER_NAME AS VARCHAR(100))CUSTOMER_NAME,
	isdm.BOOKER_ID ,
	CAST(ISDM.BOOKER_NAME AS VARCHAR(100))BOOKER_NAME,
	isdm.SUPPLIER_ID ,
	CAST(isdm.SUPPLIER_NAME AS VARCHAR(100))SUPPLIER_NAME,
	isdm.BUSINESS_LINE_ID,
	isdm.BUSINESS_LINE BUSLINE_DESC,
	ISDM.ITEM_CODE,
	DESCRIPTION ITEM_DESC,
	OI.order_units,
	OI.order_amount,
	isdm.GROSS_AMOUNT GROSS_AMOUNT,
	CAST(isdm.BILL_TYPE_DESC AS VARCHAR(100))BILL_TYPE_DESC,
	CAST(isdm.SALES_ORDER_TYPE AS VARCHAR(100)) SALES_ORDER_TYPE,
	OI.status,
	isdm.SOLD_QTY delivered_qty
---OI.ORDER_DATE
FROM ORDER_INFO OI ,VBKD_VIEW VK,PHNX_SALES_DATA ISDM 
WHERE VK.BSTKD =OI.ORDER_NUMBER AND VK.MATNR=OI.SAP_SKU_CODE
AND ISDM.SALES_ORDER_NO=VK.VBELN AND SUBSTRING(ISDM.ITEM_CODE,9,30)=VK.MATNR 
--ISDM .SALES_ORDER_NO  IN ('3900230652','3900230653')
--AND OI.ORDER_DATE ='02-FEB-22' 
AND SUBSTRING(OI.SAP_DISTRIBUTOR_CODE,1,4)=6100 
--AND ISDM.SALES_ORDER_NO='3900230378'
--AND OI.ORDER_NUMBER ='D0003ORD4485'
;

/*WHERE
	1 = 1
	AND PSD.TRX_DATE >= '03-jul-21'
	AND PSD.COMPANY_CODE IN (6100, 6300)*/
	;


-- dbo.PHNX_BUSLINE_VIEW source

CREATE VIEW PHNX_BUSLINE_VIEW AS
SELECT DISTINCT
PSDV.BUSINESS_LINE_ID,PSDV.BUSLINE_DESC,PSDV.BUSINESS_LINE_ID VALUE_SET
FROM PHNX_SALES_DATA_VIEW PSDV;


-- dbo.PHNX_CONSUMER_OPS_STOCK_VIEW source

CREATE VIEW [dbo].[PHNX_CONSUMER_OPS_STOCK_VIEW] AS
select 
PLANT,
STORAGE_LOCATION ORG_ID,T001L.LGOBE ORG_DESC,PSD.MATERIAL ITEM_CODE,MD.MATNR_DESC ITEM_DESC,MD.BUSLINE_ID,MD.BUSLINE_DESC,T001L.LGOBE SUBINVENTORY_CODE
,BATCH LOT_NUMBER
,CAST(PSD.UNRESTRICTED AS numeric) QTY
,psd.TRADE_PRICE TP
,CAST(PSD.TRADE_PRICE AS DECIMAL(10,2))/100 TRADE_PRICE
,CAST(PSD.TRADE_PRICE AS DECIMAL(10,2))/100 *  CAST(PSD.UNRESTRICTED AS numeric) VALUE_ON_TP
,PSD.EXPIRY_DATE 
from phnx_consumer_ops_stock PSD
LEFT OUTER JOIN T001L ON (T001L.WERKS=PSD.PLANT AND T001L.LGORT=PSD.STORAGE_LOCATION)
LEFT OUTER JOIN MATNR_DESC MD ON (SUBSTRING(MD.MATNR,9,30)=TRIM(PSD.MATERIAL)AND MD.COMPANY=PSD.PLANT)
;


-- dbo.PHNX_LOCATION_VIEW source

CREATE  VIEW  PHNX_LOCATION_VIEW AS
SELECT  DISTINCT ORG_ID,ORG_DESC
,CASE
 WHEN ORG_DESC='Abbotabad' THEN 'ABT'
WHEN ORG_DESC='Attock' THEN 'ATK'
WHEN ORG_DESC='Bahawalpur M' THEN 'BWP'
WHEN ORG_DESC='DSS Korangi' THEN 'KRG'
WHEN ORG_DESC='Faisalabad M' THEN 'FSD'
WHEN ORG_DESC='Gujranwala M' THEN 'GUJ'
WHEN ORG_DESC='Gujrat' THEN 'GRT'
WHEN ORG_DESC='Hyderabad M' THEN 'HYD'
WHEN ORG_DESC='Islamabad M' THEN 'RWP'
WHEN ORG_DESC='Jhelum' THEN 'JHM'
WHEN ORG_DESC='Karachi JOHAR' THEN 'KJH'
WHEN ORG_DESC='Karachi M' THEN 'KRC'
WHEN ORG_DESC='Karachi PECHS' THEN 'KPS'
WHEN ORG_DESC='Korangi' THEN 'KRG'
WHEN ORG_DESC='Lahore M' THEN 'LHR'
WHEN ORG_DESC='Larkana' THEN 'LRK'
WHEN ORG_DESC='Mardan' THEN 'MRD'
WHEN ORG_DESC='Multan M' THEN 'MUX'
WHEN ORG_DESC='New Challi' THEN 'NCH'
WHEN ORG_DESC='Peshawar M' THEN 'PSH'
WHEN ORG_DESC='Quetta M' THEN 'QTA'
WHEN ORG_DESC='Sahiwal' THEN 'SHW'
WHEN ORG_DESC='Sargodha M' THEN 'SGD'
WHEN ORG_DESC='Sialkot M' THEN 'SLK'
WHEN ORG_DESC='Site' THEN 'KMT'
WHEN ORG_DESC='Sukkur M' THEN 'SUK'
WHEN ORG_DESC='Wah Cantt' THEN 'WCN'

END LOC_
FROM PHNX_SALES_DATA_VIEW PSD;


-- dbo.PHNX_ONHAND_DATA_VW source

create view PHNX_ONHAND_DATA_VW AS
SELECT 

POS.STORAGE_LOCATION  ORGANIZATION_ID,POS.Storage_DESCRIPTION ORG_DESC
,POS.MATERIAL INVENTORY_ITEM_ID,POS.MATERIAL ITEM_CODE,POS.MATERIAL_DESC ITEM_DESC
,POS.MATERIAL_GROUP_1 BUSLINE_ID ,POS.MATERIAL_GROUP_DESC BUSLINE_DESC
,POS.Storage_DESCRIPTION SUBINVENTORY_CODE,POS.BATCH LOT_NUMBER,POS.EXPIRY_DATE EXPIRATION_DATE
,CASE WHEN POS.UNRESTRICTED <>0 AND POS.VALUE_UNRESTRICTED<>0 THEN
  (POS.UNRESTRICTED/POS.VALUE_UNRESTRICTED)  ELSE 0 END ITEM_COST 
,POS.TP TRADE_PRICE,POS.UNRESTRICTED QTY

FROM PHNX_ONHAND_STOCK POS
WHERE POS.UNRESTRICTED<>0;


-- dbo.PHNX_ONHAND_STOCK_VIEW source

CREATE VIEW [dbo].[PHNX_ONHAND_STOCK_VIEW] AS

SELECT 

POS.STORAGE_LOCATION,POS.Storage_DESCRIPTION,POS.MATERIAL ITEM_CODE,POS.MATERIAL_DESC ITEM_DESC,POS.MATERIAL_GROUP_1 BUSLINE_ID,POS.MATERIAL_GROUP_DESC BUSLINE_DESC
,POS.Storage_DESCRIPTION SUBINVENTORY_CODE,POS.BATCH LOT_NUMBER,POS.EXPIRY_DATE
--,NULL ITEM_COST
,POS.TP,POS.UNRESTRICTED QTY
,POS.TP*POS.UNRESTRICTED VALUE_ON_TP

FROM PHNX_ONHAND_STOCK POS;


-- dbo.PHNX_OPS_STOCK_VIEW source

CREATE  VIEW [dbo].[PHNX_OPS_STOCK_VIEW] AS
select 
PLANT,
STORAGE_LOCATION ORG_ID,T001L.LGOBE ORG_DESC,PSD.MATERIAL ITEM_CODE,MD.MATNR_DESC ITEM_DESC,MD.BUSLINE_ID,MD.BUSLINE_DESC,T001L.LGOBE SUBINVENTORY_CODE
,BATCH LOT_NUMBER,PSD.UNRESTRICTED QTY
,FORMAT(psd.TRADE_PRICE/100,'##.##') TRADE_PRICE

from phnx_consumer_ops_stock PSD
LEFT OUTER JOIN T001L ON (T001L.WERKS=PSD.PLANT AND T001L.LGORT=PSD.STORAGE_LOCATION)
LEFT OUTER JOIN MATNR_DESC MD ON (SUBSTRING(MD.MATNR,9,30)=TRIM(PSD.MATERIAL))
where 1=1 and psd.PLANT=6300
;


-- dbo.PHNX_SALES_DATA_OPS_VIEW source

CREATE view [dbo].[PHNX_SALES_DATA_OPS_VIEW] as 
SELECT
   ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE CUSTOMER_ID,
CUSTOMER_CODE CUSTOMER_NUMBER,
CUSTOMER_NAME ,
BILLING_TYPE_TEXT SALES_ORDER_TYPE,
CAST(ITEM_CODE  AS VARCHAR(100))INVENTORY_ITEM_ID,
ITEM_CODE ITEM_CODE,
ITEM_DESC DESCRIPTION,
UNIT_SELLING_PRICE,

SUM(QUANTITY)QUANTITY,
SUM(CLAIM_BONUS_QUANTITY)+SUM(UNCLAIM_BONUS_QUANTITY) BONUS_QTY,
SUM(CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT,
SUM(UNCLAIMABLE_DISCOUNT)UNCLAIMABLE_DISCOUNT,
SUM(TAX_RECOVERABLE)TAX_RECOVERABLE,
SUM(GROSS_AMOUNT)GROSS_AMOUNT,
CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END REASON_CODE
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE

,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO

,SUM(AMOUNT)AMOUNT
from
   (
      SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
         --CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
        -- CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'
                AND psd.ITEM_CATEGORY NOT IN ('ZFCL','ZFOU','ZBRC','ZBRU')
            THEN
               psd.AMOUNT* - 1 
            ELSE
             CASE WHEN   psd.ITEM_CATEGORY NOT IN ('ZFCL','ZFOU','ZBRC','ZBRU') THEN
               PSD.AMOUNT END
         END
         AMOUNT 			
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN
                     UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%'   AND psd.ITEM_CATEGORY NOT IN ('ZFCL','ZFOU','ZBRC','ZBRU')
                     AND QUANTITY > 0 
                  THEN
                     QUANTITY * - 1 
                  ELSE
                  CASE WHEN   psd.ITEM_CATEGORY NOT IN ('ZFCL','ZFOU','ZBRC','ZBRU') THEN
                     QUANTITY END
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                  'OPS-Sales Returns'
               )
            THEN
               'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE , 
         
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%'  AND ITEM_CATEGORY ='ZFCL' --NORMAL BNS CLM
               AND CLAIM_BONUS_QUANTITY > 0 
            THEN
               CLAIM_BONUS_QUANTITY* - 1 
            ELSE
               CLAIM_BONUS_QUANTITY 
         END
         CLAIM_BONUS_QUANTITY , 
         
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%'   AND ITEM_CATEGORY ='ZFOU' --NORMAL BNS UN CLM
               AND UNCLAIM_BONUS_QUANTITY > 0 
            THEN
               UNCLAIM_BONUS_QUANTITY* - 1 
            ELSE
               UNCLAIM_BONUS_QUANTITY 
         END
         UNCLAIM_BONUS_QUANTITY , 
         
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT > 0 
            THEN
 CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT > 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
         END
         UNCLAIMABLE_DISCOUNT , TAX_RECOVERABLE ,
         
           CASE WHEN   psd.ITEM_CATEGORY NOT IN ('ZFCL','ZFOU','ZBRC','ZBRU') THEN 0 ELSE psd.GROSS_AMOUNT END GROSS_AMOUNT , 
         
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
            THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Sales' DATA_FLAG 	
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3
, '1' x 
      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
         AND PSD.BILLING_DATE >= '03-JAN-22' 
         AND PSD.COMPANY_CODE = 6300 
         AND BILLING_TYPE_TEXT NOT IN 
         (
            'IBL UB Billing Retur' , 'OPS-Sales Returns'
         )
         AND DOCUMENT_NO is not null 
      UNION ALL
      SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
        -- CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
         --CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'  AND psd.ITEM_CATEGORY NOT IN ('ZFCL','ZFOU','ZBRC','ZBRU')
            THEN
               psd.AMOUNT* - 1 
            ELSE
            CASE WHEN  1=1 AND psd.ITEM_CATEGORY NOT IN ('ZFCL','ZFOU','ZBRC','ZBRU') THEN
               PSD.AMOUNT END
         END
         AMOUNT 			
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN 1=1  AND psd.ITEM_CATEGORY NOT IN ('ZFCL','ZFOU','ZBRC','ZBRU') 
                   AND   QUANTITY > 0 
                  THEN
                     QUANTITY* - 1 
                  ELSE
                  CASE WHEN 1=1 AND psd.ITEM_CATEGORY NOT IN ('ZFCL','ZFOU','ZBRC','ZBRU') THEN
                     QUANTITY END
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                  'OPS-Sales Returns'
               )
            THEN
               'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE
          , case when ITEM_CATEGORY ='ZBRC' THEN CLAIM_BONUS_QUANTITY ELSE 0 END CLAIM_BONUS_QUANTITY
         , CASE WHEN  ITEM_CATEGORY ='ZBRU' THEN  UNCLAIM_BONUS_QUANTITY ELSE 0 END UNCLAIM_BONUS_QUANTITY , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'UBOPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT < 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT < 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
         END
         UNCLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               TAX_RECOVERABLE > 0 
            THEN
               TAX_RECOVERABLE* - 1 
            ELSE
               TAX_RECOVERABLE 
         END
         TAX_RECOVERABLE , 
         --psd.GROSS_AMOUNT , 
               CASE WHEN   psd.ITEM_CATEGORY NOT IN ('ZFCL','ZFOU','ZBRC','ZBRU') THEN 0 ELSE psd.GROSS_AMOUNT END GROSS_AMOUNT , 
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
            THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Return' DATA_FLAG 		
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3
, '2' x 
      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
         AND PSD.BILLING_DATE >= '03-JAN-22' 
         AND PSD.COMPANY_CODE = 6300 
         AND BILLING_CANCELLED <> 'X' 			--AND BILLING_TYPE_TEXT <> 'IBL UB Billing Retur' AND DOCUMENT_NO is not null
         AND BILLING_TYPE_TEXT IN 
         (
            'IBL UB Billing Retur', 'OPS-Sales Returns'
         )
         AND DOCUMENT_NO <> '' 
   )
   a 
   
     GROUP BY
  ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE ,

CUSTOMER_NAME ,
BILLING_TYPE_TEXT ,
BILLING_TYPE,
ITEM_CODE ,
ITEM_CODE ,
ITEM_DESC ,
UNIT_SELLING_PRICE,BILL_TYPE_DESC,COMPANY_CODE
,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO

;

   /*
 GROUP BY
   ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_ID,
CUSTOMER_NUMBER,
CUSTOMER_NAME,
--CUSTOMER_NAME,
BILLING_TYPE_TEXT,
BILLING_TYPE,
ITEM_CODE,
--ITEM_CODE,
DESCRIPTION,
UNIT_SELLING_PRICE,BILL_TYPE_DESC,COMPANY_CODE
*/
   --,ADRNR
   --,ADD1,ADD2,ADD3
;


-- dbo.PHNX_SALES_DATA_OPS_VIEW_BKUP source

CREATE view [dbo].[PHNX_SALES_DATA_OPS_VIEW_BKUP] as 
SELECT
   ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE CUSTOMER_ID,
CUSTOMER_CODE CUSTOMER_NUMBER,
CUSTOMER_NAME ,
BILLING_TYPE_TEXT SALES_ORDER_TYPE,
CAST(ITEM_CODE  AS VARCHAR(100))INVENTORY_ITEM_ID,
ITEM_CODE ITEM_CODE,
ITEM_DESC DESCRIPTION,
UNIT_SELLING_PRICE,

SUM(QUANTITY)QUANTITY,
SUM(CLAIM_BONUS_QUANTITY)+SUM(UNCLAIM_BONUS_QUANTITY) BONUS_QTY,
SUM(CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT,
SUM(UNCLAIMABLE_DISCOUNT)UNCLAIMABLE_DISCOUNT,
SUM(TAX_RECOVERABLE)TAX_RECOVERABLE,
SUM(GROSS_AMOUNT)GROSS_AMOUNT,
CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END REASON_CODE
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE

,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO

,SUM(AMOUNT)AMOUNT
from
   (
      SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
         --CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
        -- CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT* - 1 
            ELSE
               PSD.AMOUNT 
         END
         AMOUNT 			--QUANTITY,
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN
                     UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
                     AND QUANTITY > 0 
                  THEN
                     QUANTITY * - 1 
                  ELSE
                     QUANTITY 
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                  'OPS-Sales Returns'
               )
            THEN
               'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE , 
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND CLAIM_BONUS_QUANTITY > 0 
            THEN
               CLAIM_BONUS_QUANTITY* - 1 
            ELSE
               CLAIM_BONUS_QUANTITY 
         END
         CLAIM_BONUS_QUANTITY , 
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND UNCLAIM_BONUS_QUANTITY > 0 
            THEN
               UNCLAIM_BONUS_QUANTITY* - 1 
            ELSE
               UNCLAIM_BONUS_QUANTITY 
         END
         UNCLAIM_BONUS_QUANTITY , 
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT > 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT > 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
         END
         UNCLAIMABLE_DISCOUNT , TAX_RECOVERABLE , psd.GROSS_AMOUNT , 
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
            THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Sales' DATA_FLAG 	
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3
, '1' x 
      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
         AND PSD.BILLING_DATE >= '03-JAN-22' 
         AND PSD.COMPANY_CODE = 6300 
         AND BILLING_TYPE_TEXT NOT IN 
         (
            'IBL UB Billing Retur' , 'OPS-Sales Returns'
         )
         AND DOCUMENT_NO is not null 
      UNION ALL
      SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
        -- CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
         --CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT* - 1 
            ELSE
               PSD.AMOUNT 
         END
         AMOUNT 			--QUANTITY,
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN
                     QUANTITY > 0 
                  THEN
                     QUANTITY* - 1 
                  ELSE
                     QUANTITY 
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                  'OPS-Sales Returns'
               )
            THEN
               'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE , CLAIM_BONUS_QUANTITY , UNCLAIM_BONUS_QUANTITY , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'UBOPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT < 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT < 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
         END
         UNCLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               TAX_RECOVERABLE > 0 
            THEN
               TAX_RECOVERABLE* - 1 
            ELSE
               TAX_RECOVERABLE 
         END
         TAX_RECOVERABLE , psd.GROSS_AMOUNT , 
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
            THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Return' DATA_FLAG 		
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3
, '2' x 
      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
         AND PSD.BILLING_DATE >= '03-JAN-22' 
         AND PSD.COMPANY_CODE = 6300 
         AND BILLING_CANCELLED <> 'X' 			--AND BILLING_TYPE_TEXT <> 'IBL UB Billing Retur' AND DOCUMENT_NO is not null
         AND BILLING_TYPE_TEXT IN 
         (
            'IBL UB Billing Retur', 'OPS-Sales Returns'
         )
         AND DOCUMENT_NO <> '' 
   )
   a 
   
     GROUP BY
   ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE ,

CUSTOMER_NAME ,
BILLING_TYPE_TEXT ,
BILLING_TYPE,
ITEM_CODE ,
ITEM_CODE ,
ITEM_DESC ,
UNIT_SELLING_PRICE,BILL_TYPE_DESC,COMPANY_CODE
,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO

;

   /*
 GROUP BY
   ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_ID,
CUSTOMER_NUMBER,
CUSTOMER_NAME,
--CUSTOMER_NAME,
BILLING_TYPE_TEXT,
BILLING_TYPE,
ITEM_CODE,
--ITEM_CODE,
DESCRIPTION,
UNIT_SELLING_PRICE,BILL_TYPE_DESC,COMPANY_CODE
*/
   --,ADRNR
   --,ADD1,ADD2,ADD3
;


-- dbo.PHNX_SALES_DATA_VIEW source

-- dbo.PHNX_SALES_DATA_VIEW source

-- dbo.PHNX_SALES_DATA_VIEW source

CREATE VIEW [dbo].PHNX_SALES_DATA_VIEW
AS
SELECT

ITEM_CATEGORY,
   ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE CUSTOMER_ID,
CUSTOMER_CODE CUSTOMER_NUMBER,
CUSTOMER_NAME ,
BILLING_TYPE_TEXT SALES_ORDER_TYPE,
CAST(ITEM_CODE  AS VARCHAR(100))INVENTORY_ITEM_ID,
ITEM_CODE ITEM_CODE,
ITEM_DESC DESCRIPTION,
UNIT_SELLING_PRICE,
SUM(QUANTITY)QUANTITY,
isnull(SUM(CLAIM_BONUS_QUANTITY),0)+ISNULL(SUM(UNCLAIM_BONUS_QUANTITY),0) BONUS_QTY,
SUM(CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT,
SUM(UNCLAIMABLE_DISCOUNT)UNCLAIMABLE_DISCOUNT,
SUM(TAX_RECOVERABLE)TAX_RECOVERABLE,
SUM(GROSS_AMOUNT)GROSS_AMOUNT,
CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END REASON_CODE
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE
,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO,BSTNK,ITEM_NO
,AUGRU ,RETURN_REASON_CODE 
, SUM(AMOUNT)AMOUNT
from
   (
	SELECT

		300 MANDT
		,
         COMPANY_CODE
		,
         ORG_ID
		,
         LOC.BEZEI ORG_DESC
		,
         SALES_ORDER_NO
		,
         SALES_ORDER_TYPE
		,
         DOCUMENT_NO
		,
         BILLING_TYPE_TEXT
		,
         BILLING_DATE
		,
         BILLING_TYPE
		,
         BOOKER_ID
		,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME
		,
         SUPPLIER_ID
		,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME
		,
         BUSINESS_LINE_ID
		,
         BUSLINE.BEZEI BUSLINE_DESC
		,
		--CUSTOMER_CODE CUSTOMER_ID,
		CUSTOMER_CODE
		,
         CUST.NAME1 CUSTOMER_NAME
		,
         CHANNEL
		,
         CHNL.KTEXT CHANNEL_DESC
		,
		-- CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
		MATERIAL_CODE ITEM_CODE
		,
         ITEM_DESC
		,
         ITEM_CATEGORY_TEXT
		,
         ITEM_CATEGORY
		,
         UNIT
		,
         BILLING_CANCELLED
		,
		case
			when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT * - 1
			ELSE
               PSD.AMOUNT
		END
         AMOUNT
		--QUANTITY,
		,
		CASE
			WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0
			ELSE
			CASE
				WHEN
                     UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
                    AND BILLING_TYPE NOT IN ('ZUB1')
				AND QUANTITY > 0 
                  THEN
                     QUANTITY * - 1
				ELSE
                     QUANTITY
			END
		END
         QUANTITY
		, UNIT_SELLING_PRICE
		,
		CASE
			WHEN
               BILLING_TYPE_TEXT IN 
               ('OPS-Sales Returns')
            THEN
               'RETURN'
			ELSE
               'SALES'
		END
         REASON_CODE
		, 
         
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND CLAIM_BONUS_QUANTITY > 0 
            THEN
               CLAIM_BONUS_QUANTITY* - 1 
            ELSE
               CLAIM_BONUS_QUANTITY 
         END
         CLAIM_BONUS_QUANTITY , 
         
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND UNCLAIM_BONUS_QUANTITY > 0 
            THEN
               UNCLAIM_BONUS_QUANTITY* - 1 
            ELSE
               UNCLAIM_BONUS_QUANTITY 
         END
         UNCLAIM_BONUS_QUANTITY , 
         
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT > 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT > 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
END
     UNCLAIMABLE_DISCOUNT , 
         TAX_RECOVERABLE ,    
         
         
         GROSS_AMOUNT ,
         CASE
     WHEN
               PAYMENT_TYPE = 'Z000' 
         THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Sales' DATA_FLAG 	
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3,PSD.BSTNK,PSD.ITEM_NO
, PSD.AUGRU,NULL RETURN_REASON_CODE

      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
         AND PSD.BILLING_DATE >= '03-JUL-21' 
         AND PSD.COMPANY_CODE IN (6100,6300) 
   AND BILLING_TYPE_TEXT NOT IN ( 'IBL UB Billing Retur' ,'OPS-Sales Returns',  'IBL UB Billing Retur' ) AND DOCUMENT_NO is not null

      UNION ALL

     SELECT
  300 MANDT,
  COMPANY_CODE,
  ORG_ID,
  LOC.BEZEI ORG_DESC,
  SALES_ORDER_NO,
  SALES_ORDER_TYPE,
  DOCUMENT_NO,
  BILLING_TYPE_TEXT,
  BILLING_DATE,
  BILLING_TYPE,
  BOOKER_ID,
  BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
  SUPPLIER_ID,
  SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
  BUSINESS_LINE_ID,
  BUSLINE.BEZEI BUSLINE_DESC,
  -- CUSTOMER_CODE CUSTOMER_ID,
  CUSTOMER_CODE,
  CUST.NAME1 CUSTOMER_NAME,
  CHANNEL,
  CHNL.KTEXT CHANNEL_DESC,
  --CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
  MATERIAL_CODE ITEM_CODE,
  ITEM_DESC,
  ITEM_CATEGORY_TEXT,
  ITEM_CATEGORY,
  UNIT,
  BILLING_CANCELLED,
  CASE
    WHEN
      psd.BILLING_TYPE = 'ZOCC' THEN psd.AMOUNT * -1
    ELSE PSD.AMOUNT
  END
  AMOUNT,
  CASE
    WHEN
      UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' THEN 0
    ELSE CASE
        WHEN
          QUANTITY > 0 THEN QUANTITY * -1
        ELSE QUANTITY
      END
  END
  QUANTITY,
  UNIT_SELLING_PRICE,
  CASE
    WHEN
      BILLING_TYPE_TEXT IN
      (
      'OPS-Sales Returns'
      ) THEN 'RETURN'
    ELSE 'SALES'
  END
  REASON_CODE,
  CLAIM_BONUS_QUANTITY,
  UNCLAIM_BONUS_QUANTITY,
  CASE
    WHEN
      BILLING_TYPE_TEXT <> 'UBOPS Sales Tax Cash' AND
      CLAIMABLE_DISCOUNT < 0 THEN CLAIMABLE_DISCOUNT * -1
    ELSE CLAIMABLE_DISCOUNT
  END
  CLAIMABLE_DISCOUNT,
  CASE
    WHEN
      BILLING_TYPE_TEXT <> 'OPS Sales Tax Cash' AND
      UNCLAIMABLE_DISCOUNT < 0 THEN UNCLAIMABLE_DISCOUNT * -1
    ELSE UNCLAIMABLE_DISCOUNT
  END
  UNCLAIMABLE_DISCOUNT,
  CASE
    WHEN
      TAX_RECOVERABLE > 0 THEN TAX_RECOVERABLE * -1
    ELSE TAX_RECOVERABLE
  END
  TAX_RECOVERABLE,
  psd.GROSS_AMOUNT,
  CASE
    WHEN
      PAYMENT_TYPE = 'Z000' THEN 'CASH'
    ELSE 'CREDIT'
  END
  BILL_TYPE_DESC,
  'Return' DATA_FLAG,
  CUST.ADRNR,
  ADRC.STR_SUPPL1 ADD1,
  ADRC.STR_SUPPL2 ADD2,
  ADRC.STR_SUPPL3 ADD3,
  PSD.BSTNK,
  PSD.ITEM_NO,
  PSD.AUGRU,TVAUT.BEZEI  RETURN_REASON_CODE
FROM PHNX_SALES_DETAIL_DATA PSD
LEFT OUTER JOIN TVKBT LOC
  ON (LOC.MANDT = 300
  AND LOC.VKBUR = PSD.ORG_ID
  AND LOC.SPRAS = 'E') 				--LOCATION DESC
LEFT OUTER JOIN TVM1T BUSLINE
  ON (BUSLINE.MANDT = 300
  AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID
  AND BUSLINE.SPRAS = 'E') 				--customer
LEFT OUTER JOIN T151T CHNL
  ON (CHNL.MANDT = 300
  AND CHNL.KDGRP = psd.CHANNEL
  AND CHNL.SPRAS = 'E') 				--channel
LEFT OUTER JOIN KNA1 CUST
  ON (CUST.MANDT = 300
  AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
LEFT OUTER JOIN PA0002 AS BOOKER_NAME
  ON (BOOKER_NAME.MANDT = 300
  AND BOOKER_NAME.PERNR = PSD.BOOKER_ID
  AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
LEFT OUTER JOIN PA0002 AS SUPPLIER_NAME
  ON (SUPPLIER_NAME.MANDT = 300
  AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID
  AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

LEFT OUTER JOIN ADRC
  ON (ADRC.MANDT = 300
  AND ADRC.ADDRNUMBER = CUST.ADRNR
  AND ADRC.DATE_TO = '99991231')
LEFT OUTER JOIN TVAUT ON (TVAUT.AUGRU=PSD.AUGRU) 
WHERE 1 = 1
AND BILLING_TYPE_TEXT IN ('IBL UB Billing Retur', 'OPS-Sales Returns', 'IBL UB Billing Retur')
AND DOCUMENT_NO <> ''
AND BILLING_DATE >= '03-JUL-21'
AND COMPANY_CODE IN (6100, 6300)
   )A 
   
   
      GROUP BY
      ITEM_CATEGORY,
    ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE ,
CUSTOMER_CODE ,
CUSTOMER_NAME ,
BILLING_TYPE_TEXT ,
---CAST(ITEM_CODE  AS VARCHAR(100)),
ITEM_CODE ,
ITEM_DESC ,
UNIT_SELLING_PRICE,

CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END 
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE
,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO,BSTNK,ITEM_NO
,AUGRU ,RETURN_REASON_CODE ;


-- dbo.PHNX_SALES_DATA_VIEW1 source

CREATE VIEW [dbo].PHNX_SALES_DATA_VIEW1
AS
SELECT

ITEM_CATEGORY,
   ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE CUSTOMER_ID,
CUSTOMER_CODE CUSTOMER_NUMBER,
CUSTOMER_NAME ,
BILLING_TYPE_TEXT SALES_ORDER_TYPE,
CAST(ITEM_CODE  AS VARCHAR(100))INVENTORY_ITEM_ID,
ITEM_CODE ITEM_CODE,
ITEM_DESC DESCRIPTION,
UNIT_SELLING_PRICE,
SUM(QUANTITY)QUANTITY,
SUM(CLAIM_BONUS_QUANTITY)+SUM(UNCLAIM_BONUS_QUANTITY) BONUS_QTY,
SUM(CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT,
SUM(UNCLAIMABLE_DISCOUNT)UNCLAIMABLE_DISCOUNT,
SUM(TAX_RECOVERABLE)TAX_RECOVERABLE,
SUM(GROSS_AMOUNT)GROSS_AMOUNT,
CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END REASON_CODE
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE
,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO,BSTNK,ITEM_NO
, SUM(AMOUNT)AMOUNT
from
   (
	SELECT

		300 MANDT
		,
         COMPANY_CODE
		,
         ORG_ID
		,
         LOC.BEZEI ORG_DESC
		,
         SALES_ORDER_NO
		,
         SALES_ORDER_TYPE
		,
         DOCUMENT_NO
		,
         BILLING_TYPE_TEXT
		,
         BILLING_DATE
		,
         BILLING_TYPE
		,
         BOOKER_ID
		,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME
		,
         SUPPLIER_ID
		,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME
		,
         BUSINESS_LINE_ID
		,
         BUSLINE.BEZEI BUSLINE_DESC
		,
		--CUSTOMER_CODE CUSTOMER_ID,
		CUSTOMER_CODE
		,
         CUST.NAME1 CUSTOMER_NAME
		,
         CHANNEL
		,
         CHNL.KTEXT CHANNEL_DESC
		,
		-- CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
		MATERIAL_CODE ITEM_CODE
		,
         ITEM_DESC
		,
         ITEM_CATEGORY_TEXT
		,
         ITEM_CATEGORY
		,
         UNIT
		,
         BILLING_CANCELLED
		,
		case
			when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT * - 1
			ELSE
               PSD.AMOUNT
		END
         AMOUNT
		--QUANTITY,
		,
		CASE
			WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0
			ELSE
			CASE
				WHEN
                     UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
                    AND BILLING_TYPE NOT IN ('ZUB1')
				AND QUANTITY > 0 
                  THEN
                     QUANTITY * - 1
				ELSE
                     QUANTITY
			END
		END
         QUANTITY
		, UNIT_SELLING_PRICE
		,
		CASE
			WHEN
               BILLING_TYPE_TEXT IN 
               ('OPS-Sales Returns')
            THEN
               'RETURN'
			ELSE
               'SALES'
		END
         REASON_CODE
		, 
         
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND CLAIM_BONUS_QUANTITY > 0 
            THEN
               CLAIM_BONUS_QUANTITY* - 1 
            ELSE
               CLAIM_BONUS_QUANTITY 
         END
         CLAIM_BONUS_QUANTITY , 
         
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND UNCLAIM_BONUS_QUANTITY > 0 
            THEN
               UNCLAIM_BONUS_QUANTITY* - 1 
            ELSE
               UNCLAIM_BONUS_QUANTITY 
         END
         UNCLAIM_BONUS_QUANTITY , 
         
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT > 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT > 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
END
     UNCLAIMABLE_DISCOUNT , 
         TAX_RECOVERABLE ,    
         
         
         GROSS_AMOUNT ,
         CASE
     WHEN
               PAYMENT_TYPE = 'Z000' 
         THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Sales' DATA_FLAG 	
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3,PSD.BSTNK,PSD.ITEM_NO

      FROM
         PHNX_SALES_DETAIL_DATA1 PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
         AND PSD.BILLING_DATE >= '03-JUL-21' 
         AND PSD.COMPANY_CODE IN (6100,6300) 
   AND BILLING_TYPE_TEXT NOT IN ( 'IBL UB Billing Retur' ,'OPS-Sales Returns',  'IBL UB Billing Retur' ) AND DOCUMENT_NO is not null

      UNION ALL

      SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
        -- CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
         --CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT* - 1 
            ELSE
               PSD.AMOUNT 
         END
         AMOUNT 			
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN
                     QUANTITY > 0 
                  THEN
                     QUANTITY* - 1 
                  ELSE
                     QUANTITY 
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                 'OPS-Sales Returns'
               )
     THEN
      'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE 
         , CLAIM_BONUS_QUANTITY , UNCLAIM_BONUS_QUANTITY , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'UBOPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT < 0 
         THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT < 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
         END
         UNCLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               TAX_RECOVERABLE > 0 
            THEN
               TAX_RECOVERABLE* - 1 
            ELSE
               TAX_RECOVERABLE 
         END
         TAX_RECOVERABLE ,
         psd.GROSS_AMOUNT , 
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
            THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Return' DATA_FLAG 		
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3,PSD.BSTNK,PSD.ITEM_NO

      FROM
         PHNX_SALES_DETAIL_DATA1 PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		AND ADRC.DATE_TO='99991231' )   
      WHERE
         1 = 1 
     AND BILLING_TYPE_TEXT  IN ('IBL UB Billing Retur','OPS-Sales Returns','IBL UB Billing Retur') AND DOCUMENT_NO<>''
   AND BILLING_DATE>='03-JUL-21' and COMPANY_CODE IN (6100,6300)
   
   )A 
   
   
      GROUP BY
      ITEM_CATEGORY,
    ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE ,
CUSTOMER_CODE ,
CUSTOMER_NAME ,
BILLING_TYPE_TEXT ,
---CAST(ITEM_CODE  AS VARCHAR(100)),
ITEM_CODE ,
ITEM_DESC ,
UNIT_SELLING_PRICE,

CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END 
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE

,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO,BSTNK,ITEM_NO;


-- dbo.PHNX_SALES_DATA_VIEW_01FEB2022 source

CREATE VIEW [dbo].PHNX_SALES_DATA_VIEW_01FEB2022
AS
SELECT
ITEM_CATEGORY,
   ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE CUSTOMER_ID,
CUSTOMER_CODE CUSTOMER_NUMBER,

CUSTOMER_NAME ,
BILLING_TYPE_TEXT SALES_ORDER_TYPE,
CAST(ITEM_CODE  AS VARCHAR(100))INVENTORY_ITEM_ID,
ITEM_CODE ITEM_CODE,
ITEM_DESC DESCRIPTION,
UNIT_SELLING_PRICE,

SUM(QUANTITY)QUANTITY,
SUM(CLAIM_BONUS_QUANTITY)+SUM(UNCLAIM_BONUS_QUANTITY) BONUS_QTY,
SUM(CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT,
SUM(UNCLAIMABLE_DISCOUNT)UNCLAIMABLE_DISCOUNT,
SUM(TAX_RECOVERABLE)TAX_RECOVERABLE,
SUM(GROSS_AMOUNT)GROSS_AMOUNT,
CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END REASON_CODE
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE

,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO

,SUM(AMOUNT)AMOUNT
from
   (     


SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
         --CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
        -- CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT* - 1 
            ELSE
               PSD.AMOUNT 
         END
         AMOUNT 			--QUANTITY,
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN
                     UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
                     AND QUANTITY > 0 
                  THEN
                     QUANTITY * - 1 
                  ELSE
                     QUANTITY 
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                  'OPS-Sales Returns'
               )
            THEN
               'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE , 
         
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND CLAIM_BONUS_QUANTITY > 0 
            THEN
               CLAIM_BONUS_QUANTITY* - 1 
            ELSE
               CLAIM_BONUS_QUANTITY 
         END
         CLAIM_BONUS_QUANTITY , 
         
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND UNCLAIM_BONUS_QUANTITY > 0 
            THEN
               UNCLAIM_BONUS_QUANTITY* - 1 
            ELSE
               UNCLAIM_BONUS_QUANTITY 
         END
         UNCLAIM_BONUS_QUANTITY , 
         
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT > 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT > 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
END
     UNCLAIMABLE_DISCOUNT , 
         TAX_RECOVERABLE ,        
         
         
         GROSS_AMOUNT ,
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
         THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Sales' DATA_FLAG 	
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3

      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
         AND PSD.BILLING_DATE >= '03-JAN-22' 
         AND PSD.COMPANY_CODE IN (6100,6300) 
   AND BILLING_TYPE_TEXT NOT IN ( 'IBL UB Billing Retur' ,'OPS-Sales Returns',  'IBL UB Billing Retur' ) AND DOCUMENT_NO is not null

      UNION ALL

      SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
        -- CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
         --CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT* - 1 
            ELSE
               PSD.AMOUNT 
         END
         AMOUNT 			--QUANTITY,
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN
                     QUANTITY > 0 
                  THEN
                     QUANTITY* - 1 
                  ELSE
                     QUANTITY 
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                 'OPS-Sales Returns'
               )
     THEN
      'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE 
         , CLAIM_BONUS_QUANTITY , UNCLAIM_BONUS_QUANTITY , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'UBOPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT < 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT < 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
         END
         UNCLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               TAX_RECOVERABLE > 0 
            THEN
               TAX_RECOVERABLE* - 1 
            ELSE
               TAX_RECOVERABLE 
         END
         TAX_RECOVERABLE ,
         psd.GROSS_AMOUNT , 
    ---  CASE WHEN PSD.ITEM_CATEGORY IN ('ZFCL','ZFOU','ZBRC','ZBRU') THEN 0 ELSE  psd.GROSS_AMOUNT END GROSS_AMOUNT ,
         --0 GROSS_AMOUNT ,
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
            THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Return' DATA_FLAG 		
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3

      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
 
--- AND PSD.BILLING_DATE >= '03-JAN-22' 
       ---  AND PSD.COMPANY_CODE  IN (6100,6300) 
--         AND BILLING_CANCELLED <> 'X' 			 
	

     AND BILLING_TYPE_TEXT  IN ('IBL UB Billing Retur','OPS-Sales Returns','IBL UB Billing Retur') AND DOCUMENT_NO<>''
     --OPS-Sales Returns
      --OPS-Sales Returns
   AND BILLING_DATE>='03-JUL-21' and COMPANY_CODE IN (6100,6300)
   
   )A 
   
   
      GROUP BY
      ITEM_CATEGORY,
    ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE ,
CUSTOMER_CODE ,
CUSTOMER_NAME ,
BILLING_TYPE_TEXT ,
---CAST(ITEM_CODE  AS VARCHAR(100)),
ITEM_CODE ,
ITEM_DESC ,
UNIT_SELLING_PRICE,

CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END 
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE

,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO;


-- dbo.PHNX_SALES_DATA_VIEW_BKUP source

CREATE VIEW [dbo].PHNX_SALES_DATA_VIEW_BKUP
AS
SELECT
   ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE CUSTOMER_ID,
CUSTOMER_CODE CUSTOMER_NUMBER,

CUSTOMER_NAME ,
BILLING_TYPE_TEXT SALES_ORDER_TYPE,
CAST(ITEM_CODE  AS VARCHAR(100))INVENTORY_ITEM_ID,
ITEM_CODE ITEM_CODE,
ITEM_DESC DESCRIPTION,
UNIT_SELLING_PRICE,

SUM(QUANTITY)QUANTITY,
SUM(CLAIM_BONUS_QUANTITY)+SUM(UNCLAIM_BONUS_QUANTITY) BONUS_QTY,
SUM(CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT,
SUM(UNCLAIMABLE_DISCOUNT)UNCLAIMABLE_DISCOUNT,
SUM(TAX_RECOVERABLE)TAX_RECOVERABLE,
SUM(GROSS_AMOUNT)GROSS_AMOUNT,
CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END REASON_CODE
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE

,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO

,SUM(AMOUNT)AMOUNT
from
   (     


SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
         --CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
        -- CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT* - 1 
            ELSE
               PSD.AMOUNT 
         END
         AMOUNT 			--QUANTITY,
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN
                     UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
                     AND QUANTITY > 0 
                  THEN
                     QUANTITY * - 1 
                  ELSE
                     QUANTITY 
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                  'OPS-Sales Returns'
               )
            THEN
               'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE , 
         
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND CLAIM_BONUS_QUANTITY > 0 
            THEN
               CLAIM_BONUS_QUANTITY* - 1 
            ELSE
               CLAIM_BONUS_QUANTITY 
         END
         CLAIM_BONUS_QUANTITY , 
         
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND UNCLAIM_BONUS_QUANTITY > 0 
            THEN
               UNCLAIM_BONUS_QUANTITY* - 1 
            ELSE
               UNCLAIM_BONUS_QUANTITY 
         END
         UNCLAIM_BONUS_QUANTITY , 
         
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT > 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT > 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
         END
         UNCLAIMABLE_DISCOUNT , TAX_RECOVERABLE , psd.GROSS_AMOUNT , 
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
         THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Sales' DATA_FLAG 	
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3
, '1' x 
      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
         AND PSD.BILLING_DATE >= '03-JAN-22' 
         AND PSD.COMPANY_CODE = 6100 
    AND BILLING_TYPE_TEXT NOT IN ( 'IBL UB Billing Retur' ,'OPS-Sales Returns') AND DOCUMENT_NO is not null

      UNION ALL

      SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
        -- CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
         --CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT* - 1 
            ELSE
               PSD.AMOUNT 
         END
         AMOUNT 			--QUANTITY,
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN
                     QUANTITY > 0 
                  THEN
                     QUANTITY* - 1 
                  ELSE
                     QUANTITY 
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                  'OPS-Sales Returns'
               )
            THEN
               'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE 
         , CLAIM_BONUS_QUANTITY , UNCLAIM_BONUS_QUANTITY , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'UBOPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT < 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT < 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
         END
         UNCLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               TAX_RECOVERABLE > 0 
            THEN
               TAX_RECOVERABLE* - 1 
            ELSE
               TAX_RECOVERABLE 
         END
         TAX_RECOVERABLE , psd.GROSS_AMOUNT , 
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
            THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Return' DATA_FLAG 		
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3
, '2' x 
      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
 
 AND PSD.BILLING_DATE >= '03-JAN-22' 
         AND PSD.COMPANY_CODE = 6100 

         AND BILLING_CANCELLED <> 'X' 			 
	

      AND BILLING_TYPE_TEXT  IN ('IBL UB Billing Retur','OPS-Sales Returns') AND DOCUMENT_NO<>''
   AND BILLING_DATE>='03-JUL-21' and COMPANY_CODE=6100
   
   )A 
   
   
      GROUP BY
    ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE ,
CUSTOMER_CODE ,
CUSTOMER_NAME ,
BILLING_TYPE_TEXT ,
---CAST(ITEM_CODE  AS VARCHAR(100)),
ITEM_CODE ,
ITEM_DESC ,
UNIT_SELLING_PRICE,

CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END 
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE

,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO;


-- dbo.PHNX_SALES_DATA_test source

create view 
PHNX_SALES_DATA_test as
select * from PHNX_SALES_DATA where TRX_DATE >='01-jan-22' and COMPANY_CODE =6300;


-- dbo.PHNX_SALES_DUP_ITEMS_REC source

CREATE VIEW PHNX_SALES_DUP_ITEMS_REC AS
SELECT * FROM PHNX_SALES_DETAIL_DATA psdd2 
WHERE CONCAT(DOCUMENT_NO, MATERIAL_CODE) IN (
SELECT DISTINCT CONCAT(DOCUMENT_NO, MATERIAL_CODE)  FROM (
SELECT  
ITEM_CATEGORY
, BILLING_TYPE
, UP_KEY
, DOCUMENT_NO
, CANCELLED_FLAG
, COMPANY_CODE
, DOCUMENT_CONDITION
, BILLING_DATE
, CHANNEL
, CUSTOMER_CODE
, BILLING_CANCELLED
, PAYMENT_TYPE
, ITEM_NO
, QUANTITY
, UNIT
, GROSS_AMOUNT
, UNIT_SELLING_PRICE
, AMOUNT
, MATERIAL_CODE
, COST_CENTRE
, PROFIT_CENTRE
, ORG_ID
, SALES_ORDER_NO
, BUSINESS_LINE_ID
, BOOKER_ID
, SUPPLIER_ID
, SALES_ORDER_TYPE
,COUNT(ITEM_DESC) ITEM_DESC_COUNT
, UNCLAIM_BONUS_QUANTITY
, CLAIM_BONUS_QUANTITY
, CLAIMABLE_DISCOUNT
, UNCLAIMABLE_DISCOUNT
, TAX_RECOVERABLE
, BILLING_TYPE_TEXT
, ITEM_CATEGORY_TEXT
FROM
PHNX_SALES_DETAIL_DATA psdd
WHERE
1 = 1
--AND DOCUMENT_NO = '2300221588'  
GROUP  BY 
ITEM_CATEGORY
, BILLING_TYPE
, UP_KEY
, DOCUMENT_NO
, CANCELLED_FLAG
, COMPANY_CODE
, DOCUMENT_CONDITION
, BILLING_DATE
, CHANNEL
, CUSTOMER_CODE
, BILLING_CANCELLED
, PAYMENT_TYPE
, ITEM_NO
, QUANTITY
, UNIT
, GROSS_AMOUNT
, UNIT_SELLING_PRICE
, AMOUNT
, MATERIAL_CODE
, COST_CENTRE
, PROFIT_CENTRE
, ORG_ID
, SALES_ORDER_NO
, BUSINESS_LINE_ID
, BOOKER_ID
, SUPPLIER_ID
, SALES_ORDER_TYPE
--,COUNT(ITEM_DESC) ITEM_DESC_COUNT
, UNCLAIM_BONUS_QUANTITY
, CLAIM_BONUS_QUANTITY
, CLAIMABLE_DISCOUNT
, UNCLAIMABLE_DISCOUNT
, TAX_RECOVERABLE
, BILLING_TYPE_TEXT
, ITEM_CATEGORY_TEXT
HAVING COUNT(ITEM_DESC)>1
--ORDER BY ITEM_DESC 
)A
)
--ORDER BY DOCUMENT_NO ,ITEM_DESC;


-- dbo.PHNX_SALES_VIEW source

-- dbo.PHNX_SALES_VIEW source

-- dbo.PHNX_SALES_VIEW source

-- dbo.PHNX_SALES_VIEW source

-- dbo.PHNX_SALES_VIEW source

-- dbo.PHNX_SALES_VIEW source

CREATE VIEW PHNX_SALES_VIEW AS 
SELECT 
  --DISTINCT 
  ITEM_CATEGORY, 
  ORG_ID, 
  ORG_DESC, 
  TRX_DATE, 
  TRX_NUMBER, 
  BOOKER_ID, 
  BOOKER_NAME, 
  SUPPLIER_ID, 
  SUPPLIER_NAME, 
  BUSINESS_LINE_ID, 
  BUSINESS_LINE, 
  CHANNEL, 
  CUSTOMER_ID, 
  CUSTOMER_NUMBER, 
  CUSTOMER_NAME, 
  SALES_ORDER_TYPE, 
  INVENTORY_ITEM_ID, 
  ITEM_CODE, 
  DESCRIPTION, 
  UNIT_SELLING_PRICE, 
  CASE WHEN UPPER(SALES_ORDER_TYPE) LIKE '%CANCEL%MEMO%' AND SOLD_QTY <0 THEN SOLD_QTY *-1 ELSE SOLD_QTY END  SOLD_QTY, 
  BONUS_QTY, 
  CASE 
    WHEN  1=1 AND  UPPER(SALES_ORDER_TYPE)  LIKE '%CANCEL%MEMO%' AND CLAIMABLE_DISCOUNT >=0 THEN CLAIMABLE_DISCOUNT *-1
  	WHEN BILLING_TYPE IN ('ZORC')  THEN CLAIMABLE_DISCOUNT *-1 
  	WHEN COMPANY_CODE =6100 AND BILLING_TYPE IN ('ZUBC') AND CLAIMABLE_DISCOUNT >0 THEN CLAIMABLE_DISCOUNT *-1
  ELSE CLAIMABLE_DISCOUNT END CLAIMABLE_DISCOUNT, 
  
  CASE 
  WHEN  1=1 AND  UPPER(SALES_ORDER_TYPE)  LIKE '%CANCEL%MEMO%' AND UNCLAIMABLE_DISCOUNT  >=0 THEN UNCLAIMABLE_DISCOUNT *-1
  	WHEN BILLING_TYPE IN ('ZORC')  THEN UNCLAIMABLE_DISCOUNT *-1 
	WHEN COMPANY_CODE =6100 AND BILLING_TYPE IN ('ZUBC') AND UNCLAIMABLE_DISCOUNT  >0 THEN UNCLAIMABLE_DISCOUNT  *-1
  	ELSE UNCLAIMABLE_DISCOUNT END UNCLAIMABLE_DISCOUNT, 
  TAX_RECOVERABLE, 
  CASE WHEN ITEM_CATEGORY IN ('ZFCL', 'ZFOU', 'ZBRC', 'ZBRU') THEN TAX_RECOVERABLE ELSE CASE WHEN BILLING_TYPE IN ('ZUCC', 'ZURB') THEN (
    (SOLD_QTY * UNIT_SELLING_PRICE)- TOTAL_DISCOUNT *-1
  )+ TAX_RECOVERABLE ELSE (
    (SOLD_QTY * UNIT_SELLING_PRICE)- ABS(TOTAL_DISCOUNT)
  )+ TAX_RECOVERABLE END END NET_AMOUNT, 
  
  CASE WHEN ITEM_CATEGORY IN ('ZFCL', 'ZFOU', 'ZBRC', 'ZBRU') THEN 0 ELSE CASE WHEN BILLING_TYPE IN ('ZORC') --AND BILLING_TYPE NOT IN ('ZUB1')  
  THEN (SOLD_QTY * UNIT_SELLING_PRICE)*-1 ELSE SOLD_QTY * UNIT_SELLING_PRICE END END GROSS_AMOUNT, 
  TOTAL_DISCOUNT, 
  CUSTOMER_TRX_ID, 
  REASON_CODE, 
  BILL_TYPE_DESC, 
  COMPANY_CODE, 
  BILLING_TYPE, 
  SALES_ORDER_NO, 
  ADD1, 
  ADD2, 
  ADD3, 
  BSTNK, 
  ITEM_NO ,RETURN_REASON_CODE
FROM 
  (
    --6100,6300
    select 
      ITEM_CATEGORY, 
      ORG_ID, 
      PSDD.ORG_DESC, 
      PSDD.BILLING_DATE TRX_DATE, 
      PSDD.DOCUMENT_NO TRX_NUMBER, 
      cast(
        PSDD.BOOKER_ID as varchar(100)
      ) BOOKER_ID, 
      PSDD.BOOKER_NAME, 
      cast(
        PSDD.SUPPLIER_ID as varchar(100)
      ) SUPPLIER_ID, 
      PSDD.SUPPLIER_NAME, 
      cast(
        TRIM(PSDD.BUSINESS_LINE_ID) as varchar(100)
      ) BUSINESS_LINE_ID, 
      PSDD.BUSLINE_DESC BUSINESS_LINE, 
      ISNULL(PSDD.CHANNEL_DESC, 'Blank') AS CHANNEL, 
      PSDD.CUSTOMER_ID CUSTOMER_ID, 
      PSDD.CUSTOMER_NUMBER CUSTOMER_NUMBER, 
      PSDD.CUSTOMER_NAME CUSTOMER_NAME, 
      PSDD.SALES_ORDER_TYPE SALES_ORDER_TYPE, 
      PSDD.INVENTORY_ITEM_ID, 
      PSDD.ITEM_CODE ITEM_CODE, 
      PSDD.DESCRIPTION DESCRIPTION, 
      PSDD.UNIT_SELLING_PRICE UNIT_SELLING_PRICE, 
      PSDD.QUANTITY SOLD_QTY, 
      PSDD.BONUS_QTY BONUS_QTY, 
      PSDD.CLAIMABLE_DISCOUNT CLAIMABLE_DISCOUNT, 
      PSDD.UNCLAIMABLE_DISCOUNT UNCLAIMABLE_DISCOUNT, 

      CASE 
      WHEN (PSDD.SALES_ORDER_TYPE LIKE '%CANCEL%' OR PSDD.SALES_ORDER_TYPE LIKE '%RETUR%')  
      AND UPPER(SALES_ORDER_TYPE) NOT LIKE '%CANCEL%MEMO%' AND PSDD.TAX_RECOVERABLE >0 
      	THEN PSDD .TAX_RECOVERABLE *-1 
      WHEN UPPER(SALES_ORDER_TYPE) LIKE '%CANCEL%MEMO%' AND TAX_RECOVERABLE  <0 THEN TAX_RECOVERABLE  *-1 
	
      	ELSE  	PSDD.TAX_RECOVERABLE END TAX_RECOVERABLE, 

      	PSDD.GROSS_AMOUNT NET_AMOUNT, 
      PSDD.UNCLAIMABLE_DISCOUNT + PSDD.CLAIMABLE_DISCOUNT TOTAL_DISCOUNT, 
      PSDD.DOCUMENT_NO CUSTOMER_TRX_ID, 
      PSDD.REASON_CODE, 
      BILL_TYPE_DESC, 
      COMPANY_CODE, 
      PSDD.BILLING_TYPE, 
      PSDD.SALES_ORDER_NO, 
      ADD1, 
      ADD2, 
      ADD3, 
      BSTNK, 
      ITEM_NO ,RETURN_REASON_CODE
    from 
      PHNX_SALES_DATA_VIEW psdd ---PHNX_SALES_DATA_VIEW
    where 
      1 = 1 
      AND PSDD.COMPANY_CODE IN (6100, 6300) 
      and psdd.BILLING_TYPE in (
        'ZOPC', 'ZOCC', 'ZUBC', 'ZUCC', 'ZORE', 
        'ZORC', 'ZURB', 'ZUB1', 'ZNES', 'ZNEC'
      )
  ) A;


-- dbo.PRODUCTIVITY_BUSLINE_MAPPING source

CREATE VIEW [dbo].[PRODUCTIVITY_BUSLINE_MAPPING] AS
SELECT 
                BL,TBL,TSALES_MAN,TDIVISION,DIV,CASE
WHEN WT.BL_DESCRIPTION='Ovaltine' THEN 'Ovaltine - UB'
WHEN WT.BL_DESCRIPTION='Kelloggs' THEN CONCAT('Kellogg','''s',' - UB')
WHEN WT.BL_DESCRIPTION='Red Bull' THEN 'Red Bull - UB'
WHEN WT.BL_DESCRIPTION='Searle Corel Brand' THEN 'Searle Core Brand'
ELSE
WT.BL_DESCRIPTION END BL_DESCRIPTION
                FROM wh_targetref WT WHERE 1=1 ;


-- dbo.PRODUCTIVITY_MAPPING_DATA source

CREATE VIEW [dbo].[PRODUCTIVITY_MAPPING_DATA] AS
SELECT    ORG_ID   
      ,   TRX_DATE   
      ,   TRX_NUMBER   
      ,   BOOKER_ID   
      ,   PM1.B BOOKER_NAME   
      ,  PM2.A SUPPLIER_ID   
      ,   PM2.B SUPPLIER_NAME   
      ,   BUSINESS_LINE_ID   
      ,  PM3.B  BUSINESS_LINE   
      ,PM4.B   CHANNEL   
      ,   CUSTOMER_ID   
      ,   CUSTOMER_NUMBER   
      ,  PM5.B CUSTOMER_NAME   
      ,  PM6.B SALES_ORDER_TYPE   
      ,   INVENTORY_ITEM_ID   
      ,   ITEM_CODE   
      ,  PM7.B DESCRIPTION   
      ,   UNIT_SELLING_PRICE   
      ,   SOLD_QTY   
      ,   BONUS_QTY   
      ,   CLAIMABLE_DISCOUNT   
      ,   UNCLAIMABLE_DISCOUNT   
      ,   TAX_RECOVERABLE   
      ,   GROSS   
      ,   CUSTOMER_TRX_ID   
  FROM PRODUCTIVITY_DATA 
  INNER JOIN PRODUCTIVITY_MAPPING PM1 
  ON PM1.D=PRODUCTIVITY_DATA.BOOKER_NAME
   INNER JOIN PRODUCTIVITY_MAPPING PM2
   ON PM2.D=PRODUCTIVITY_DATA.SUPPLIER_ID
    INNER JOIN PRODUCTIVITY_MAPPING PM3
   ON PM3.D=PRODUCTIVITY_DATA.BUSINESS_LINE
     INNER JOIN PRODUCTIVITY_MAPPING PM4
   ON PM4.D=PRODUCTIVITY_DATA.CHANNEL
     INNER JOIN PRODUCTIVITY_MAPPING PM5
   ON PM5.D=PRODUCTIVITY_DATA.CUSTOMER_NAME

    INNER JOIN PRODUCTIVITY_MAPPING PM6
   ON PM6.D=PRODUCTIVITY_DATA.SALES_ORDER_TYPE

     INNER JOIN PRODUCTIVITY_MAPPING PM7
   ON PM7.D=PRODUCTIVITY_DATA.DESCRIPTION

  WHERE 1=1 
  --AND BOOKER_ID='100000097'


  ;


-- dbo.PRODUCTIVITY_MONTHLY_TARGET source

CREATE VIEW [dbo].[PRODUCTIVITY_MONTHLY_TARGET] AS
SELECT WST.TBL
     --, CASE
     --      WHEN WT.business_line = 'Pringles'
     --           OR WT.business_line = 'Pringles - UB'
     --      THEN 'Pringles'
     --      ELSE WT.business_line
     --  END BL_DESCRIPTION
	 , WT.business_line BL_DESCRIPTION
     , MONTH
     , YEAR
     , TARGET
FROM   WH_SALES_TARGETS1 WST
       INNER JOIN Busline_Mapping WT ON WT.code = WST.tbl
                                        --AND WSt.YEAR = '2019-20'
  ;


-- dbo.PRODUCTIVITY_VIEW source

CREATE VIEW PRODUCTIVITY_VIEW AS
SELECT    ORG_ID   
      ,   TRX_DATE   
      ,   TRX_NUMBER   
      ,   BOOKER_ID   
      ,  -1 BOOKER_NAME   
      ,   SUPPLIER_ID   
      ,  -1 SUPPLIER_NAME   
      ,   BUSINESS_LINE_ID   
      ,   -1 BUSINESS_LINE   
      ,   CM.CHANNEL_ID CHANNEL   
      ,   CUSTOMER_ID   
      ,   CUSTOMER_NUMBER   
      ,   -1 CUSTOMER_NAME   
      ,   -1 SALES_ORDER_TYPE   
      ,   INVENTORY_ITEM_ID   
      ,   ITEM_CODE   
      , -1  DESCRIPTION   
      ,   UNIT_SELLING_PRICE   
      ,   SOLD_QTY   
      ,   BONUS_QTY   
      ,   CLAIMABLE_DISCOUNT   
      ,   UNCLAIMABLE_DISCOUNT   
      ,   TAX_RECOVERABLE   
      ,   GROSS   
      ,   CUSTOMER_TRX_ID   
      ,   REASON_CODE   
  FROM     IBL_SALE_DISCOUNT_MIS_VW_BO   ISDM
  INNER JOIN CHANNEL_MAPPING CM
  ON CM.CHANNEL=ISDM.CHANNEL
AND    1=1 AND ISDM.TRX_DATE BETWEEN '01-JAN-16' AND '30-JUN-19'
  
  ;


-- dbo.RA_PRODUCTIVITY_FOR_INCENTIVE source

CREATE VIEW dbo.RA_PRODUCTIVITY_FOR_INCENTIVE
AS
SELECT        'CUS' Type, LOCATION, DIV_CD, '(' + ISNULL(BR_CD, '') + ')' + ISNULL(BOOKER_ID, '') BOOKER_ID, TRX_NUMBER, UNQ, sum(Sales) Sales, BL_DES, TSO_Name, day(trx_date) [Date], BILLS
FROM            (SELECT        BR_CD, location, categ, region, DIV_CD, DIV_DES, BOOKER_ID, TRX_DATE, TRX_NUMBER, UNQ, SUM(Sales) AS Sales, BL_CD, BL_DES, BL_ID, '' AS BL_DES2, TSO_DIV, Source, TSO_Name, '' AS type, 
                         Bills
FROM            wh_ra_sales_vw_ebs_cus AS vw
WHERE        (TRX_DATE BETWEEN DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) - 1, 0) AND DATEADD(mm, DATEDIFF(mm, 0, GETDATE()), - 1))
AND vw.BL_DES IN ('Mead Johnson',
'Nurturmil Water',
'Nutraceutical',
'Nutrition',
'Searle Bio Sciences',
'Searle Core Brand',
'Searle Momentum Brand',
'Spot Free')
GROUP BY BR_CD, location, categ, region, DIV_CD, DIV_DES, BOOKER_ID, TRX_DATE, TRX_NUMBER, UNQ, BL_CD, BL_DES, BL_ID, TSO_DIV, Source, TSO_Name, Bills
HAVING        (SUM(Sales) > 0)) tt
GROUP BY LOCATION, DIV_CD, '(' + ISNULL(BR_CD, '') + ')' + ISNULL(BOOKER_ID, ''), TRX_NUMBER, UNQ, BL_DES, TSO_Name, day(trx_date), bills
UNION ALL
SELECT        'BILL' Type, LOCATION, DIV_CD, '(' + ISNULL(BR_CD, '') + ')' + ISNULL(BOOKER_ID, '') BOOKER_ID, TRX_NUMBER, UNQ, sum(Sales) Sales, BL_DES, TSO_Name, day(trx_date) [Date], TRX_NUMBER BILLS
FROM            (SELECT        br_cd, LOCATION, CATEG, REGION, Div_cd, Div_Des, BOOKER_ID, TRX_DATE, TRX_NUMBER, UNQ, SUM(Sales) AS Sales, BL_CD, BL_DES, BL_ID, '' AS BL_DES2, TSO_DIV, Source, TSO_Name, '' AS type
FROM            wh_ra_sales_vw AS vw
WHERE        (TRX_DATE BETWEEN DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) - 1, 0) AND DATEADD(mm, DATEDIFF(mm, 0, GETDATE()), - 1))
AND vw.BL_DES IN ('Mead Johnson',
'Nurturmil Water',
'Nutraceutical',
'Nutrition',
'Searle Bio Sciences',
'Searle Core Brand',
'Searle Momentum Brand',
'Spot Free')
GROUP BY br_cd, LOCATION, CATEG, REGION, Div_cd, Div_Des, BOOKER_ID, TRX_DATE, TRX_NUMBER, UNQ, BL_CD, BL_DES, BL_ID, TSO_DIV, Source, TSO_Name
HAVING        (SUM(Sales) > 0)) tt
GROUP BY LOCATION, DIV_CD, '(' + ISNULL(BR_CD, '') + ')' + ISNULL(BOOKER_ID, ''), TRX_NUMBER, UNQ, BL_DES, TSO_Name, day(trx_date);


-- dbo.RA_PRODUCTIVITY_FOR_INCENTIVE_220819 source

/****** Script for SelectTopNRows command from SSMS  ******/
create view   wh_ra_tso_pha_feh_220819 as
SELECT  [BR_CD]
      ,[DIV_CD]
      ,[TSO_CODE]
      ,[TSO_NAM]
      ,[TSO_UNQ]
      ,[TYPE]
      ,[DIV2]
  FROM [IBL_DW].[dbo].[wh_ra_tso_pha_feh];


-- dbo.SALESFLO_ALL_ORDER source

CREATE  VIEW SALESFLO_ALL_ORDER AS 
SELECT 
  ---  SIC.COMPANY COMPANY_CODE,
--SUBSTRING((DISTRIBUTOR_CODE,1,4)COMPANY_CODE,    
SUBSTRING(OI.SAP_DISTRIBUTOR_CODE,1,4) COMPANY_CODE,
SUBSTRING(OI.sap_distributor_code, 5, 4)ORG_ID,
    T.BEZEI ORG_DESC,
    order_number SALESFLO_ORDER,    
    0 SALES_ORDER_NO,
    OI.order_date,
    0 DOCUMENT_NO,
    OI.delivery_date BILLING_DATE,
    OI.SAP_STORE_CODE CUSTOMER_NUMBER,
    K.NAME1 CUSTOMER_NAME,
    OI.order_booker_name BOOKER_NAME,
    NULL SUPPLIER_NAME,
    SIC.BUSLINE_ID BUSINESS_LINE_ID,
    SIC.BUSLINE_DESC BUSLINE_DESC,
    OI.SAP_SKU_CODE ITEM_CODE,
    SIC.MATNR_DESC ITEM_DESC,
    OI.ORDER_UNITS ,
    OI.ORDER_AMOUNT order_amount,
      0 GROSS_AMOUNT,
    NULL BILL_TYPE_DESC,
    NULL SALES_ORDER_TYPE,
    OI.STATUS,
     0  delivered_qty    
 FROM
    ORDER_INFO OI 
    LEFT OUTER JOIN SAP_ITEM_CODES sic ON (SIC.MATNR=OI.SAP_SKU_CODE)
    LEFT  OUTER JOIN KNA1 k ON (K.KUNNR=OI.SAP_STORE_CODE)
    LEFT OUTER JOIN TVKBT t ON(T.VKBUR=SUBSTRING(OI.sap_distributor_code, 5, 4))
 WHERE
    1 = 1;


-- dbo.SALESFLO_ALL_ORDER1 source

CREATE  VIEW SALESFLO_ALL_ORDER1 AS 
SELECT 
    SIC.COMPANY COMPANY_CODE,
    SUBSTRING(OI.sap_distributor_code, 5, 4)ORG_ID,
    T.BEZEI ORG_DESC,
    order_number SALESFLO_ORDER,    
    0 SALES_ORDER_NO,
    OI.order_date,
    0 DOCUMENT_NO,
    OI.delivery_date BILLING_DATE,
    OI.SAP_STORE_CODE CUSTOMER_NUMBER,
    K.NAME1 CUSTOMER_NAME,
    OI.order_booker_name BOOKER_NAME,
    NULL SUPPLIER_NAME,
    SIC.BUSLINE_ID BUSINESS_LINE_ID,
    SIC.BUSLINE_DESC BUSLINE_DESC,
    OI.SAP_SKU_CODE ITEM_CODE,
    SIC.MATNR_DESC ITEM_DESC,
    OI.ORDER_UNITS ,
    OI.ORDER_AMOUNT order_amount,
      0 GROSS_AMOUNT,
    NULL BILL_TYPE_DESC,
    NULL SALES_ORDER_TYPE,
    OI.STATUS,
     0  delivered_qty    
 FROM
    ORDER_INFO1 OI 
    LEFT OUTER JOIN SAP_ITEM_CODES sic ON (SIC.MATNR=OI.SAP_SKU_CODE)
    LEFT  OUTER JOIN KNA1 k ON (K.KUNNR=OI.SAP_STORE_CODE)
    LEFT OUTER JOIN TVKBT t ON(T.VKBUR=SUBSTRING(OI.sap_distributor_code, 5, 4))
 WHERE
    1 = 1 
    --AND OI.STATUS ='Open';


-- dbo.SALESFLO_ORDER_NOT_FOUND source

CREATE VIEW SALESFLO_ORDER_NOT_FOUND AS
 select
	distinct ORDER_NUMBER
	, oi.ORDER_DATE
	, oi.DELIVERY_DATE
	, oi.STATUS
from
	ORDER_INFO oi
where
	1 = 1
	and ORDER_NUMBER in (
		SELECT
			order_number
		FROM
			(
				SELECT
					DISTINCT oi.ORDER_NUMBER
					, VV.BSTKD
				FROM
					ORDER_INFO OI
				LEFT OUTER JOIN VBKD_VIEW VV ON
					(
						VV.BSTKD = OI.order_number
							AND VV.BSTKD LIKE 'D%'
					)
			)A
		WHERE
			1 = 1
			AND BSTKD IS NULL
	)
;

/*
SELECT * FROM (
SELECT DISTINCT oi.ORDER_NUMBER ,VV.BSTKD
FROM ORDER_INFO OI
LEFT OUTER JOIN VBKD_VIEW VV ON (VV.BSTKD=OI.order_number AND VV.BSTKD LIKE 'D%')
)A WHERE 1=1 AND BSTKD IS NULL
;
*/;


-- dbo.SALESFLO_ORDER_SAIF_DATA source

CREATE view SALESFLO_ORDER_SAIF_DATA
as
SELECT A.SALESFLO_ORDER,A.ORD_AMT,sod.ORDER_NUMBER ,sod.ORDER_TOTAL
FROM
(SELECT  SALESFLO_ORDER,round(sum(SAO.order_amount),0)ORD_AMT
FROM SALESFLO_ALL_ORDER SAO
WHERE ORDER_DATE='19-JAN-22' 
--AND SALESFLO_ORDER ='D0014ORD8707'
AND COMPANY_CODE=6100 
GROUP  BY SALESFLO_ORDER ) a
left outer join SAIF_ORDER_DATA sod  on (sod.ORDER_NUMBER=a.SALESFLO_ORDER)
--where a.ord_amt<>sod.ORDER_TOTAL;


-- dbo.SALE_TARGET1 source

CREATE VIEW [dbo].[SALE_TARGET1] AS 
WITH SALETARGET ( TRX_DATE,ORG_ID,NAME,BUSINESS_LINE,CHANNEL,busline_group,business_unit,COMPANY_CODE, GROSS,TARGET,DATA_TYPE) AS (
SELECT
ISDM.TRX_DATE
,ISDM.ORG_ID,ORG.NAME
,ISDM.BUSINESS_LINE
,ISDM.CHANNEL
,bm.busline_group,bm.business_unit,COMPANY_CODE
,SUM(ISDM.GROSS)GROSS,0 TARGET,'SALE' DATA_TYPE
  FROM IBL_SALE_DISCOUNT_MIS_VW_BO ISDM 
  LEFT OUTER  join Busline_Mapping bm on  bm.code=ISDM.BUSINESS_LINE_ID
  LEFT JOIN BO_INVENTORY_ORG_UNIIT ORG ON ISDM.ORG_ID=ORG.ORGANIZATION_ID
  WHERE 1=1 
   GROUP BY ISDM.TRX_DATE,ISDM.ORG_ID,ISDM.BUSINESS_LINE,ISDM.CHANNEL,ORG.NAME,bm.busline_group,bm.business_unit,COMPANY_CODE
UNION ALL
  SELECT 
 MONTH,NULL ORG_ID,NULL NAME,BL_DESCRIPTION,NULL CHANNEL,bm.busline_group,bm.business_unit,NULL COMPANY_CODE ,0 GROSS,TARGET ,'TARGET' DATA_TYPE
 FROM PRODUCTIVITY_MONTHLY_TARGET pmt
 inner join Busline_Mapping bm on bm.business_line=pmt.BL_DESCRIPTION
  ) SELECT * FROM SALETARGET WHERE 1=1  
  ;


-- dbo.SALE_VS_TARGET source

CREATE VIEW [dbo].[SALE_VS_TARGET] AS
  SELECT
DATEADD(month, DATEDIFF(month, 0,ISDM.TRX_DATE), 0) MONTH_DATE
,ISDM.ORG_ID,ORG.NAME
,ISDM.BUSINESS_LINE,ISDM.CHANNEL
,SUM(ISDM.GROSS)GROSS,0 TARGET
,bm.busline_group,bm.business_unit
  FROM IBL_SALE_DISCOUNT_MIS_VW_BO ISDM 
  inner join Busline_Mapping bm on bm.business_line=ISDM.BUSINESS_LINE
  LEFT JOIN BO_INVENTORY_ORG_UNIIT ORG ON ISDM.ORG_ID=ORG.ORGANIZATION_ID
  WHERE 1=1 
  AND ISDM.TRX_DATE>='01-JUL-16'
  --AND ORG_ID=224
  --AND ISDM.BUSINESS_LINE='Searle Bio Sciences'
  GROUP BY DATEADD(month, DATEDIFF(month, 0,ISDM.TRX_DATE), 0) 
 ,ISDM.ORG_ID
,ISDM.BUSINESS_LINE,ISDM.CHANNEL,ORG.NAME,bm.busline_group,bm.business_unit
UNION ALL
  SELECT 
 MONTH,NULL ORG_ID,NULL NAME,BL_DESCRIPTION,NULL CHANNEL,0 GROSS,TARGET ,bm.busline_group,bm.business_unit
 FROM PRODUCTIVITY_MONTHLY_TARGET pmt
 inner join Busline_Mapping bm on bm.business_line=pmt.BL_DESCRIPTION;


-- dbo.SAP_ITEM_CODES source

CREATE VIEW SAP_ITEM_CODES AS
SELECT
MANDT,SUBSTRING( MATNR,9,30)MATNR,MATNR_DESC,MAPPING_CODE,COMPANY,BUSLINE_ID,BUSLINE_DESC
FROM MATNR_DESC;


-- dbo.SAP_ORG source

CREATE VIEW SAP_ORG AS
select DISTINCT PSD.ORG_ID ,PSD.ORG_DESC 
FROM PHNX_SALES_DATA PSD;


-- dbo.SEARLE_SALES source

CREATE VIEW SEARLE_SALES AS
SELECT
   SUBSTRING(ITEM_CODE,9,30) ITEM_CODE,
   NULL PROD_CD,
    ST.DESCRIPTION item_desc,
     ST.ORG_DESC,
    ST.ORG_ID ,
    ST.CHANNEL  CHANNEL_DESC,
    ST.TRX_DATE BILLING_DATE ,
	 SUM(ISNULL(ST.SOLD_QTY,0))QUANTITY,
   SUM(ISNULL(ST.GROSS_AMOUNT,0))  AMOUNT
    FROM IBL_SALE_DISCOUNT_MIS_VW_BO  ST
    WHERE 1=1 
    and st.trx_date>='01-jan-22'
    and ST.COMPANY_CODE =6300
	GROUP BY
	    ST.ITEM_CODE,
    ST.DESCRIPTION ,
    ST.ORG_ID,
    ST.ORG_DESC,
    ST.CHANNEL
    ,ST.TRX_DATE;


-- dbo.SEARLE_SALES_VIEW source

CREATE  VIEW SEARLE_SALES_VIEW AS
select 
psd.ORG_ID
,TVKBT.BEZEI ORG_DESC
,format(PSD.TRX_DATE,'dd-MMM-yy') TRX_DATE
,PSD.TRX_NUMBER,PSD.BOOKER_ID,PSD.BOOKER_NAME,PSD.SUPPLIER_ID,PSD.SUPPLIER_NAME
,PSD.BUSINESS_LINE_ID,PSD.BUSINESS_LINE,PSD.CHANNEL,PSD.CUSTOMER_ID,PSD.CUSTOMER_NUMBER,PSD.CUSTOMER_NAME,PSD.SALES_ORDER_TYPE,PSD.INVENTORY_ITEM_ID
,PSD.ITEM_CODE,PSD.DESCRIPTION,PSD.UNIT_SELLING_PRICE,PSD.SOLD_QTY,PSD.BONUS_QTY,PSD.CLAIMABLE_DISCOUNT,PSD.UNCLAIMABLE_DISCOUNT,PSD.TAX_RECOVERABLE
,PSD.GROSS
,MARA.NORMT MAPPING_ITEM_CODE
FROM IBL_SALE_DISCOUNT_MIS_VW_BO PSD
LEFT OUTER JOIN MARA ON (MARA.MATNR=PSD.ITEM_CODE AND MARA.TRAGR IN ('6300'))
LEFT OUTER JOIN TVKBT ON (TVKBT.MANDT=300 AND TVKBT.SPRAS='E' AND TVKBT.VKBUR=PSD.ORG_ID)
where 1=1 and psd.TRX_DATE>='03-jan-22' and COMPANY_CODE=6300;


-- dbo.SUHAIL_TEST_DATA source

CREATE VIEW SUHAIL_TEST_DATA
AS
SELECT
   ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE CUSTOMER_ID,
CUSTOMER_CODE CUSTOMER_NUMBER,
CUSTOMER_NAME ,
BILLING_TYPE_TEXT SALES_ORDER_TYPE,
CAST(ITEM_CODE  AS VARCHAR(100))INVENTORY_ITEM_ID,
ITEM_CODE ITEM_CODE,
ITEM_DESC DESCRIPTION,
UNIT_SELLING_PRICE,

SUM(QUANTITY)QUANTITY,
SUM(CLAIM_BONUS_QUANTITY)+SUM(UNCLAIM_BONUS_QUANTITY) BONUS_QTY,
SUM(CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT,
SUM(UNCLAIMABLE_DISCOUNT)UNCLAIMABLE_DISCOUNT,
SUM(TAX_RECOVERABLE)TAX_RECOVERABLE,
SUM(GROSS_AMOUNT)GROSS_AMOUNT,
CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END REASON_CODE
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE

,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO

,SUM(AMOUNT)AMOUNT
from
   (     


SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
         --CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
        -- CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT* - 1 
            ELSE
               PSD.AMOUNT 
         END
         AMOUNT 			--QUANTITY,
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN
                     UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
                     AND QUANTITY > 0 
                  THEN
                     QUANTITY * - 1 
                  ELSE
                     QUANTITY 
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                  'OPS-Sales Returns'
               )
            THEN
               'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE , 
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND CLAIM_BONUS_QUANTITY > 0 
            THEN
               CLAIM_BONUS_QUANTITY* - 1 
            ELSE
               CLAIM_BONUS_QUANTITY 
         END
         CLAIM_BONUS_QUANTITY , 
         CASE
            WHEN
               UPPER(BILLING_TYPE_TEXT) LIKE '%CANCEL%' 
               AND UNCLAIM_BONUS_QUANTITY > 0 
            THEN
               UNCLAIM_BONUS_QUANTITY* - 1 
            ELSE
               UNCLAIM_BONUS_QUANTITY 
         END
         UNCLAIM_BONUS_QUANTITY , 
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT > 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT = 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT > 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
         END
         UNCLAIMABLE_DISCOUNT , TAX_RECOVERABLE , psd.GROSS_AMOUNT , 
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
            THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Sales' DATA_FLAG 	
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3
, '1' x 
      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
         AND PSD.BILLING_DATE >= '03-JAN-22' 
         AND PSD.COMPANY_CODE = 6100 
        
		
		--AND BILLING_TYPE_TEXT NOT IN 
  --       (
  --          'IBL UB Billing Retur' , 'OPS-Sales Returns'
  --       )
  --       AND DOCUMENT_NO is not null 

    AND BILLING_TYPE_TEXT NOT IN ( 'IBL UB Billing Retur' ,'OPS-Sales Returns') AND DOCUMENT_NO is not null





      UNION ALL

      SELECT
         300 MANDT,
         COMPANY_CODE,
         ORG_ID,
         LOC.BEZEI ORG_DESC,
         SALES_ORDER_NO,
         SALES_ORDER_TYPE,
         DOCUMENT_NO,
         BILLING_TYPE_TEXT,
         BILLING_DATE,
         BILLING_TYPE,
         BOOKER_ID,
         BOOKER_NAME.VORNA + ' ' + BOOKER_NAME.NACHN BOOKER_NAME,
         SUPPLIER_ID,
         SUPPLIER_NAME.VORNA + ' ' + SUPPLIER_NAME.NACHN SUPPLIER_NAME,
         BUSINESS_LINE_ID,
         BUSLINE.BEZEI BUSLINE_DESC,
        -- CUSTOMER_CODE CUSTOMER_ID,
         CUSTOMER_CODE ,
         CUST.NAME1 CUSTOMER_NAME,
         CHANNEL,
         CHNL.KTEXT CHANNEL_DESC,
         --CAST(MATERIAL_CODE AS VARCHAR(100))INVENTORY_ITEM_ID,
         MATERIAL_CODE ITEM_CODE,
         ITEM_DESC ,
         ITEM_CATEGORY_TEXT,
         ITEM_CATEGORY,
         UNIT,
         BILLING_CANCELLED,
         case
            when
               psd.BILLING_TYPE = 'ZOCC'
            THEN
               psd.AMOUNT* - 1 
            ELSE
               PSD.AMOUNT 
         END
         AMOUNT 			--QUANTITY,
, 
         CASE
            WHEN
               UPPER(ITEM_CATEGORY_TEXT) LIKE '%BONUS%' 
            THEN
               0 
            ELSE
               CASE
                  WHEN
                     QUANTITY > 0 
                  THEN
                     QUANTITY* - 1 
                  ELSE
                     QUANTITY 
               END
         END
         QUANTITY , UNIT_SELLING_PRICE , 
         CASE
            WHEN
               BILLING_TYPE_TEXT IN 
               (
                  'OPS-Sales Returns'
               )
            THEN
               'RETURN' 
            ELSE
               'SALES' 
         END
         REASON_CODE , CLAIM_BONUS_QUANTITY , UNCLAIM_BONUS_QUANTITY , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'UBOPS Sales Tax Cash' 
               AND CLAIMABLE_DISCOUNT < 0 
            THEN
               CLAIMABLE_DISCOUNT* - 1 
            ELSE
               CLAIMABLE_DISCOUNT 
         END
         CLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               BILLING_TYPE_TEXT <> 'OPS Sales Tax Cash' 
               AND UNCLAIMABLE_DISCOUNT < 0 
            THEN
               UNCLAIMABLE_DISCOUNT* - 1 
            ELSE
               UNCLAIMABLE_DISCOUNT 
         END
         UNCLAIMABLE_DISCOUNT , 
         CASE
            WHEN
               TAX_RECOVERABLE > 0 
            THEN
               TAX_RECOVERABLE* - 1 
            ELSE
               TAX_RECOVERABLE 
         END
         TAX_RECOVERABLE , psd.GROSS_AMOUNT , 
         CASE
            WHEN
               PAYMENT_TYPE = 'Z000' 
            THEN
               'CASH' 
            ELSE
               'CREDIT' 
         END
         BILL_TYPE_DESC , 'Return' DATA_FLAG 		
 ,CUST.ADRNR
,ADRC.STR_SUPPL1 ADD1,ADRC.STR_SUPPL2 ADD2,ADRC.STR_SUPPL3 ADD3
, '2' x 
      FROM
         PHNX_SALES_DETAIL_DATA PSD 
         LEFT OUTER JOIN
            TVKBT LOC 
            ON(LOC.MANDT = 300 
            AND LOC.VKBUR = PSD.ORG_ID 
            AND LOC.SPRAS = 'E') 				--LOCATION DESC
         LEFT OUTER JOIN
            TVM1T BUSLINE 
            ON(BUSLINE.MANDT = 300 
            AND BUSLINE.MVGR1 = PSD.BUSINESS_LINE_ID 
            AND BUSLINE.SPRAS = 'E') 				--customer
         LEFT OUTER JOIN
            T151T CHNL 
            ON(CHNL.MANDT = 300 
            AND CHNL.KDGRP = psd.CHANNEL 
            AND CHNL.SPRAS = 'E') 				--channel
         LEFT OUTER JOIN
            KNA1 CUST 
            ON(CUST.MANDT = 300 
            AND CUST.KUNNR = psd.CUSTOMER_CODE) 				--customer
         LEFT OUTER JOIN
            PA0002 AS BOOKER_NAME 
            ON(BOOKER_NAME.MANDT = 300 
            AND BOOKER_NAME.PERNR = PSD.BOOKER_ID 
            AND BOOKER_NAME.ENDDA = '9999-12-31') 				--BOOKER NAME
         LEFT OUTER JOIN
            PA0002 AS SUPPLIER_NAME 
            ON(SUPPLIER_NAME.MANDT = 300 
            AND SUPPLIER_NAME.PERNR = PSD.SUPPLIER_ID 
            AND SUPPLIER_NAME.ENDDA = '9999-12-31') 				--SUPPLIER NAME

		LEFT OUTER JOIN ADRC  ON (ADRC.MANDT=300 AND ADRC.ADDRNUMBER=CUST.ADRNR 
		--AND PSD.BILLING_DATE BETWEEN ADRC.DATE_FROM 
		AND ADRC.DATE_TO='99991231' )

   
      WHERE
         1 = 1 
 
 AND PSD.BILLING_DATE >= '03-JAN-22' 
         AND PSD.COMPANY_CODE = 6100 

         AND BILLING_CANCELLED <> 'X' 			 
	

      AND BILLING_TYPE_TEXT  IN ('IBL UB Billing Retur','OPS-Sales Returns') AND DOCUMENT_NO<>''
   AND BILLING_DATE>='03-JUL-21' and COMPANY_CODE=6100
   
   )A 
   
   
      GROUP BY
    ORG_ID,
ORG_DESC,
BILLING_DATE,
DOCUMENT_NO ,
BOOKER_ID,
BOOKER_NAME,
SUPPLIER_ID,
SUPPLIER_NAME,
BUSINESS_LINE_ID,
BUSLINE_DESC,
CHANNEL_DESC,
CUSTOMER_CODE ,
CUSTOMER_CODE ,
CUSTOMER_NAME ,
BILLING_TYPE_TEXT ,
---CAST(ITEM_CODE  AS VARCHAR(100)),
ITEM_CODE ,
ITEM_DESC ,
UNIT_SELLING_PRICE,

CASE WHEN BILLING_TYPE_TEXT IN ('IBL UB Billing Retur') THEN 'RETURN' ELSE 'SALES' END 
,BILLING_TYPE
,BILL_TYPE_DESC,COMPANY_CODE

,ADRNR
,ADD1,ADD2,ADD3,SALES_ORDER_NO;


-- dbo.VBKD_DATA1 source

CREATE VIEW VBKD_DATA1 AS
SELECT DISTINCT VV.BSTKD ,VV.MATNR 
FROM VBKD_VIEW VV;


-- dbo.VBKD_VIEW source

CREATE VIEW VBKD_VIEW AS 
SELECT DISTINCT  vbkd.VBAP_SALES_ORDER_NUMBER vbeln ,vbkd.SALESFLO_ORDER_NUMBER 
FROM vbkd WHERE 1=1;


-- dbo.VW_BO_CUSTOMER_AGING source

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW dbo.VW_BO_CUSTOMER_AGING
AS
SELECT        dbo.BO_CUSTOMER_AGING.CUSTOMER_TRX_ID, dbo.BO_CUSTOMER_AGING.CUSTOMER_ID, dbo.BO_CUSTOMER_AGING.CUSTOMER_NUMBER, dbo.BO_CUSTOMER_AGING.CUSTOMER_NAME, 
                         dbo.BO_CUSTOMER_AGING.DUE_DAYS, dbo.BO_CUSTOMER_AGING.TRX_DATE, dbo.BO_CUSTOMER_AGING.TRX_NUMBER, dbo.BO_CUSTOMER_AGING.ORIGNALE_AMOUNT, 
                         dbo.BO_CUSTOMER_AGING.BUSNIESS_LINE, dbo.BO_CUSTOMER_AGING.OPERATING_UNIT, dbo.BO_CUSTOMER_AGING.DESCRIPTION, dbo.BO_CUSTOMER_AGING.COMPANY, 
                         dbo.BO_CUSTOMER_AGING.ORG_ID, dbo.BO_CUSTOMER_AGING.PRIMARY_SALESREP_ID, dbo.BO_CUSTOMER_AGING.SALESREP_NAME, dbo.AGGING_ADJ_TBL.AMOUNT, 
                         dbo.AGGING_RECEIPT_RETURN_TBL.AMOUNT_APPLIED
FROM            dbo.BO_CUSTOMER_AGING LEFT OUTER JOIN
                         dbo.AGGING_RECEIPT_RETURN_TBL ON dbo.BO_CUSTOMER_AGING.CUSTOMER_TRX_ID = dbo.AGGING_RECEIPT_RETURN_TBL.APPLIED_CUSTOMER_TRX_ID LEFT OUTER JOIN
                         dbo.AGGING_ADJ_TBL ON dbo.BO_CUSTOMER_AGING.CUSTOMER_TRX_ID = dbo.AGGING_ADJ_TBL.CUSTOMER_TRX_ID;


-- dbo.WHRCTA_PARTY_TBL_VW source

CREATE view  dbo . WHRCTA_PARTY_TBL_VW  as

SELECT 
 
 --RCTA_ROWID       , RCTLA_ROWID ,
       ORG_ID 
      , BR_CD 
      , TRX_NUMBER 
      , PREVIOUS_CUSTOMER_TRX_ID 
      ,PREVIOUS_CUSTOMER_TRX_LINE_ID  xPREVIOUS_CUSTOMER_TRX_LINE_ID 
      , CUSTOMER_TRX_ID 
      , CUSTOMER_TRX_LINE_ID 
      , LINE_NUMBER 
      , INVENTORY_ITEM_ID 
      , MAIN_SALES_ORDER_NUMBER 
      , PREVIOUS_SALES_ORDER 
      , TRX_DATE 
	  	  ,FORMAT(TRX_DATE,'yyyyMMdd')INVOICE_DATE
            , CUST_PO_NUMBER 
      , BUS_LINE_ID 
      , ITEM_CODE 
      , ITEM_DESC 
      , BL_DESC 
      , WAREHOUSE_ID 
      , SHIP_TO_CUSTOMER_ID 
      , BILL_TO_CUSTOMER_ID 
      , CUSTOMER_ID 
      , CUSTOMER_NUMBER 
      , CUSTOMER_NAME 
      , ADDRESS1 
      , ADDRESS2 
      , ADDRESS3 
      , ADDRESS4 
      , CITY 
      , CNIC_PARTY 
      , CNIC_CUST 
      , NTN 
      , TAX_REFERENCE 
      , TAX_NAME 
      , CUST_COD_OLD 
      , CUSTOMER_TYPE 
      , SUPPLIER_ID 
      , SUPPLIER_NAME 
	      , BOOKER_ID 
      , SALESREP_ID 
      , BOOKER_NAME 
      , REASON_CODE 
      , CH_DESC 
      , BATCH_ID 
      , BATCH_SOURCE_ID 
      , TERM_ID 
      , COMPLETE_FLAG 
      , INTERFACE_HEADER_CONTEXT 
      , STATUS_TRX 
      , DOC_SEQUENCE_VALUE 
      , DOC_SEQUENCE_VALUE_RCTA  xDOC_SEQUENCE_VALUE_RCTA
      , SEGMENT1 
      , SEGMENT1_DESC 
      , SEGMENT2 
      , SEGMENT2_DESC 
      , SEGMENT3 
      , SEGMENT3_DESC 
      , SEGMENT4 
      , SEGMENT4_DESC 
      , CODE_COMBINATION_ID 
      , UNIT_STANDARD_PRICE 
      , SALES_ORDER_LINE 
      , TAX_RATE 
      , TAX_EXEMPT_FLAG 
      , LINE_RECOVERABLE 
      , ORDER_NUMBER 
      , SOURCE_DOCUMENT_ID 
      , ORDER_SOURCE_ID 
      , ORIG_SYS_DOCUMENT_REF 
      , ORDERED_DATE 
      , PRICE_LIST_ID 
      , ORDER_SOURCE 
      , CANCELLED_FLAG_OOHA 
      , BOOKED_FLAG 
   --
      , OPEN_FLAG_OOHA 
      , FLOW_STATUS_CODE 
   , PRICING_QUANTITY 
      , CANCELLED_QUANTITY 
      , SHIPPED_QUANTITY 
      , ORDERED_QUANTITY 
      , FULFILLED_QUANTITY 
      , SHIPPING_QUANTITY 
       , TAX_CODE 
      , INVOICE_INTERFACE_STATUS_CODE 
      , PRICE_LIST_ID_OOLA 
      , UNIT_LIST_PRICE 
      , TAX_VALUE 
      , ITEM_TYPE_CODE 
      , ACTUAL_SHIPMENT_DATE 
      , LINE_CATEGORY_CODE 
      , RETURN_CONTEXT 
      , RETURN_ATTRIBUTE1 
      , RETURN_ATTRIBUTE2 XRETURN_ATTRIBUTE2 
      , SOURCE_TYPE_CODE 
      , RETURN_REASON_CODE RETURN_REASON_CODE1	
	     , SHIPPING_INTERFACED_FLAG 
      , INVOICED_QUANTITY 
      , UNIT_SELLING_PRICE_OOLA XUNIT_SELLING_PRICE_OOLA
      , UNIT_SELLING_PRICE_PER_PQTY  XXUNIT_SELLING_PRICE_PER_PQTY
      , ATTRIBUTE_CATEGORY_MSI 
      , ATTRIBUTE3_MSI 
      , EXPENSE_ACCOUNT 
      , COST_OF_SALES_ACCOUNT 
      , SALES_ACCOUNT 
      , UNQ_TRX_NUMBER 
      , PREVIOUS_TRX_NUMBER 
      , LINETYPE 
      , LIST_TYPE_CODE 
      , MODIFIER_TYPE 
      , MODIFIER_NUMBER 
      , MODIFIER_DESCRIPTION 
      , GL_CS 
      , GL_CR 
      , BILL_TYPE 
      , SALE_TYPE 
      , SALE_ORDER_TYPE_L 
      , SALE_ORDER_TYPE_H XSALE_ORDER_TYPE_H
      , DN 
      , QTY 
      , UNIT_SELLING_PRICE 
      , ORDER_UNIT_SELLING_PRICE 
      , REVENUE_EXT 
      , REVENUE 
      , TAX 
      , UNQ__TRX_DATE unq_trx_date
      , UNQ__BILL_TYPE  unq_bill_type
      , AC_UPDATE_DATE 
      , MODIFIER_TYPE2 
      , INV_TYPE 
      , OOHA_HEADER_ID 
      , OOLA_LINE_ID 
      , TRX_NO_UNQ 
      , UNQ_CUSTOMER_TRX_ID 
      , UNQ__SALE_TYPE  UNQ_SALE_TYPE
      , UNQ__TRX_NUMBER  UNQ_TRX_NUMBER1
      , UNQ__INV_TYPE   UNQ_INV_TYPE
      , UNQ__MONTH  UNQ_month
      , X_MODIFIER_TYPE 
      , X_RTN 
      , TSO_DIV 
      , LOCATION 
      , REGION 
      , CATEG 
      , MONTH XMONTH
      , BL_CD 
  FROM  dbo . WH_RCTA_OOHA_MSI_PARTY_TBL 
  where 1=1 
 -- and TRX_DATE='3-AUG-15' 
  --and TRX_NUMBER='1511059183';
;


-- dbo.WH_AGING_DATA_ALL source

CREATE  VIEW [dbo].[WH_AGING_DATA_ALL] AS
SELECT
   MAX(AGING_DATE)AGING_DATE,
   BUSNIESS_LINE,
   BUSLINE_DESC,
   BL,
   TDIVISION,
   sum(overdue)overdue,
   SUM(NET_BALANCE )NET_BALANCE 
FROM
   (
      select
         BCAN.AGING_DATE AGING_DATE,
         --- BCAN.TRX_NUMBER,
       --  BCAN.BUSNIESS_LINE,
		 WTV.BUSINESS_LINE_ID BUSNIESS_LINE,

     
         DESCRIPTION BUSLINE_DESC , WTV.BL, WTV.TDIVISION , SUM(BCAN.NET_BALANCE)NET_BALANCE , sum(BCAN.SEVEN + BCAN.EIGHT + BCAN.SIXTEEN + BCAN.NINTY + BCAN.ABOVE_360)overdue 
      from
         BO_CUSTOMER_AGING_NEW BCAN 
         LEFT OUTER JOIN
            TARGETREFTBL WTV ON (WTV.BUSINESS_LINE_ID=BCAN.BUSNIESS_LINE)      

      WHERE
         1 = 1 
         AND BCAN.AGING_DATE = 
         (
            SELECT
               MAX(AGING_DATE) 
            FROM
               BO_CUSTOMER_AGING_NEW
         )
      GROUP BY
         BCAN.AGING_DATE ,
		 WTV.BUSINESS_LINE_ID,
       --  BCAN.BUSNIESS_LINE,
         BCAN.DESCRIPTION,
         WTV.BL,
         WTV.TDIVISION 
   )
   A 
GROUP BY
   BUSNIESS_LINE,
   BUSLINE_DESC,
   BL,
   TDIVISION ;


-- dbo.WH_AGING_DATA_CONSUMER source

CREATE view [dbo].[WH_AGING_DATA_CONSUMER] AS
SELECT
WADA.AGING_DATE,WADA.BUSNIESS_LINE

,CASE 
WHEN  

WADA.BUSNIESS_LINE IN (            147,173         ) THEN 'OTHERS'
ELSE WADA.BUSLINE_DESC END BUSLINE_DESC

,CASE 
WHEN WADA.BUSNIESS_LINE IN (            147,173         ) THEN 'OTHERS'
ELSE WADA.BL 

END BL

,WADA.TDIVISION,WADA.overdue,WADA.NET_BALANCE
FROM WH_AGING_DATA_ALL WADA 
WHERE 1=1 AND WADA.TDIVISION='Consumer'
AND WADA.BUSNIESS_LINE IN  (
   147,	169,	166,	143,	150,	173,	135,	144,	140,	165,	136
   )
;


-- dbo.WH_AGING_DATA_CONS_BR source

CREATE VIEW [dbo].[WH_AGING_DATA_CONS_BR] AS
select
   BCAN.ORG_ID,
   BCAN.AGING_DATE,
   BCAN.BUSNIESS_LINE,
   BCAN.DESCRIPTION BUSLINE_DESC,
   LOC.NAME ORG_NAME,
   LOC.LOC_,
   SUM(BCAN.NET_BALANCE)Net_Balance 
from
   EBS_AGING_TBL as BCAN 
   LEFT OUTER JOIN
      BO_INVENTORY_ORG_UNIIT AS LOC 
      ON (LOC.ORGANIZATION_ID = BCAN.ORG_ID) 
WHERE
   1 = 1 
   and AGING_DATE>=cast( CONCAT(	DATEPART(YYYY,  getdate()  )-2 ,'-07-01') as date) --'01-jul-20'
   /*

   AND BCAN.AGING_DATE = 
         (
            SELECT
               MAX(AGING_DATE) 
            FROM
               BO_CUSTOMER_AGING_NEW
         )

		 */
	
   AND BCAN.BUSNIESS_LINE IN 
   (
      147,
      169,
      166,
      143,
      150,
      173,
      135,
      144,
      140,
      165,
      136,
      173
   )
group by
   BCAN.ORG_ID,
   BCAN.AGING_DATE,
   BCAN.BUSNIESS_LINE,
   BCAN.DESCRIPTION,
   LOC.NAME,
   LOC.LOC_ ;


-- dbo.WH_AGING_DATA_PHARMA source

CREATE VIEW [dbo].[WH_AGING_DATA_PHARMA] AS
SELECT
WADA.AGING_DATE,WADA.BUSNIESS_LINE
/*
,CASE 
WHEN  WADA.BL IN ('IML','FTN', 'CNS','DSSU','TRZ') THEN 'OTHERS' ELSE WADA.BUSLINE_DESC END BUSLINE_DESC
*/
, CASE  
WHEN WADA.BUSNIESS_LINE
        IN 
         (
           153
         )
      THEN
         'OTHERS'  ELSE
WADA.BUSLINE_DESC END BUSLINE_DESC


,CASE  
WHEN WADA.BUSNIESS_LINE
        IN 
         (
           153
         )
      THEN
         'OTHERS'  ELSE
WADA.BL END BL
,WADA.TDIVISION,WADA.overdue,WADA.NET_BALANCE
FROM WH_AGING_DATA_ALL WADA 
WHERE 1=1 AND WADA.TDIVISION='Pharma'
AND WADA.BUSNIESS_LINE IN  (
   119,	110,	131,	163,	137,	107,	109,	153

   )

;


-- dbo.WH_AGING_DATA_PHARMA_BR source

CREATE  VIEW [dbo].[WH_AGING_DATA_PHARMA_BR] AS
select
   BCAN.ORG_ID,
   BCAN.AGING_DATE,
   BCAN.BUSNIESS_LINE,
   BCAN.DESCRIPTION BUSLINE_DESC,
   LOC.NAME ORG_NAME,
   LOC.LOC_,
   SUM(BCAN.NET_BALANCE)Net_Balance 
from
   EBS_AGING_TBL as BCAN 
   LEFT OUTER JOIN
      BO_INVENTORY_ORG_UNIIT AS LOC 
      ON (LOC.ORGANIZATION_ID = BCAN.ORG_ID) 
WHERE
   1 = 1 
   and AGING_DATE>=cast( CONCAT(	DATEPART(YYYY,  getdate()  )-2 ,'-07-01') as date) --'01-jul-20'
  /* AND BCAN.AGING_DATE = 
         (
            SELECT
               MAX(AGING_DATE) 
            FROM
               BO_CUSTOMER_AGING_NEW
         )
		 */
   AND BCAN.BUSNIESS_LINE IN 
   (
      119,	110,	131,	163,	137,	107,	109,	153
   )
group by
   BCAN.ORG_ID,
   BCAN.AGING_DATE,
   BCAN.BUSNIESS_LINE,
   BCAN.DESCRIPTION,
   LOC.NAME,
   LOC.LOC_ ;


-- dbo.WH_BL_GROUP_VW source

CREATE VIEW WH_BL_GROUP_VW AS
SELECT 
 case  when T.BL_DESCRIPTION='CALIBUR' THEN 'CRB1' ELSE T.BL_CD END  BL_CD,T.BL_DESCRIPTION,
 case  when T.BL_DESCRIPTION='CALIBUR' THEN 'CRB1' ELSE T.BL END BL
 ,T.BL_GROUP
FROM WH_BL_GROUP T;


-- dbo.WH_DC_DATA_CONS_BR source

CREATE VIEW [dbo].[WH_DC_DATA_CONS_BR] AS
 SELECT
   DC1.ORGANIZATION_ID,
   DC1.ORG_DESC,
   DC_DATE,
   DC_NUMBER,
   DC1.TRANSFER_ORGANIZATION_ID,
   DC1.RECEIVE_BR_DES,
   DC1.INVENTORY_ITEM_ID,
   ITM.SEGMENT1,
   DC1.ITEM_DESC,
   BEB.BUSLINE_DESC,
   SUM(DC1.TRANS_VALUE)TRANSFER_VALUE 
FROM
   dc_not_rcv AS DC1 

   
   LEFT OUTER JOIN
      MTL_SYSTEM_ITEMS AS ITM 
      ON (ITM.INVENTORY_ITEM_ID = DC1.INVENTORY_ITEM_ID) 
  LEFT OUTER JOIN
     /* BO_EBS_BUSLINE_DESC */  BUSLINE_DESC  BEB 
      ON (BEB.BUSLINE_ID = ITM.SEGMENT1) 
	  

WHERE
   1 = 1 	--AND DC1.DC_DATE>='01-JUL-19'
 
 AND BEB.BUSLINE_ID IN 
   (
      147,
      169,
      166,
      143,
      150,
      173,
      135,
      144,
      140,
      165,
      136,
      173
   )
   

GROUP BY
   DC1.ORGANIZATION_ID,
   DC1.ORG_DESC,
   DC_DATE,
   DC_NUMBER,
   DC1.TRANSFER_ORGANIZATION_ID,
   DC1.RECEIVE_BR_DES,
   DC1.INVENTORY_ITEM_ID,
   ITM.SEGMENT1,
   DC1.ITEM_DESC,
  BEB.BUSLINE_DESC
 ;


-- dbo.WH_DC_DATA_PHARMA_BR source

CREATE VIEW WH_DC_DATA_PHARMA_BR AS
 SELECT
   DC1.ORGANIZATION_ID,
   DC1.ORG_DESC,
   DC_DATE,
   DC_NUMBER,
   DC1.TRANSFER_ORGANIZATION_ID,
   DC1.RECEIVE_BR_DES,
   DC1.INVENTORY_ITEM_ID,
   ITM.SEGMENT1,
   DC1.ITEM_DESC,
   BEB.BUSLINE_DESC,
   SUM(DC1.TRANS_VALUE)TRANSFER_VALUE 
FROM
   dc_not_rcv AS DC1 

   
   LEFT OUTER JOIN
      MTL_SYSTEM_ITEMS AS ITM 
      ON (ITM.INVENTORY_ITEM_ID = DC1.INVENTORY_ITEM_ID) 
  LEFT OUTER JOIN
     /* BO_EBS_BUSLINE_DESC */  BUSLINE_DESC  BEB 
      ON (BEB.BUSLINE_ID = ITM.SEGMENT1) 
	  

WHERE
   1 = 1 	--AND DC1.DC_DATE>='01-JUL-19'
 
 AND BEB.BUSLINE_ID IN 
   (
     119,	110,	131,	163,	137,	107,	109,	153
   )
   

GROUP BY
   DC1.ORGANIZATION_ID,
   DC1.ORG_DESC,
   DC_DATE,
   DC_NUMBER,
   DC1.TRANSFER_ORGANIZATION_ID,
   DC1.RECEIVE_BR_DES,
   DC1.INVENTORY_ITEM_ID,
   ITM.SEGMENT1,
   DC1.ITEM_DESC,
  BEB.BUSLINE_DESC
 ;


-- dbo.WH_GRP_sales_base_tbl source

create view WH_GRP_sales_base_tbl as
select t."BL_CD",t."UNQ__INV_TYPE",t."MONTH",t."LOCATION",t."REGION",t."CATEG",t."TSO_DIV",t."BR_CD",t."ORG_ID",t."TRX_DATE",t."TRX_NUMBER",t."UNQ_CUSTOMER_TRX_ID",t."UNQ__TRX_NUMBER",t."BOOKER_ID",t."BOOKER_NAME",t."SUPPLIER_ID",t."SUPPLIER_NAME",t."BUSINESS_LINE_ID",t."BUSINESS_LINE",t."CHANNEL",t."CUSTOMER_NUMBER",t."CUSTOMER_NAME",t."SALES_ORDER_TYPE",t."INVENTORY_ITEM_ID",t."ITEM_CODE",t."ITEM_DESC",t."BILL_TYPE",t."UNIT_SELLING_PRICE",t."TOTQTY",t."SOLD_QTY",t."BONUS_QTY",t."CLAIMABLE_DISCOUNT",t."UNCLAIMABLE_DISCOUNT",t."TAX_RECOVERABLE",t."GROSS",t."SOURCE",t."UNQ__TRX_DATE",t."UNQ__MONTH",t."CUSTOMER_ID", b.bl BL, g.bl_group  from ibl_sale_discount_mis_vw_ext_t t
left outer join wh_bl_group b on t.bl_cd = b.bl_cd 
left outer join wh_bl_group_15 g on b.bl = g.bl;


-- dbo.WH_INVENTORY_CONS_BR source

CREATE VIEW [dbo].[WH_INVENTORY_CONS_BR] AS

SELECT 
 ORGANIZATION_ID,
   ORG_DESC,
   ITEM_CODE,
   ITEM_DESC,
   BUSLINE_ID,
   BUSLINE_DESC,
   SUBINVENTORY_CODE,
   CASE WHEN SUBINVENTORY_CODE='SELLABLE' THEN 1 ELSE 2 END SUBINV_SORT_INDEX,
   CASE 
     WHEN SUBINVENTORY_CODE='SELLABLE'
	 OR SUBINVENTORY_CODE LIKE '%SELL%'  OR SUBINVENTORY_CODE LIKE '%SEL%'  
	 THEN 'SELLABLE'

	 WHEN SUBINVENTORY_CODE='NEAREXPIRY' 
	 OR  SUBINVENTORY_CODE LIKE '%NEXP%' 
	 THEN 'NEAREXPIRY' 
	 
	 ELSE 'OTHERS'
    END SUBINV_GROUP,

   QTY,
   INV_VALUE
   FROM
   (

   --BLOCKED DON'T UNCOMMIT, AS WE ARE GETTING DATA BY PHNX FOR UBL
   /*
SELECT
   ORGANIZATION_ID,
   ORG_DESC,
   ITEM_CODE,
   ITEM_DESC,
   BUSLINE_ID,
   BUSLINE_DESC,
   SUBINVENTORY_CODE,
   SUM(QTY)QTY,
   SUM(QTY*TRADE_PRICE)INV_VALUE 
FROM
   [live_inv] EBI 
WHERE
   1 = 1 
   AND BUSLINE_ID IN 
   (
      '147',
      '169',
      '166',
      '143',
      '150',
      '173',
      '135',
      '144',
      '140',
      '165',
      '136',
      '173'
    )
GROUP BY
   ORGANIZATION_ID,
   ORG_DESC,
   ITEM_CODE,
   ITEM_DESC,
   BUSLINE_ID,
   BUSLINE_DESC,
   SUBINVENTORY_CODE

   UNION ALL
   */

   select
PODV.ORGANIZATION_ID,PODV.ORG_DESC ,
 ITEM_CODE,
   ITEM_DESC,
   BUSLINE_ID,
   BUSLINE_DESC,
   SUBINVENTORY_CODE,
    SUM(QTY)QTY,
   SUM(QTY*TRADE_PRICE)INV_VALUE 
from PHNX_ONHAND_DATA_VW PODV
WHERE 1=1 AND BUSLINE_DESC IN (
 'Calibur',
'Canderel',
'Corian/DuPont Solid',
'Future Technologies',
'Hayat Kimya',
--'Kellogg's',
'LOreal',
'Lotte Beverages',
'Ovaltine',
'Pringles',
'Schick',
'Spot Free',
'Twinings'
   ) OR BUSLINE_DESC LIKE 'Kellogg%'

GROUP BY
   ORGANIZATION_ID,
   ORG_DESC,
   ITEM_CODE,
   ITEM_DESC,
   BUSLINE_ID,
   BUSLINE_DESC,
   SUBINVENTORY_CODE


   ) A
   ;


-- dbo.WH_INVENTORY_PHARMA_BR source

CREATE  VIEW [dbo].[WH_INVENTORY_PHARMA_BR] AS

SELECT 
 ORGANIZATION_ID,
   ORG_DESC,
   ITEM_CODE,
   ITEM_DESC,
   BUSLINE_ID,
   BUSLINE_DESC,
   SUBINVENTORY_CODE,
   CASE WHEN SUBINVENTORY_CODE='SELLABLE' THEN 1 ELSE 2 END SUBINV_SORT_INDEX,
   CASE 
     WHEN SUBINVENTORY_CODE='SELLABLE' THEN 'SELLABLE'
	 WHEN SUBINVENTORY_CODE='NEAREXPIRY' THEN 'NEAREXPIRY' ELSE 'OTHERS'
    END SUBINV_GROUP,

   QTY,
   INV_VALUE
   FROM
   (
SELECT
   ORGANIZATION_ID,
   ORG_DESC,
   ITEM_CODE,
   ITEM_DESC,
   BUSLINE_ID,
   BUSLINE_DESC,
   SUBINVENTORY_CODE,
   SUM(QTY)QTY,
   SUM(QTY*TRADE_PRICE)INV_VALUE 
FROM
   [live_inv] EBI 
WHERE
   1 = 1 
   AND BUSLINE_ID IN 
   (
      119,	110,	131,	163,	137,	107,	109,	153
   )
GROUP BY
   ORGANIZATION_ID,
   ORG_DESC,
   ITEM_CODE,
   ITEM_DESC,
   BUSLINE_ID,
   BUSLINE_DESC,
   SUBINVENTORY_CODE
   ) A
   ;


-- dbo.WH_LOCATIONS source

CREATE VIEW [dbo].[WH_LOCATIONS] AS
SELECT 
ORGANIZATION_ID
 , CASE 
	WHEN upper(RTRIM(LTRIM(ORG_NAME))) like 'Alipur%' then 'Ali Pur'
	else
	RTRIM(LTRIM(ORG_NAME))
 
 END AS ORG_NAME
, 
LTRIM(case
	when loc_ ='APR' THEN 'Ali Pur' 
	when loc_ ='MAI' THEN 'Mianwali'
	WHEN LOC_ ='ABT' THEN 'Abbotabad'
	WHEN LOC_ ='ATK' THEN 'Attock'
	WHEN LOC_='BDN' THEN 'Badin'
	WHEN LOC_='BHN' THEN 'Bahawalnagar'
	WHEN LOC_='BHW' THEN 'Bhalwal'
	WHEN LOC_='BKR' THEN 'Bhakkar'
	WHEN LOC_='BNR' THEN 'Buner'
	WHEN LOC_='BNU' THEN 'Bannu'
	WHEN LOC_='BSM' THEN 'Besham'
	WHEN LOC_='BUW' THEN 'Burewala'
	WHEN LOC_='BWP' THEN 'Bahawalpur'
	WHEN LOC_='CKL' THEN 'Chakwal'
	WHEN LOC_='CWT' THEN 'Chichawatni'
	WHEN LOC_='DAD' THEN 'Dadu'
	WHEN LOC_='DGK' THEN 'D.G Khan'
	WHEN LOC_='DIK' THEN 'D.I Khan'
	WHEN LOC_='DSS' THEN 'DSS Korangi'
	WHEN LOC_='FSD' THEN 'Faisalabad'
	WHEN LOC_='FTN' THEN 'FTN Korangi'
	WHEN LOC_='GHT' THEN 'Ghotki'
	WHEN LOC_='GJK' THEN 'Gujar Khan'
	WHEN LOC_='GLT' THEN 'Gilgit'
	WHEN LOC_='GRT' THEN 'Gujrat'
	WHEN LOC_='GUJ' THEN 'Gujranwala'
	WHEN LOC_='GWD' THEN 'Gwadar'
	WHEN LOC_='HFD' THEN 'Hafizabad'
	WHEN LOC_='HLP'  THEN 'Hasilpur'
	WHEN LOC_='HRD' THEN 'Haroonabad'
	WHEN LOC_='HRP' THEN 'Haripur'
	WHEN LOC_='HYD' THEN 'Hyderabad'
	WHEN LOC_='HYW' THEN 'Hyderabad Warehse'
	WHEN LOC_='HYW' THEN 'Hyderabad Warehse'
	WHEN LOC_='IWH' THEN 'Islamabad Warehse'
	WHEN LOC_='JAK' THEN 'Jacobabad'
	WHEN LOC_='JHG' THEN 'Jhang'
	WHEN LOC_='JHM' THEN 'Jhelum'
	WHEN LOC_='JPR' THEN 'Jam Pur'
	WHEN LOC_='KHT' THEN 'Kohat'
	WHEN LOC_='KHW' THEN 'Karachi Hub'
	WHEN LOC_='KJH' THEN 'Karachi JOHAR'
	WHEN LOC_='KMT' THEN 'Site   Karachi'
	WHEN LOC_='KNP' THEN 'Khan Pur'
	WHEN LOC_='KNW' THEN 'Khanewal'
	WHEN LOC_='KPS' THEN 'Karachi PECHS'
	WHEN LOC_='KRC' THEN 'Karachi'
	WHEN LOC_='KRG' THEN 'Korangi'
	WHEN LOC_='KRN' THEN 'Kharian'
	WHEN LOC_='KRP' THEN 'Khairpur'
	WHEN LOC_='KSB' THEN 'Khushab'
	WHEN LOC_='KSL' THEN 'Sana Logistics'
	WHEN LOC_='KSR' THEN 'Kasur'
	WHEN LOC_='KTL' THEN 'Kotli'
	WHEN LOC_='LH2' THEN 'Lahore 2'
	WHEN LOC_='LHH' THEN 'Lahore Hub 2'
	WHEN LOC_='LHR' THEN 'Lahore'
	WHEN LOC_='LMA' THEN 'Lahore Muslimabad'
	WHEN LOC_='LRK' THEN 'Larkana'
	WHEN LOC_='LRL' THEN 'Loralai'
	WHEN LOC_='LUS' THEN 'LWH-Unsellable'
	WHEN LOC_='LWH' THEN 'Lahore Warehse'
	WHEN LOC_='LYH' THEN 'Layyah'
	WHEN LOC_='MAI' THEN 'Mianwali'
	WHEN LOC_='MCN' THEN 'Mian Channu'
	WHEN LOC_='MDK' THEN 'Muridke'
	WHEN LOC_='MHR' THEN 'Mehar'
	WHEN LOC_='MNG' THEN 'Mingora'
	WHEN LOC_='MNS' THEN 'Mansehra'
	WHEN LOC_='MPA' THEN 'Mir Pur AJK'
	WHEN LOC_='MPK' THEN 'Mirpur Khas'
	WHEN LOC_='MRD' THEN 'Mardan'
	WHEN LOC_='MRG' THEN 'Muzaffar Garh'
	WHEN LOC_='MUX' THEN 'Multan'
	WHEN LOC_='MWH' THEN 'Multan Hub'
	WHEN LOC_='MX2' THEN 'Multan 2'
	WHEN LOC_='MZD' THEN 'Muzafarabad'
	WHEN LOC_='NCH' THEN 'New Challi'
	WHEN LOC_='NHR' THEN 'Nowshera'
	WHEN LOC_='NRL' THEN 'Naroval'
	WHEN LOC_='NSB' THEN 'Nawab Shah'
	WHEN LOC_='NSF' THEN 'Nowshero Feroz'
	WHEN LOC_='NUS' THEN 'NWH-Unsellable'
	WHEN LOC_='NWK' THEN 'National Warehouse'
	WHEN LOC_='OKR' THEN 'Okara'
	WHEN LOC_='PNG' THEN 'Phool Nagar'
	WHEN LOC_='PPT' THEN 'Pakpatan'
	WHEN LOC_='PSH' THEN 'Peshawar'
	WHEN LOC_='PWH' THEN 'Peshawar Warehouse' 
	WHEN LOC_='QTA' THEN 'Quetta Main'
	WHEN LOC_='RWK' THEN 'Rawla Kot'
	WHEN LOC_='RWP' THEN 'Islamabad Main'
	WHEN LOC_='RYM' THEN 'R Y Khan'
	WHEN LOC_='SAB' THEN 'Sawabi'
	WHEN LOC_='SDQ' THEN 'Sadiqabad'
	WHEN LOC_='SDR' THEN 'Samundari'
	WHEN LOC_='SGD' THEN 'Sargodha Main'
	WHEN LOC_='SHW' THEN 'Sahiwal'
	WHEN LOC_='SKP' THEN 'Shaikhupura'
	WHEN LOC_='SKT' THEN 'Shahkot'
	WHEN LOC_='SLK' THEN 'Sialkot Main'
	WHEN LOC_='SNG' THEN 'Logistics Singer-KRG'
	WHEN LOC_='SPR' THEN 'Shikarpur'
	WHEN LOC_='SUK' THEN 'Sukkur'
	WHEN LOC_='TAD' THEN 'Tando Adam'
	WHEN LOC_='TBT' THEN 'Toba Tek Singh'
	WHEN LOC_='TMG' THEN 'Timmergarrha'
	WHEN LOC_='TTA' THEN 'Thatha'
	WHEN LOC_='UKT' THEN 'UmerKot'
	WHEN LOC_='VHR' THEN 'Vehari'
	WHEN LOC_='WCN' THEN 'Wah Cantt'

	else
	org_name
end  )FULL_ORG_NAME,LOC_
FROM (
SELECT DISTINCT
ORGANIZATION_ID
, NAME ORG_NAME

,LOC_
FROM BO_INVENTORY_ORG_UNIIT 
WHERE 1=1 
---AND LOC_<>''
--and name like '%Ali%'
--AND NAME LIKE '% OU%'
) A

--ORDER BY LOC_;


-- dbo.WH_Month_RA_Sales_Gross_vw source

create view WH_Month_RA_Sales_Gross_vw as
select q.ch_desc, q.br_cd, 
DATEADD(mm, DATEDIFF(mm, 0, q.trx_date), 0) Month, wb.bl_cd, q.bl_desc, q.customer_number, q.customer_name, 'EBS' Source, sum(q.revenue) NET 
from wh_rcta_ooha_msi_party_tbl q
left outer join wh_bus_line wb on q.bus_line_id = wb.bl_number
where q.linetype = 'GROSS' 
and q.inv_type = 'SALES'
and DATEADD(mm, DATEDIFF(mm, 0, q.trx_date), 0) = DATEADD(mm, DATEDIFF(mm, 0, GETDATE())-1, 0)
--and wb.bl_cd in  ('CDS','HIZ','KLG','OVL','PGL','SVW','UBJ','WRB','MRS','WRG','TNG','SHK')
and wb.bl_cd_unq in  ('AXE','CDS','CDSU','CNS','HIZ','HIZU','KLG','KLGU','MRS','MRSU','OVL','PRG','PGL','PGLU','SHK','SRW','SVW','SVWU','TNG',
'UBJ','RDB','WRB','WRBU','WRG','DSS','DSSU','LNT','LRL','IFC','NOR','NTR','MBR','HLB','BLG')  ---,'GAN' NOT REQUIRED
--and Q.source = 'EBS'
and q.item_code not in ('131.420005.10.000','131.420014.10.000','131.420015.10.000',
                        '131.420016.10.000','131.420017.10.000','131.420018.10.000')---other than CDS
group by q.ch_desc, q.br_cd, DATEADD(mm, DATEDIFF(mm, 0, q.trx_date), 0) , wb.bl_cd, q.bl_desc, q.customer_number, q.customer_name;


-- dbo.WH_PBI_BL_GROUP source

CREATE  VIEW [dbo].[WH_PBI_BL_GROUP]
AS
select
DISTINCT 
   * 
from
   (
     SELECT
         case
            when
               T.BUSINESSLINE = 'XXX' 
            THEN
               'XXX' 

			   WHEN T.BL IN  ('DSSU','IML','TRZ','CNS','FTN','DSS') THEN 'OTHERS'
            ELSE
               T.BL 
         END
         BL 
		 ,CASE WHEN 	T.BL IN  ('DSSU','IML','TRZ','CNS','FTN','DSS') THEN 'OTHERS' ELSE 	 t.BUSINESSLINE END BUSINESSLINE
		 , t.BL_GROUP 
      FROM
         dbo.wh_bl_group_15 AS t 
      
	   RIGHT OUTER JOIN
            (
               SELECT DISTINCT
                  CASE
                     WHEN
                        q.trx_date >= '01-jan-2017' 
                        AND q.bl = 'CNS' 
                     THEN
                        ISNULL(q.BL, '') + 'P' 


						WHEN Q.BL IN ('DSSU','IML','TRZ','CNS','FTN','DSS') THEN 'OTHERS'

                     ELSE
                        q.BL 
                  END
                  AS bl, 
				  CASE WHEN Q.BL IN ('DSSU','IML','TRZ','CNS','FTN','DSS') THEN 'OTHERS' ELSE 				  BL_GROUP END AS BusinessLine 
               FROM
                  dbo.WH_SALES_LEGEBS106_TBL AS q
            )
            AS x 


            ON   CASE WHEN x.bl IN ('DSSU','IML','TRZ','CNS','FTN','DSS') THEN 'OTHERS'  ELSE X.BL END 
			=  CASE WHEN t.BL IN ('DSSU','IML','TRZ','CNS','FTN','DSS') THEN 'OTHERS' ELSE T.BL END 
			
            AND t.BL IS NOT NULL 
   )
   a 
where
   a.bl is not null
 --  AND A.BL='OTHERS' AND A.BL_GROUP<>'OTHERS';


-- dbo.[WH_PBI_BL_GROUP OLD] source

create view [dbo].[WH_PBI_BL_GROUP] as
/*select distinct t.bl, t.bl_group BusinessLine from wh_sales_legebs106_tbl t*/
select   t.BL, t.BUSINESSLINE, t.BL_GROUP/*, x.*  */from  wh_bl_group_15 t
right outer join (select distinct case when q.trx_date >= '01-jan-2017' and q.bl  = 'CNS' then  ISNULL(q.BL, '')+'P' ELSE q.BL  END  /*BL_CODE q.*/bl, q.bl_group BusinessLine from wh_sales_legebs106_tbl q) x on x.bl = t.bl
 ;


-- dbo.[WH_PBI_BL_GROUP OLD2] source

CREATE VIEW dbo.WH_PBI_BL_GROUP
AS
SELECT        ISNULL(t.BL, 'POL') AS BL, ISNULL(t.BUSINESSLINE, 'Punjab Oil') AS businessLine, ISNULL(t.BL_GROUP, 'Consumer') AS BL_GROUP
FROM            dbo.wh_bl_group_15 AS t RIGHT OUTER JOIN
                             (SELECT DISTINCT CASE WHEN q.trx_date >= '01-jan-2017' AND q.bl = 'CNS' THEN ISNULL(q.BL, '') + 'P' ELSE q.BL END AS bl, BL_GROUP AS BusinessLine
                               FROM            dbo.WH_SALES_LEGEBS106_TBL AS q) AS x ON x.bl = t.BL;


-- dbo.WH_PBI_BL_GROUP_VW source

CREATE VIEW WH_PBI_BL_GROUP_VW AS
SELECT 
CASE WHEN BUSINESSLINE='CALIBUR'THEN 'CRB1' ELSE BL END  BL
,BUSINESSLINE,BL_GROUP
FROM WH_PBI_BL_GROUP;


-- dbo.WH_PBI_DIV_GROUP source

CREATE   VIEW [dbo].[WH_PBI_DIV_GROUP] as 
SELECT DISTINCT Q.BL, CASE Q.BL WHEN 'NEW1' THEN 'NEW1' ELSE Q.BL_DESCRIPTION END AS BL_DESCRIPTION, Q.TBL, Q.TSALES_MAN, Q.TDIVISION, Q.DIV, A.DIV_GROUP
FROM            DBO.WH_TARGETREF_VW AS Q INNER JOIN
                             (SELECT DISTINCT BL, DIV_GROUP
                               FROM            DBO.WH_DIV_TBL AS T
                               WHERE        (DIV_GROUP IS NOT NULL)) AS A ON Q.BL = A.BL;


-- dbo.WH_PBI_LOCATIONS source

create view Wh_PBI_Locations as
select distinct /*decode(t.br_cd,'FTN','KRG',T.BR_CD) */t.BR_CD, t.location, t.region, t.categ from wh_sales_legebs106_tbl t
WHERE T.BR_CD not in ('DSS','FTN') ;


-- dbo.WH_PBI_SALES_ALL source

CREATE VIEW [dbo].[WH_PBI_SALES_ALL] AS 
      SELECT
         TDIVISION,
         TSALES_MAN,
         TBL,
         DIV,
         TRX_DATE,
         MONTH,
         INVOICE_TYPE,
         CUSTOMER_ID,
         CUSTOMER_NAME,
         TRX_NUMBER,
         BR_CD,
         DIV_CD,
         BL_CODE,
         COALESCE (BL_CODE1, BL_CODE) AS BL_CODE1,
         T_BL,
         booker_id_unq,
         SUPPLIER_ID_UNQ,
         CHANNEL,
         CH_GROUP,
         BILL_TYPE,
         SOURCE,
         BUCKET,
         SUM(Gross) AS GROSS,
         SUM(Dis_Claimable) AS DIS_CLAIMABLE,
         SUM(Dis_Unclaimable) AS DIS_UNCLAIMABLE,
         SUM(TAX) AS TAX,
         0 AS BaseG,
         SUM(Target) AS Target 
      FROM
         (
            SELECT
               R.TDIVISION,
               R.TSALES_MAN,
               R.TBL,
               R.DIV,
               q.TRX_DATE,
               q.MONTH,
               q.INVOICE_TYPE,
               q.CUSTOMER_ID,
               q.CUSTOMER_NAME,
               q.TRX_NUMBER,
               q.BR_CD,
               q.DIV_CD,
               q.BL_CODE,
               q.BL_CODE1,
               q.T_BL,
               q.booker_id_unq,
               q.SUPPLIER_ID_UNQ,
               q.CHANNEL,
               q.CH_GROUP,
               q.BILL_TYPE,
               q.SOURCE,
               q.BUCKET,
               SUM(q.Gross) AS Gross,
               SUM(q.Dis_Claimable) AS Dis_Claimable,
               SUM(q.Dis_Unclaimable) AS Dis_Unclaimable,
               SUM(q.TAX) AS TAX,
               0 AS BaseG,
               SUM(q.Target) AS Target 
            FROM
               (
                  SELECT
                     TRX_DATE,
                     MONTH,
                     UNQ__INV_TYPE AS INVOICE_TYPE,
                     CASE
                        T .SOURCE 
                        WHEN
                           'LEG' 
                        THEN
                           CONVERT(char(3), 999) + CONVERT(VARCHAR(8), T .CUSTOMER_ID) 
                        ELSE
                           CONVERT(char(3), 999) + CONVERT(VARCHAR(8), T .CUSTOMER_ID) 
                     END
                     AS CUSTOMER_ID, CUSTOMER_NAME, UNQ_CUSTOMER_TRX_ID AS TRX_NUMBER, 
                     CASE
                        t .br_cd 
                        WHEN
                           'FTN' 
                        THEN
                           'KRG' 
                        WHEN
                           'DSS' 
                        THEN
                           'KRG' 
                        ELSE
                           T .BR_CD 
                     END
                     AS BR_CD, DIV_CD, 
                     CASE
                        CASE
                           WHEN
                              t .trx_date >= '01-jan-2017' 
                              AND t .bl = 'CNS' 
                           THEN
                              ISNULL(T .BL, '') + 'P' 
                           ELSE
                              T .BL 
                        END
                        WHEN
                           'NOR' 
                        THEN
                           'New1' 
                        WHEN
                           'BLG' 
                        THEN
                           'New1' 
                        WHEN
                           'HLB' 
                        THEN
                           'New1' 
                        ELSE
                           CASE
                              WHEN
                                 t .trx_date >= '01-jan-2017' 
                                 AND t .bl = 'CNS' 
                              THEN
                                 ISNULL(T .BL, '') + 'P' 
                              ELSE
                                 T .BL 
                           END
                     END
                     AS BL_CODE, 
                     CASE
                        WHEN
                           t .trx_date >= '01-jan-2017' 
                           AND t .bl = 'CNS' 
                        THEN
                           T .BL + 'P' 
                        ELSE
                           T .BL 
                     END
                     AS BL_CODE1, NULL AS T_BL, 
                     CASE
                        WHEN
                           substring(t .booker_id_unq, - 1, len(t .booker_id_unq)) = ')' 
                        THEN
                           substring(t .booker_id_unq, 1, len(t .booker_id_unq) - 3) 
                        ELSE
                           t .booker_id_unq 
                     END
                     AS booker_id_unq, SUPPLIER_ID_UNQ, CHANNEL, GROUP_CH AS CH_GROUP, BILL_TYPE, SOURCE, BUCKET, SUM(GROSS) AS Gross, SUM(CLAIMABLE_DISCOUNT) AS Dis_Claimable, SUM(UNCLAIMABLE_DISCOUNT) AS Dis_Unclaimable, SUM(TAX_RECOVERABLE) AS TAX, 0 AS BaseG, 0 AS Target 
                  FROM
                     dbo.WH_SALES_LEGEBS106_TBL AS t 
                  WHERE
                     (
                        TRX_DATE BETWEEN '01-jul-2015' AND CONVERT(datetime, CONVERT(date, GETDATE())) - 1 
                     )
                  GROUP BY
                     TRX_DATE, MONTH, UNQ__INV_TYPE, 
                     CASE
                        T .SOURCE 
                        WHEN
                           'LEG' 
                        THEN
                           CONVERT(char(3), 999) + CONVERT(VARCHAR(8), T .CUSTOMER_ID) 
                        ELSE
                           CONVERT(char(3), 999) + CONVERT(VARCHAR(8), T .CUSTOMER_ID) 
                     END
, CUSTOMER_NAME, UNQ_CUSTOMER_TRX_ID, BR_CD, DIV_CD, BL, 
                     CASE
                        WHEN
                           substring(t .booker_id_unq, - 1, len(t .booker_id_unq)) = ')' 
                        THEN
                           substring(t .booker_id_unq, 1, len(t .booker_id_unq) - 3) 
                        ELSE
                           t .booker_id_unq 
                     END
, SUPPLIER_ID_UNQ, CHANNEL, GROUP_CH, BILL_TYPE, SOURCE, BUCKET 
               )
               AS q 
               LEFT OUTER JOIN
                  dbo.wh_targetref_vw AS R 
                  ON 
                  CASE
                     q.bl_code 
                     WHEN
                        'NOR' 
                     THEN
                        'New1' 
                     WHEN
                        'BLG' 
                     THEN
                        'New1' 
                     WHEN
                        'HLB' 
                     THEN
                        'New1' 
                     ELSE
                        q.bl_code 
                  END
                  = R.BL 
            GROUP BY
               R.TDIVISION, R.TSALES_MAN, R.TBL, R.DIV, q.TRX_DATE, q.MONTH, q.INVOICE_TYPE, q.CUSTOMER_ID, q.CUSTOMER_NAME, q.TRX_NUMBER, q.BR_CD, q.DIV_CD, q.BL_CODE, q.BL_CODE1, q.T_BL, q.booker_id_unq, q.SUPPLIER_ID_UNQ, q.CHANNEL, q.CH_GROUP, q.BILL_TYPE, q.SOURCE, q.BUCKET 
            UNION ALL
            SELECT
               R_1.TDIVISION,
               R_1.TSALES_MAN,
               R_1.TBL,
               R_1.DIV,
               t.MONTH AS TRX_DATE,
               t.MONTH,
               'SALES' AS INVOICE_TYPE,
               NULL AS CUSTOMER_ID,
               NULL AS CUSTOMER_NAME,
               NULL AS TRX_NUMBER,
               NULL AS BR_CD,
               NULL AS DIV_CD,
               R_1.BL AS BL_CODE,
               NULL AS BL_CODE1,
               t.TBL AS T_BL,
               NULL AS booker_id_unq,
               NULL AS supplier_id_unq,
               NULL AS CHANNEL,
               NULL AS CH_GROUP,
               NULL AS BILL_TYPE,
               NULL AS SOURCE,
               NULL AS bucket,
               0 AS Gross,
               0 AS Dis_Claimable,
               0 AS Dis_Unclaimable,
               0 AS TAX,
               0 AS BaseG,
               SUM(t.TARGET) AS TARGET 
            FROM
               dbo.WH_SALES_TARGETS AS t 
               LEFT OUTER JOIN
                  (
                     SELECT DISTINCT
                        TBL,
                        TSALES_MAN,
                        TDIVISION,
                        DIV,
                        BL 
                     FROM
                        dbo.wh_targetref_vw AS t 
                  )
                  AS R_1 
                  ON t.TBL = R_1.TBL 
            GROUP BY
               R_1.TDIVISION,
               R_1.TSALES_MAN,
               t.MONTH,
               R_1.BL,
               t.TBL,
               R_1.TBL,
               R_1.DIV 
         )
         AS AA 
      GROUP BY
         TDIVISION,
         TSALES_MAN,
         TBL,
         DIV,
         TRX_DATE,
         MONTH,
         INVOICE_TYPE,
         CUSTOMER_ID,
         CUSTOMER_NAME,
         TRX_NUMBER,
         BR_CD,
         DIV_CD,
         BL_CODE,
         COALESCE (BL_CODE1, BL_CODE),
         T_BL,
         booker_id_unq,
         SUPPLIER_ID_UNQ,
         CHANNEL,
         CH_GROUP,
         BILL_TYPE,
         SOURCE,
         BUCKET;


-- dbo.WH_PBI_SALES_ALL_120319 source

CREATE VIEW [dbo].[WH_PBI_SALES_ALL_120319]
AS
SELECT        TDIVISION, TSALES_MAN, TBL, DIV, TRX_DATE, MONTH, INVOICE_TYPE, CUSTOMER_ID, CUSTOMER_NAME, TRX_NUMBER, BR_CD, DIV_CD, BL_CODE, COALESCE (BL_CODE1, BL_CODE) AS BL_CODE1, 
                         T_BL, booker_id_unq AS BOOKER_ID_UNQ, SUPPLIER_ID_UNQ, CHANNEL, CH_GROUP, BILL_TYPE, SOURCE, BUCKET, SUM(Gross) AS GROSS, SUM(Dis_Claimable) AS DIS_CLAIMABLE, 
                         SUM(Dis_Unclaimable) AS DIS_UNCLAIMABLE, SUM(TAX) AS TAX, 0 AS BaseG, SUM(Target) AS Target
FROM            (SELECT        R.TDIVISION, R.TSALES_MAN, R.TBL, R.DIV, q.TRX_DATE, q.MONTH, q.INVOICE_TYPE, q.CUSTOMER_ID, q.CUSTOMER_NAME, q.TRX_NUMBER, q.BR_CD, q.DIV_CD, q.BL_CODE, q.BL_CODE1, 
                                                    q.T_BL, q.booker_id_unq, q.SUPPLIER_ID_UNQ, q.CHANNEL, q.CH_GROUP, q.BILL_TYPE, q.SOURCE, q.BUCKET, SUM(q.Gross) AS Gross, SUM(q.Dis_Claimable) AS Dis_Claimable, 
                                                    SUM(q.Dis_Unclaimable) AS Dis_Unclaimable, SUM(q.TAX) AS TAX, 0 AS BaseG, SUM(q.Target) AS Target
                          FROM            (SELECT        TRX_DATE, MONTH, UNQ__INV_TYPE AS INVOICE_TYPE, CASE T .SOURCE WHEN 'LEG' THEN CONVERT(char(3), 999) + CONVERT(VARCHAR(8), T .CUSTOMER_ID) 
                                                                              ELSE CONVERT(char(3), 999) + CONVERT(VARCHAR(8), T .CUSTOMER_ID) END AS CUSTOMER_ID, CUSTOMER_NAME, UNQ_CUSTOMER_TRX_ID AS TRX_NUMBER, 
                                                                              CASE t .br_cd WHEN 'FTN' THEN 'KRG' WHEN 'DSS' THEN 'KRG' ELSE T .BR_CD END AS BR_CD, DIV_CD, CASE CASE WHEN t .trx_date >= '01-jan-2017' AND 
                                                                              t .bl = 'CNS' THEN ISNULL(T .BL, '') 
                                                                              + 'P' ELSE T .BL END WHEN 'GAN' THEN 'New1' WHEN 'IFC' THEN 'New1' WHEN 'LRL' THEN 'New1' WHEN 'NOR' THEN 'New1' WHEN 'BLG' THEN 'New1' WHEN 'HLB' THEN 'New1' WHEN
                                                                               'MBR' THEN 'New2' ELSE CASE WHEN t .trx_date >= '01-jan-2017' AND t .bl = 'CNS' THEN ISNULL(T .BL, '') + 'P' ELSE T .BL END END AS BL_CODE, 
                                                                              CASE WHEN t .trx_date >= '01-jan-2017' AND t .bl = 'CNS' THEN T .BL + 'P' ELSE T .BL END AS BL_CODE1, NULL AS T_BL, CASE WHEN substring(t .booker_id_unq, - 1, 
                                                                              len(t .booker_id_unq)) = ')' THEN substring(t .booker_id_unq, 1, len(t .booker_id_unq) - 3) ELSE t .booker_id_unq END AS booker_id_unq, SUPPLIER_ID_UNQ, CHANNEL, 
                                                                              GROUP_CH AS CH_GROUP, BILL_TYPE, SOURCE, BUCKET, SUM(GROSS) AS Gross, SUM(CLAIMABLE_DISCOUNT) AS Dis_Claimable, SUM(UNCLAIMABLE_DISCOUNT) 
                                                                              AS Dis_Unclaimable, SUM(TAX_RECOVERABLE) AS TAX, 0 AS BaseG, 0 AS Target
                                                    FROM            dbo.WH_SALES_LEGEBS106_TBL AS t
                                                    WHERE        (TRX_DATE BETWEEN '01-jul-2015' AND CONVERT(datetime, CONVERT(date, GETDATE())) - 1)
                                                    GROUP BY TRX_DATE, MONTH, UNQ__INV_TYPE, CASE T .SOURCE WHEN 'LEG' THEN CONVERT(char(3), 999) + CONVERT(VARCHAR(8), T .CUSTOMER_ID) ELSE CONVERT(char(3), 999) 
                                                                              + CONVERT(VARCHAR(8), T .CUSTOMER_ID) END, CUSTOMER_NAME, UNQ_CUSTOMER_TRX_ID, BR_CD, DIV_CD, BL, CASE WHEN substring(t .booker_id_unq, - 1, len(t .booker_id_unq)) 
                                                                              = ')' THEN substring(t .booker_id_unq, 1, len(t .booker_id_unq) - 3) ELSE t .booker_id_unq END, SUPPLIER_ID_UNQ, CHANNEL, GROUP_CH, BILL_TYPE, SOURCE, BUCKET) 
                                                    AS q LEFT OUTER JOIN
                                                    dbo.wh_targetref_vw AS R ON 
                                                    CASE q.bl_code WHEN 'GAN' THEN 'New1' WHEN 'IFC' THEN 'New1' WHEN 'LRL' THEN 'New1' WHEN 'NOR' THEN 'New1' WHEN 'BLG' THEN 'New1' WHEN 'HLB' THEN 'New1' WHEN 'MBR' THEN 'New2'
                                                     ELSE q.bl_code END = R.BL
                          GROUP BY R.TDIVISION, R.TSALES_MAN, R.TBL, R.DIV, q.TRX_DATE, q.MONTH, q.INVOICE_TYPE, q.CUSTOMER_ID, q.CUSTOMER_NAME, q.TRX_NUMBER, q.BR_CD, q.DIV_CD, q.BL_CODE, q.BL_CODE1, 
                                                    q.T_BL, q.booker_id_unq, q.SUPPLIER_ID_UNQ, q.CHANNEL, q.CH_GROUP, q.BILL_TYPE, q.SOURCE, q.BUCKET
                          UNION ALL
                          SELECT        R_1.TDIVISION, R_1.TSALES_MAN, R_1.TBL, R_1.DIV, t.MONTH AS TRX_DATE, t.MONTH, 'SALES' AS INVOICE_TYPE, NULL AS CUSTOMER_ID, NULL AS CUSTOMER_NAME, NULL 
                                                   AS TRX_NUMBER, NULL AS BR_CD, NULL AS DIV_CD, R_1.BL AS BL_CODE, NULL AS BL_CODE1, t.TBL AS T_BL, NULL AS booker_id_unq, NULL AS supplier_id_unq, NULL AS CHANNEL, NULL 
                                                   AS CH_GROUP, NULL AS BILL_TYPE, NULL AS SOURCE, NULL AS bucket, 0 AS Gross, 0 AS Dis_Claimable, 0 AS Dis_Unclaimable, 0 AS TAX, 0 AS BaseG, SUM(t.TARGET) AS TARGET
                          FROM            dbo.WH_SALES_TARGETS AS t LEFT OUTER JOIN
                                                       (SELECT DISTINCT TBL, TSALES_MAN, TDIVISION, DIV, BL
                                                         FROM            dbo.wh_targetref_vw AS t) AS R_1 ON t.TBL = R_1.TBL
                          GROUP BY R_1.TDIVISION, R_1.TSALES_MAN, t.MONTH, R_1.BL, t.TBL, R_1.TBL, R_1.DIV) AS AA
GROUP BY TDIVISION, TSALES_MAN, TBL, DIV, TRX_DATE, MONTH, INVOICE_TYPE, CUSTOMER_ID, CUSTOMER_NAME, TRX_NUMBER, BR_CD, DIV_CD, BL_CODE, COALESCE (BL_CODE1, BL_CODE), T_BL, 
                         booker_id_unq, SUPPLIER_ID_UNQ, CHANNEL, CH_GROUP, BILL_TYPE, SOURCE, BUCKET;


-- dbo.WH_PBI_SALES_ALL_Pharma source

/*AND (INVOICE_TYPE <> 'MR')*/
CREATE VIEW dbo.WH_PBI_SALES_ALL_Pharma
AS
SELECT        TDIVISION, TSALES_MAN, TBL, DIV, TRX_DATE, MONTH, INVOICE_TYPE, CUSTOMER_ID, CUSTOMER_NAME, TRX_NUMBER, BR_CD, DIV_CD, BL_CODE, BL_CODE1, T_BL, booker_id_unq, SUPPLIER_ID_UNQ, 
                         CHANNEL, CH_GROUP, BILL_TYPE, SOURCE, BUCKET, GROSS, DIS_CLAIMABLE, DIS_UNCLAIMABLE, TAX, BaseG, Target
FROM            dbo.WH_PBI_SALES_ALL AS a
WHERE        (1 = 1) AND (TRX_DATE >= '01-JUL-19') AND (DIV IN ('Pharma'));


-- dbo.WH_PBI_SALES_ALL_Pharma_NO_MR source

create   view  [dbo].[WH_PBI_SALES_ALL_Pharma_NO_MR] AS  ---pharma view
select * from wh_pbi_sales_all a
where a.div not in ('Consumer-1','Consumer-2')
and a.INVOICE_TYPE <> 'MR';


-- dbo.WH_PBI_SALES_ALL_consumer source

CREATE VIEW [dbo].[WH_PBI_SALES_ALL_consumer] AS 
SELECT
   TDIVISION,
   TSALES_MAN,
   TBL,
   DIV,
   TRX_DATE,
   MONTH,
   INVOICE_TYPE,
   CUSTOMER_ID,
   CUSTOMER_NAME,
   TRX_NUMBER,
   BR_CD,
   DIV_CD,
   -- BL_CODE,
   CASE
      WHEN
         BL_CODE IN 
         (
            'DSS',
            'DSSU',
            'IML',
            'TRZ',
            'CNS',
            'FTN'
         )
      THEN
         'OTHERS' 
      ELSE
         BL_CODE 
   END
   BL_CODE, 
   CASE
      WHEN
         BL_CODE1 IN 
         (
            'DSS', 'DSSU', 'IML', 'TRZ', 'CNS', 'FTN'
         )
      THEN
         'OTHERS' 
      ELSE
         BL_CODE1 
   END
   BL_CODE1, 	--BL_CODE1,
   T_BL, booker_id_unq, SUPPLIER_ID_UNQ, CHANNEL, CH_GROUP, BILL_TYPE, SOURCE, BUCKET, GROSS, DIS_CLAIMABLE, DIS_UNCLAIMABLE, TAX, BaseG, Target 
FROM
   dbo.WH_PBI_SALES_ALL AS a 
WHERE
   1 = 1 
   and trx_date >= '01-JUL-16' 
   AND 
   (
      DIV IN 
      (
         'Consumer', 'Consumer-2', ' 65464' 
      )
   );


-- dbo.WH_PBI_SALES_ALL_consumer_No_MR source

CREATE VIEW [dbo].[WH_PBI_SALES_ALL_consumer_No_MR]
AS
SELECT        tdivision, tsales_man, tbl, div, TRX_DATE, MONTH, INVOICE_TYPE, CUSTOMER_ID, CUSTOMER_NAME, TRX_NUMBER, BR_CD, DIV_CD, BL_CODE, bl_code1, T_BL, booker_id_unq, SUPPLIER_ID_UNQ, 
                         CHANNEL, CH_GROUP, BILL_TYPE, SOURCE, BUCKET, Gross, Dis_Claimable, Dis_Unclaimable, TAX, BaseG, Target
FROM            dbo.WH_PBI_SALES_ALL AS a
WHERE        (div IN ('Consumer-1', 'Consumer-2')) AND (INVOICE_TYPE <> 'MR');


-- dbo.WH_RA_SALES_EBS source

CREATE VIEW dbo.WH_RA_SALES_EBS
AS
SELECT        ou.ATTRIBUTE1 AS br_cd, wr.LOCATION, wr.CATEG, wr.REGION, NULL AS Div_cd, NULL AS Div_Des, ts.SALESREP_NUMBER AS BOOKER_ID, VW.TRX_DATE, VW.TRX_NUMBER, 
                         SUM(VW.SOLD_QTY * VW.UNIT_SELLING_PRICE) AS [Gross Sales], wb.BL_CD, VW.BUSINESS_LINE_ID AS BL_ID, VW.BUSINESS_LINE AS BL_DES, ts.DIV_CD AS TSO_DIV, 
                         VW.BOOKER_NAME AS TSO_Name
FROM            dbo.IBL_SALE_DISCOUNT_MIS_VW AS VW INNER JOIN
                         dbo.hr_all_organization_units AS ou ON ou.ORGANIZATION_ID = VW.ORG_ID LEFT OUTER JOIN
                         dbo.WH_REGION AS wr ON ou.ATTRIBUTE1 = wr.BR_CD LEFT OUTER JOIN
                         dbo.WH_BUS_LINE AS wb ON VW.BUSINESS_LINE_ID = wb.BL_NUMBER LEFT OUTER JOIN
                         dbo.WH_TSO_EBS_ALL AS ts ON VW.BOOKER_ID = ts.SALESREP_ID AND VW.ORG_ID = ts.ORG_ID
WHERE        (1 = 1) AND (VW.SALES_ORDER_TYPE NOT LIKE '%MR C%')
GROUP BY ou.ATTRIBUTE1, wr.LOCATION, wr.CATEG, wr.REGION, ts.SALESREP_NUMBER, VW.TRX_DATE, VW.TRX_NUMBER, wb.BL_CD, VW.BUSINESS_LINE_ID, VW.BUSINESS_LINE, ts.DIV_CD, VW.BOOKER_NAME;


-- dbo.WH_RA_SALES_EBS_CUS source

create view WH_RA_SALES_EBS_CUS as
SELECT
 ou.attribute1 br_cd,wr.location,wr.categ, wr.region, '' Div_cd,  '' Div_Des, ts.salesrep_number BOOKER_ID ,
  vw.TRX_DATE, isnull( upper(replace(convert(NVARCHAR, vw.TRX_DATE, 6), ' ', '-')), '')+'<>'+isnull(convert(nvarchar,vw.customer_id), '')+'<>'+isnull(vw.customer_name, '') TRX_NUMBER,
    sum(( vw.SOLD_QTY ) * ( vw.UNIT_SELLING_PRICE )) "Gross Sales", wb.bl_cd,
   vw.BUSINESS_LINE_ID BL_ID , vw.BUSINESS_LINE BL_DES, ts.Div_Cd TSO_DIV, VW.BOOKER_NAME TSO_Name, 
   isnull(ou.attribute1, '')+'<>'+isnull(vw.trx_number, '') Bills
FROM
  IBL_SALE_DISCOUNT_MIS_VW VW
inner join hr_all_organization_units ou on ou.organization_id = vw.ORG_ID
left outer join wh_region wr on ou.attribute1 = wr.br_cd 
left outer join wh_bus_line wb on vw.BUSINESS_LINE_ID = wb.bl_number 
left outer join wh_tso_ebs_all ts on vw.BOOKER_ID  = ts.SALESREP_ID  and vw.ORG_ID = ts.ORG_id 
WHERE  (vw.SALES_ORDER_TYPE  NOT LIKE  '%MR C%')
group by ou.attribute1 ,wr.location,wr.categ, wr.region, ts.salesrep_number  ,
  vw.TRX_DATE, isnull( upper(replace(convert(NVARCHAR, vw.TRX_DATE, 6), ' ', '-')), '')+'<>'+isnull(convert(nvarchar,vw.customer_id), '')+'<>'+isnull(vw.customer_name, '') , 
    wb.bl_cd,   vw.BUSINESS_LINE_ID  , vw.BUSINESS_LINE ,ts.Div_Cd ,VW.BOOKER_NAME
  , isnull(ou.attribute1, '')+'<>'+isnull(vw.trx_number, '');


-- dbo.WH_RA_SALES_EBS_old source

CREATE  VIEW [dbo].[WH_RA_SALES_EBS_old] AS
SELECT
 ou.attribute1 br_cd,wr.location,wr.categ, wr.region, qa.character1 Div_cd, qa.character2 Div_Des, /*TO_CHAR(vw.BOOKER_ID)*/ts.salesrep_number BOOKER_ID ,
  vw.TRX_DATE, vw.TRX_NUMBER,  sum(( vw.SOLD_QTY ) * ( vw.UNIT_SELLING_PRICE )) "Gross Sales", wb.bl_cd,
   vw.BUSINESS_LINE_ID BL_ID , vw.BUSINESS_LINE BL_DES, ts.Div_Cd TSO_DIV, VW.BOOKER_NAME TSO_Name
FROM
  IBL_SALE_DISCOUNT_MIS_VW VW
inner join hr_all_organization_units ou on ou.organization_id = vw.ORG_ID
left outer join wh_region wr on ou.attribute1 = wr.br_cd 
left outer join wh_qa_results qa on qa.character3 = vw.BUSINESS_LINE_ID
left outer join wh_bus_line wb on vw.BUSINESS_LINE_ID = wb.bl_number 
left outer join wh_tso_ebs_all ts on vw.BOOKER_ID /*salesrep_id*/ = ts.SALESREP_ID  and vw.ORG_ID = ts.ORG_id 
WHERE  qa.plan_id = '102'
 and qa.character1 in ('UBJ','FLC','EGL','HWK','PHA','MRS') --   and qa.character1 not in ('FLC','EGL','HWK')---------------
 /* and vw.TRX_DATE  BETWEEN  '01-AUG-2015' AND '09-MAR-2016'*/
  AND  (vw.SALES_ORDER_TYPE  NOT LIKE  '%MR C%'
  /*OR   vw.REASON_CODE  NOT LIKE  'EXP / TPR /DMG DEDUCTION'*/)
group by ou.attribute1 ,wr.location,wr.categ, wr.region, qa.character1 , qa.character2 , /*TO_CHAR(vw.BOOKER_ID)*/ts.salesrep_number  ,
  vw.TRX_DATE, vw.TRX_NUMBER,   wb.bl_cd,   vw.BUSINESS_LINE_ID  , vw.BUSINESS_LINE ,ts.Div_Cd ,VW.BOOKER_NAME;


-- dbo.WH_RA_SALES_EBS_test source

create view WH_RA_SALES_EBS_test as
SELECT
 ou.attribute1 br_cd,wr.location,wr.categ, wr.region, '' Div_cd, '' Div_Des, ts.salesrep_number BOOKER_ID ,
  vw.TRX_DATE, vw.TRX_NUMBER,  sum(( vw.SOLD_QTY ) * ( vw.UNIT_SELLING_PRICE )) "Gross_Sales", wb.bl_cd,
   vw.BUSINESS_LINE_ID BL_ID , vw.BUSINESS_LINE BL_DES, ts.Div_Cd TSO_DIV, VW.BOOKER_NAME TSO_Name, sum(vw.GROSS) gross
FROM
  IBL_SALE_DISCOUNT_MIS_VW VW
inner join hr_all_organization_units ou on ou.organization_id = vw.ORG_ID
left outer join wh_region wr on ou.attribute1 = wr.br_cd 
left outer join wh_bus_line wb on vw.BUSINESS_LINE_ID = wb.bl_number 
left outer join wh_tso_ebs_all ts on vw.BOOKER_ID= ts.SALESREP_ID  and vw.ORG_ID = ts.ORG_id 
WHERE  (vw.SALES_ORDER_TYPE  NOT LIKE  '%MR C%'
  )
group by ou.attribute1 ,wr.location,wr.categ, wr.region,  ts.salesrep_number  ,
  vw.TRX_DATE, vw.TRX_NUMBER,   wb.bl_cd,   vw.BUSINESS_LINE_ID  , vw.BUSINESS_LINE ,ts.Div_Cd ,VW.BOOKER_NAME;


-- dbo.WH_RCTA_OOHA_MSI_PARTY_TBL_vW source

CREATE view [dbo].[WH_RCTA_OOHA_MSI_PARTY_TBL_vW] as
SELECT  RCTA_ROWID 
      , RCTLA_ROWID 
      , ORG_ID 
      , BR_CD 
      , TRX_NUMBER 
      , PREVIOUS_CUSTOMER_TRX_ID 
      , PREVIOUS_CUSTOMER_TRX_LINE_ID xPREVIOUS_CUSTOMER_TRX_LINE_ID
      , CUSTOMER_TRX_ID 
      , CUSTOMER_TRX_LINE_ID 
      , LINE_NUMBER 
      , INVENTORY_ITEM_ID 
      , MAIN_SALES_ORDER_NUMBER 
      , PREVIOUS_SALES_ORDER 
      , TRX_DATE 
      , CUST_PO_NUMBER 
      , BUS_LINE_ID 
      , ITEM_CODE 
      , ITEM_DESC 
      , BL_DESC 
      , WAREHOUSE_ID 
      , SHIP_TO_CUSTOMER_ID 
      , BILL_TO_CUSTOMER_ID 
      , CUSTOMER_ID 
      , CUSTOMER_NUMBER 
      , CUSTOMER_NAME 
      , ADDRESS1 
      , ADDRESS2 
      , ADDRESS3 
      , ADDRESS4 
      , CITY 
      , CNIC_PARTY 
      , CNIC_CUST 
      , NTN 
      , TAX_REFERENCE 
      , TAX_NAME 
      , CUST_COD_OLD 
      , CUSTOMER_TYPE 
      , SUPPLIER_ID 
      , SUPPLIER_NAME 
      , BOOKER_ID 
      , SALESREP_ID 
      , BOOKER_NAME 
      , REASON_CODE 
      , CH_DESC 
      , BATCH_ID 
      , BATCH_SOURCE_ID 
      , TERM_ID 
      , COMPLETE_FLAG 
      , INTERFACE_HEADER_CONTEXT 
      , STATUS_TRX 
      , DOC_SEQUENCE_VALUE 
      , DOC_SEQUENCE_VALUE_RCTA  xDOC_SEQUENCE_VALUE_RCTA
      , SEGMENT1 
      , SEGMENT1_DESC 
      , SEGMENT2 
      , SEGMENT2_DESC 
      , SEGMENT3 
      , SEGMENT3_DESC 
      , SEGMENT4 
      , SEGMENT4_DESC 
      , CODE_COMBINATION_ID 
      , UNIT_STANDARD_PRICE 
      , SALES_ORDER_LINE 
      , TAX_RATE 
      , TAX_EXEMPT_FLAG 
      , LINE_RECOVERABLE 
      , ORDER_NUMBER 
      , SOURCE_DOCUMENT_ID 
      , ORDER_SOURCE_ID 
      , ORIG_SYS_DOCUMENT_REF 
      , ORDERED_DATE 
      , PRICE_LIST_ID 
      , ORDER_SOURCE 
      , CANCELLED_FLAG_OOHA 
      , BOOKED_FLAG 
      , OPEN_FLAG_OOHA 
      , FLOW_STATUS_CODE 
      , PRICING_QUANTITY 
      , CANCELLED_QUANTITY 
      , SHIPPED_QUANTITY 
      , ORDERED_QUANTITY 
      , FULFILLED_QUANTITY 
      , SHIPPING_QUANTITY 
      , TAX_CODE 
      , INVOICE_INTERFACE_STATUS_CODE 
      , PRICE_LIST_ID_OOLA 
      , UNIT_LIST_PRICE 
      , TAX_VALUE 
      , ITEM_TYPE_CODE 
      , ACTUAL_SHIPMENT_DATE 
      , LINE_CATEGORY_CODE 
      , RETURN_CONTEXT 
      , RETURN_ATTRIBUTE1 
      , RETURN_ATTRIBUTE2 XRETURN_ATTRIBUTE2 
      , SOURCE_TYPE_CODE 
      , RETURN_REASON_CODE RETURN_REASON_CODE1		
      , SHIPPING_INTERFACED_FLAG 
      , INVOICED_QUANTITY 
      , UNIT_SELLING_PRICE_OOLA XUNIT_SELLING_PRICE_OOLA
      , UNIT_SELLING_PRICE_PER_PQTY  XXUNIT_SELLING_PRICE_PER_PQTY
      , ATTRIBUTE_CATEGORY_MSI 
      , ATTRIBUTE3_MSI 
      , EXPENSE_ACCOUNT 
      , COST_OF_SALES_ACCOUNT 
      , SALES_ACCOUNT 
      , UNQ_TRX_NUMBER 
      , PREVIOUS_TRX_NUMBER 
      , LINETYPE 
      , LIST_TYPE_CODE 
      , MODIFIER_TYPE 
      , MODIFIER_NUMBER 
      , MODIFIER_DESCRIPTION 
      , GL_CS 
      , GL_CR 
      , BILL_TYPE 
      , SALE_TYPE 
      , SALE_ORDER_TYPE_L 
      , SALE_ORDER_TYPE_H XSALE_ORDER_TYPE_H
      , DN 
      , QTY 
      , UNIT_SELLING_PRICE 
      , ORDER_UNIT_SELLING_PRICE 
      , REVENUE_EXT 
      , REVENUE 
      , TAX 
      , UNQ__TRX_DATE unq_trx_date
      , UNQ__BILL_TYPE  unq_bill_type
      , AC_UPDATE_DATE 
      , MODIFIER_TYPE2 
      , INV_TYPE 
      , OOHA_HEADER_ID 
      , OOLA_LINE_ID 
      , TRX_NO_UNQ 
      , UNQ_CUSTOMER_TRX_ID 
      , UNQ__SALE_TYPE  UNQ_SALE_TYPE
      , UNQ__TRX_NUMBER  UNQ_TRX_NUMBER1
      , UNQ__INV_TYPE   UNQ_INV_TYPE
      , UNQ__MONTH  UNQ_month
      , X_MODIFIER_TYPE 
      , X_RTN 
      , TSO_DIV 
      , LOCATION 
      , REGION 
      , CATEG 
      , MONTH XMONTH
      , BL_CD 
  FROM  dbo . WH_RCTA_OOHA_MSI_PARTY_TBL 

;


-- dbo.WH_SALES_ITEMS_DATA_CONSUMER source

CREATE view [dbo].[WH_SALES_ITEMS_DATA_CONSUMER] AS 
select * from 
(
SELECT
   wsd.trx_date,
   WSD.first_month,
   wsd.BUSINESS_LINE_ID,
   CASE
      WHEN
         wsd.BUSINESS_LINE_ID IN 
         (
            '147','173'
         )
      THEN
         'OTHERS' 
      ELSE
         wsd.BUSLINE_DESC 
   END
   BUSLINE_DESC , 
   case
      WHEN
         WSD.BUSINESS_LINE_ID IN
         (
            '147','173'
         )
      THEN
         'OTHERS' 
      ELSE
	  WSD.BL 
   END
   BL , WSD.TDIVISION, wsd.item_code , wsd.DESCRIPTION , WSD.BILL_TYPE ,WSD.CUSTOMER_ID, wsd.gross, wsd.CLAIMABLE_DISCOUNT, wsd.UNCLAIMABLE_DISCOUNT , wsd.net , WSD.TARGET 
   ,DATA_FLAG
FROM
   wh_sales_items_data_all wsd 
   --LEFT OUTER JOIN 
   --TARGETREFTBL TGT ON (TGT.BUSINESS_LINE_ID=WSD.BUSINESS_LINE_ID)
WHERE
   1 = 1 
 

   AND WSD.TDIVISION = 'Consumer' 

   AND wsd.BUSLINE_DESC  IN ( 
   'Calibur',
'Canderel',
'Corian/DuPont Solid',
'Future Technologies',
'Hayat Kimya',
--'Kellogg's',
'LOreal',
'Lotte Beverages',
'Ovaltine',
'Pringles',
'Schick',
'Spot Free',
'Twinings'
   ) OR wsd.BUSLINE_DESC LIKE 'Kellogg%'
   ) a
   where 1=1
     AND TRX_DATE>= cast( CONCAT(	DATEPART(YYYY,  getdate()  )-1 ,'-07-01') as date)   ---'01-JUL-20' 
;


-- dbo.WH_SALES_ITEMS_DATA_CONS_BR source

CREATE view [dbo].[WH_SALES_ITEMS_DATA_CONS_BR] AS
SELECT
TRX_DATE,
FIRST_MONTH,
ORG_ID,
ORG_NAME,
LOC_,
BUSINESS_LINE_ID,
BUSLINE_DESC,
ITEM_CODE,
DESCRIPTION,
BILL_TYPE,
CUSTOMER_ID,
REASON_CODE,
customer_trx_id,
GROSS,
CASE WHEN BILL_TYPE='MR' THEN GROSS*-1 ELSE GROSS END C_GROSS,
CLAIMABLE_DISCOUNT,
UNCLAIMABLE_DISCOUNT,
TAX,
NET

FROM(

SELECT
   TRX_DATE,
   DATEADD(M, DATEDIFF(M, 0, TRX_DATE), 0)FIRST_MONTH,
   ISDM.ORG_ID,
   LOC.NAME ORG_NAME,LOC.LOC_,
   cast(ISDM.BUSINESS_LINE_ID as varchar(50)) BUSINESS_LINE_ID,
   ISDM.BUSINESS_LINE BUSLINE_DESC,
  
   ITEM_CODE,
   DESCRIPTION,
   CASE
      WHEN
         UPPER(ISDM.BILL_TYPE_DESC) LIKE '%CASH%' 
         AND ( UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% IBL UB Billing Retur %'  or UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% MR %' )
      THEN
         'CASH' 
      WHEN
         UPPER(ISDM.BILL_TYPE_DESC) LIKE '%CREDIT%' 
          AND ( UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% IBL UB Billing Retur %'  or UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% MR %' )
      THEN
         'CREDIT' 
      WHEN
         (
            UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% CREDIT %' 
            OR UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% CASH %' 
         )
         AND UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% MR %' 
      THEN
         'MR' 
      ELSE
         UPPER(ISDM.SALES_ORDER_TYPE) 
   END
   BILL_TYPE , CUSTOMER_ID ,REASON_CODE,customer_trx_id,
   SUM(GROSS)GROSS

   , SUM(ISDM.CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT , SUM(ISDM.UNCLAIMABLE_DISCOUNT)UNCLAIMABLE_DISCOUNT , SUM(ISDM.TAX_RECOVERABLE)TAX , SUM(GROSS) + SUM(ISDM.CLAIMABLE_DISCOUNT) + SUM(ISDM.UNCLAIMABLE_DISCOUNT) + SUM(ISDM.TAX_RECOVERABLE) NET 
FROM
   IBL_SALE_DISCOUNT_MIS_VW_BO AS ISDM 
   LEFT OUTER JOIN BO_INVENTORY_ORG_UNIIT AS LOC ON (LOC.ORGANIZATION_ID=ISDM.ORG_ID)
   WHERE 1=1 
   
   AND ISDM.BUSINESS_LINE IN (    'Calibur','Canderel','Corian/DuPont Solid','Future Technologies','Hayat Kimya','LOreal','Lotte Beverages','Ovaltine',
'Pringles','Schick','Spot Free','Twinings'   ) OR ISDM.BUSINESS_LINE LIKE 'Kellogg%'
   --REMOVE FOLLOWING
  -- AND ISDM.TRX_DATE>='2020-07-01'
   --cast( CONCAT(	DATEPART(YYYY,  getdate()  )-1 ,'-07-01') as date)   ---'01-JUL-20' 
   
   GROUP BY
     TRX_DATE,ISDM.ORG_ID,LOC.NAME ,LOC.LOC_,
      ISDM.BUSINESS_LINE_ID,
   ISDM.BUSINESS_LINE ,  
   ITEM_CODE,
   DESCRIPTION,ISDM.BILL_TYPE_DESC,SALES_ORDER_TYPE
   

	, CUSTOMER_ID ,REASON_CODE,customer_trx_id
	) A
	where trx_date>= cast( CONCAT(	DATEPART(YYYY,  getdate()  )-1 ,'-07-01') as date)   ---'01-JUL-20' 
   ;


-- dbo.WH_SALES_ITEMS_DATA_PHARMA source

CREATE view [dbo].[WH_SALES_ITEMS_DATA_PHARMA] AS 
select * from (
SELECT
   wsd.trx_date,
   WSD.first_month,
   wsd.BUSINESS_LINE_ID,
   CASE
      WHEN
         wsd.BUSINESS_LINE_ID IN 
         (
           153
         )
      THEN
         'OTHERS' 
      ELSE
         wsd.BUSLINE_DESC 
   END
   BUSLINE_DESC , 
   case
      WHEN
         WSD.BUSINESS_LINE_ID IN
         (
           153
         )
      THEN
         'OTHERS' 
      ELSE
         WSD.BL 
   END
   BL , wsd.TDIVISION, wsd.item_code , wsd.DESCRIPTION , WSD.BILL_TYPE ,WSD.CUSTOMER_ID, wsd.gross, wsd.CLAIMABLE_DISCOUNT, wsd.UNCLAIMABLE_DISCOUNT , wsd.net , WSD.TARGET 
FROM
   wh_sales_items_data_all wsd 
WHERE
   1 = 1 
  

   AND TDIVISION = 'Pharma' 
   AND WSD.BUSINESS_LINE_ID IN 
   (
   119,	110,	131,	163,	137,	107,	109,	153

   )
   ) a
   where 1=1  AND first_month>=cast( CONCAT(	DATEPART(YYYY,  getdate()  )-1 ,'-07-01') as date)
;


-- dbo.WH_SALES_ITEMS_DATA_PHARMA_BR source

-- WHERE 1=1 AND ISDM.BUSINESS_LINE_ID IN ( 119,	110,	131,	163,	137,	107,	109,	153)
--
CREATE view [dbo].[WH_SALES_ITEMS_DATA_PHARMA_BR] AS
SELECT
TRX_DATE,
FIRST_MONTH,
ORG_ID,
ORG_NAME,
LOC_,
BUSINESS_LINE_ID,
BUSLINE_DESC,
ITEM_CODE,
DESCRIPTION,
BILL_TYPE,
CUSTOMER_ID,
REASON_CODE,
customer_trx_id,
GROSS,
CASE WHEN BILL_TYPE='MR' THEN GROSS*-1 ELSE GROSS END C_GROSS,
CLAIMABLE_DISCOUNT,
UNCLAIMABLE_DISCOUNT,
TAX,
NET

FROM(
SELECT
   TRX_DATE,
   DATEADD(M, DATEDIFF(M, 0, TRX_DATE), 0)FIRST_MONTH,
   ISDM.ORG_ID,
   LOC.NAME ORG_NAME,LOC.LOC_,
   ISDM.BUSINESS_LINE_ID,
   ISDM.BUSINESS_LINE BUSLINE_DESC,
  
   ITEM_CODE,
   DESCRIPTION,
   CASE
      WHEN
         UPPER(ISDM.BILL_TYPE_DESC) LIKE '%CASH%' 
         AND ( UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% IBL UB Billing Retur %'  or UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% MR %' )
      THEN
         'CASH' 
      WHEN
         UPPER(ISDM.BILL_TYPE_DESC) LIKE '%CREDIT%' 
          AND ( UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% IBL UB Billing Retur %'  or UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% MR %' )
      THEN
         'CREDIT' 
      WHEN
         (
            UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% CREDIT %' 
            OR UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% CASH %' 
         )
         AND UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% MR %' 
      THEN
         'MR' 
      ELSE
         UPPER(ISDM.SALES_ORDER_TYPE) 
   END
   BILL_TYPE , CUSTOMER_ID ,REASON_CODE,customer_trx_id,
   SUM(GROSS)GROSS

   , SUM(ISDM.CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT , SUM(ISDM.UNCLAIMABLE_DISCOUNT)UNCLAIMABLE_DISCOUNT , SUM(ISDM.TAX_RECOVERABLE)TAX , SUM(GROSS) + SUM(ISDM.CLAIMABLE_DISCOUNT) + SUM(ISDM.UNCLAIMABLE_DISCOUNT) + SUM(ISDM.TAX_RECOVERABLE) NET 
FROM
   IBL_SALE_DISCOUNT_MIS_VW_BO AS ISDM 
   LEFT OUTER JOIN BO_INVENTORY_ORG_UNIIT AS LOC ON (LOC.ORGANIZATION_ID=ISDM.ORG_ID)
   WHERE 1=1 AND ISDM.BUSINESS_LINE_ID IN ( '119',	'110',	'131',	'163',	'137',	'107',	'109',	'153')
   --REMOVE FOLLOWING
  
   GROUP BY
     TRX_DATE,ISDM.ORG_ID,LOC.NAME ,LOC.LOC_,
      ISDM.BUSINESS_LINE_ID,
   ISDM.BUSINESS_LINE ,  
   ITEM_CODE,
   DESCRIPTION,ISDM.BILL_TYPE_DESC,SALES_ORDER_TYPE
   

	, CUSTOMER_ID ,REASON_CODE,customer_trx_id
	) A
	 where TRX_DATE>=cast( CONCAT(	DATEPART(YYYY,  getdate()  )-1 ,'-07-01') as date)   ---'01-JUL-20' 
   ;


-- dbo.WH_SALES_LEGEBS106 source

/*WHERE        (Gross + claimable_discount + unclaimable_discount + tax_recoverable <> 0)*/
CREATE VIEW [dbo].[WH_SALES_LEGEBS106]
AS
SELECT        UNQ__INV_TYPE, TRX_DATE, MONTH, CUSTOMER_ID, CUSTOMER_NAME, UNQ_CUSTOMER_TRX_ID, REGION, BR_CD, CATEG, LOCATION, div_cd, BL_CD, BOOKER_ID, BOOKER_NAME, SUPPLIER_ID, 
                         SUPPLIER_NAME, CHANNEL, BILL_TYPE, SOURCE, Gross, claimable_discount, unclaimable_discount, tax_recoverable, sold_qty, bonus_qty
FROM            dbo.wh_sales_ebs_106 AS E;


-- dbo.WH_SND_CONS_BR source

CREATE VIEW [dbo].[WH_SND_CONS_BR] AS
SELECT
   ORGINIZATION,
   DIVISION,
   SND_DATE,
   TRANS_TYPE,
   TRANS_VAL 
FROM
   wh_snd_data_pivot AS SND UNPIVOT ( TRANS_VAL FOR TRANS_TYPE in 
   (
      ADV_REMITT_THRO_BANK,
      AMOUNT_ROBBED,
      BAD_DEBTS_CRDT_SALE,
      BAD_DEBTS_CSH_SALE,
      BRGHT_FWD_BAL_BRAN,
      BRGHT_FWD_BAL_CRDT_OUTSTNDG,
      CASH_IN_SAFE_VAULT,
      CASH_REMITTANCES_THRO_BNK,
      CASH_SALE_RETURN_ADJUSTMENT,
      CENTERLIZED_REMIT_THRO_HO,
      CHQ_REMIT_THRO_BANK_CASH,
      CHQ_REMIT_THRO_BANK_CRDT,
      CHQ_RETURN_BOUNCE,
      CHQ_UNER_CLEARING_ADVANCE,
      CHQ_UNER_CLEARING_CASH_SALE,
      CHQ_UNER_CLEARING_CRDT_SALE,
      CREDIT_SALE_RETURN_ADJUSTMENT,
      DD_TC_PO_CHQ_IN_HAND,
      DD_TC_PO_REMT_THRO_BNK_CSH_SAL,
      DETAIL_OF_REMAING_BAL_CASH,
      DIFFERENCE_BW_BAL_AND_DETAIL,
      IMPREST_RECVED_FROM_HO_CRDT,
      IMPREST_RECVED_FROM_HO_CSH,
      INSURANCE_CLAIM_CSH_SALE,
      INSURANCE_CRDT_SALE,
      LESS_ADVANCE_FROM_CUSTOERS,
      NET_SDR_SHORTAGE,
      REMAING_BAL_HELD_AT_MARKT_CRDT,
      SALES_AGAINST_ADVANCE,
      SD_SALES_RETURN_ADJUTMENT,
      TODAYS_BANK_PENALTY,
      TODAYS_CASH_SALES,
      TODAYS_COLL_CASH_SALES,
      TODAYS_COLL_CREDIT_RECIVABLE,
      TODAYS_CREDIT_SALES,
      TODAYS_TOTAL_COLLECTION,
      TODAYS_TOTAL_SALES,
      TODAYS_TOT_REMITTANCE,
      TODAY_TOT_ADJSMNT_ADVI_CRD_SAL,
      TODAY_TOT_ADJSMT_ADVIC_CSH_SAL,
      TODAY_TOT_FUND_TRANSFER,
      TOT_BAL_BRGHT_CASH_CRDT,
      TOT_BAL_CARIED_FWD_CRD_CASH,
      TOT_BAL_TRANSFERED_CASH,
      TOT_BAL_TRANSFERED_CRDT,
      TOT_BAL_TRANSF_CSH_CRDT,
      TO_DATE_DUE_RECIVABLE,
      TO_DATE_NOT_YET_DUE_RECIVABLE,
      WITHOLNG_TAX_ADJSMENT_CRDT_SAL,
      WITHOLNG_TAX_ADJSMENT_CSH_SAL 
   )
) AS DATAUNPIVOT
where 1=1 and SND_DATE>='01-JUL-20'
;


-- dbo.aabb source

CREATE view aabb
as 
select 
max(aging_date)aging_date,
description,
sum(net_balance)balance
from          BO_CUSTOMER_AGING_NEW BCAN 
where 1=1
and aging_date=(select max(aging_date) from BO_CUSTOMER_AGING_NEW)
---and bcan.description='Loreal'
group by description
 --HAVING max(aging_date)=[dbo].[aging_maxdate]()

 ;


-- dbo.dc_not_rcv source

CREATE view [dbo].[dc_not_rcv] as
SELECT
BEDN.ORGANIZATION_ID
,BEDN.ORG_DESC
,BEDN.DC_DATE
,BEDN.DC_NUMBER
,BEDN.ORGANIZATION_ID          SOURCE_ORG_ID
,BEDN.ORG_DESC                 SOURCE_ORG_DESC
,BEDN.TRANSFER_ORGANIZATION_ID
,BEDN.RECEIVE_BR_DES
,BEDN.INVENTORY_ITEM_ID
,MSIB.DESCRIPTION              ITEM_DESC
,BEDN.QTY
,BEDN.TRANS_VALUE
,BEDN.TRANSPORTER
,BEDN.AWB_TR_NUMBER
,BEDN.AWB_TR_DATE
,BEDN.DIV_CD
,BEDN.DIV_DES
FROM   BO_EBS_DC_NOT_RECEIVED BEDN
LEFT   JOIN MTL_SYSTEM_ITEMS MSIB
ON     (BEDN.ORGANIZATION_ID = MSIB.ORGANIZATION_ID AND
                     BEDN.INVENTORY_ITEM_ID = MSIB.INVENTORY_ITEM_ID)
WHERE  1 = 1         
/*
AND    NOT EXISTS
(SELECT 1
                           FROM   BO_EBS_DC_RCV BEDR
                           WHERE  1 = 1
                           AND    BEDR.SHIPMENT_NUMBER = BEDN.SHIPMENT_NUMBER
                           AND    BEDR.INVENTORY_ITEM_ID = BEDN.INVENTORY_ITEM_ID)
						   */
						   ;


-- dbo.dfl_backdated_snd_crnt_year source

CREATE view [dbo].[dfl_backdated_snd_crnt_year] AS
select * from BO_EBS_SND bes where 1=1 and snd_date>=
                     DATEADD(DAY, -30, EOMONTH(DATEADD(MONTH, -12, GETDATE())));


-- dbo.dfl_booking_vs_exec_crnt_year source

CREATE view [dbo].[dfl_booking_vs_exec_crnt_year] AS
select * from EBS_BOOKING_VS_EXECUTION ebve where 1=1 and ORDER_DATE_BOOK>= 
                     DATEADD(DAY, -30, EOMONTH(DATEADD(MONTH, -12, GETDATE())));


-- dbo.dfl_booking_vs_execution_bill_crnt_year source

CREATE view [dbo].[dfl_booking_vs_execution_bill_crnt_year] AS
select * from BO_BOOKING_EXECUTION bbe where 1=1 and bbe.ORDERED_DATE>=
                     DATEADD(DAY, -30, EOMONTH(DATEADD(MONTH, -12, GETDATE())));


-- dbo.dfl_dc_not_received_crnt_year source

CREATE view [dbo].[dfl_dc_not_received_crnt_year] AS
select * from dc_not_rcv dnr where 1=1 and  dc_date >=
                     DATEADD(DAY, -30, EOMONTH(DATEADD(MONTH, -12, GETDATE())));


-- dbo.dfl_redbull_crnt_year source

CREATE view [dbo].[dfl_redbull_crnt_year] AS
select * from BO_REDBULL brb where 1=1 and DEVLIVERY_DATE>=
                     DATEADD(DAY, -30, EOMONTH(DATEADD(MONTH, -12, GETDATE())));


-- dbo.dfl_sales_crnt_year source

CREATE VIEW [dbo].[dfl_sales_crnt_year]
AS
SELECT        ISDM.ORG_ID,
 BIO.NAME AS ORG_DESCRIPTION,
ISDM.TRX_DATE AS INVOICE_DATE,
ISDM.TRX_NUMBER AS INVOICE_NUMBER,

ISDM.BOOKER_ID, ISDM.BOOKER_NAME, ISDM.SUPPLIER_ID, 
                         ISDM.SUPPLIER_NAME, ISDM.BUSINESS_LINE_ID, ISDM.BUSINESS_LINE, ISDM.CHANNEL, ISDM.CUSTOMER_ID, ISDM.CUSTOMER_NAME, ISDM.CUSTOMER_NUMBER,
						becl.ADDRESS1 AS Customer_Address,
                          ISDM.SALES_ORDER_TYPE, ISDM.ITEM_CODE, ISDM.DESCRIPTION AS ITEM_DESC, ISDM.UNIT_SELLING_PRICE, ISDM.SOLD_QTY, ISDM.BONUS_QTY
						  , ISDM.CLAIMABLE_DISCOUNT, 
                         ISDM.UNCLAIMABLE_DISCOUNT, ISDM.TAX_RECOVERABLE, ISDM.GROSS_AMOUNT GROSS, ISDM.REASON_CODE


FROM            dbo.IBL_SALE_DISCOUNT_MIS_VW_BO AS ISDM 
				
				LEFT OUTER JOIN    dbo.BO_INVENTORY_ORG_UNIIT AS BIO ON ( 
																			CAST(ISDM.ORG_ID  AS varchar(100))=CAST(BIO.ORGANIZATION_ID AS VARCHAR(100))
																		)
				LEFT OUTER JOIN    dbo.BO_EBS_CUSTOMER_LIST AS becl ON (
																				CAST(ISDM.CUSTOMER_ID AS VARCHAR(100)) = CAST(becl.CUSTOMER_ID AS VARCHAR(100))
																			)
					
WHERE        (1 = 1) AND (ISDM.TRX_DATE >= DATEADD(month, DATEDIFF(month, 0, GETDATE()) - 12, 0));


-- dbo.dfl_sales_crnt_year_Old source

CREATE  VIEW [dbo].[dfl_sales_crnt_year_NEW]
AS
SELECT
   ISDM.ORG_ID,
   ISDM.TRX_DATE AS INVOICE_DATE,
   ISDM.TRX_NUMBER AS INVOICE_NUMBER,
   ISDM.BOOKER_ID,
   ISDM.SUPPLIER_ID,
   ISDM.BUSINESS_LINE_ID,
   ISDM.CHANNEL,
   ISDM.CUSTOMER_ID,
   ISDM.CUSTOMER_NUMBER,
   ISDM.SALES_ORDER_TYPE,
   ISDM.ITEM_CODE,
   ISDM.UNIT_SELLING_PRICE,
   ISDM.SOLD_QTY,
   ISDM.BONUS_QTY,
   ISDM.CLAIMABLE_DISCOUNT,
   ISDM.UNCLAIMABLE_DISCOUNT,
   ISDM.TAX_RECOVERABLE,
   ISDM.GROSS,
   ISDM.REASON_CODE 
FROM
   dbo.IBL_SALE_DISCOUNT_MIS_VW_BO AS ISDM 
   LEFT OUTER JOIN
      dbo.BO_INVENTORY_ORG_UNIIT AS BIO 
      ON ISDM.ORG_ID = BIO.ORGANIZATION_ID 
   LEFT OUTER JOIN
      dbo.BO_EBS_CUSTOMER_LIST AS becl 
      ON ISDM.CUSTOMER_ID = becl.CUSTOMER_ID 
WHERE
   (
      1 = 1
   )
   --AND ISDM.TRX_DATE>='01-JUL-20'
   AND 
   (
      ISDM.TRX_DATE >= DATEADD(DAY, - 30, EOMONTH(DATEADD(MONTH, - 12, GETDATE())))
   );


-- dbo.dfl_stock_rcv_principal_crnt_year source

CREATE view [dbo].[dfl_stock_rcv_principal_crnt_year] AS
SELECT SHIP_TO_LOCATION_ID
                     ,SHIP_TO_LOCATION_CODE
                     ,ORGANIZATION_ID
                     ,ORGANIZATION_NAME
                     ,TRANSACTION_DATE
                     ,EXPIRATION_DATE
                     ,LOT_NUMBER
                     ,PRINCIPAL_DC_NO
                     ,PRINCIPAL_DC_DATE
                     ,TRANSPORTER
                     ,TRANSPORTER_TYPE
                     ,TRANSPORTER_REG_NO
                     ,AWV_RR_TR_NO
                     ,AWV_RR_TR_DATE
                     ,RECEIVED_BY
                     ,INSPECTED_BY
                     ,LOCATOR_ID
                     ,LOCATOR_CODE
                     ,GRN_NO
                     ,TRANS_DATE
                     ,BUS_LINE
                     ,ITEM_CODE
                     ,DESCRIPTION
                     ,SUPPLIER_CODE
                     ,SUPPLIER
                     ,COST_CENTER
                     ,PO_NUM
                     ,REQ_ID
                     ,QTY
                     ,UOM_CODE
                     ,PRICE
                     ,SUB_INV
                     ,AMOUNT
                     ,REMARKS
                     ,OPERATING_UNIT_NAME
                     ,CARTON
                     ,UNIT
                     ,NOTE_TO_VENDOR
FROM   IBL_BO_STOCK_RCV IBSR
WHERE  1 = 1
AND    TRANS_DATE >=
                     DATEADD(DAY, -30, EOMONTH(DATEADD(MONTH, -12, GETDATE())));


-- dbo.live_inv source

CREATE view [dbo].[live_inv]
as 
SELECT        *
FROM            EBS_ONHAND_STOCK;


-- dbo.pbi_order_replenishment source

CREATE view [dbo].[pbi_order_replenishment] as
select 
cast(trx_date as date)trx_date,business_line_id,business_line,item_code
,SUBSTRING(item_code,5,6) item_code1,description item_desc
,sum(sold_qty)qty,sum(gross)gross
 from IBL_SALE_DISCOUNT_MIS_VW_BO a 
 WHERE 1=1 
 
 group by 
 cast(trx_date as date) ,business_line_id,business_line,item_code,SUBSTRING(item_code,5,6) ,description 
  having sum(sold_qty)>0
  ;


-- dbo.phnx_book_vs_exec source

CREATE view [dbo].[phnx_book_vs_exec] as
SELECT
DISTINCT 
	COMPANY_CODE,
	ORG_ID,
	ORG_DESC,
	SALES_ORDER_NO,
	SALESFLO_ORDER,
	ORDER_DATE,
	DELIVERY_DATE,
	CUSTOMER_NUMBER,
	CUSTOMER_NAME,
	BOOKER_ID,
	BOOKER_NAME,
	SUPPLIER_ID,
	SUPPLIER_NAME,
	BUSINESS_LINE_ID,
	BUSLINE_DESC,
	
	SUM(EXECUTION)EXECUTION,
	SUM(Cancelled)Cancelled,
	SUM([Returns])[Returns],
	SUM(ORDER_UNITS)ORDER_UNITS,
	SUM(ORDER_AMOUNT)ORDER_AMOUNT,
	SUM(GROSS_AMOUNT)GROSS_AMOUNT,
	SUM(delivered_qty)delivered_qty,
	
	STATUS
	--SALES_ORDER_TYPE
FROM
	(
	SELECT
		DISTINCT 
         PSD.COMPANY_CODE,
		PSD.ORG_ID,
		PSD.ORG_DESC,
		PSD.SALES_ORDER_NO,
		PSD.SALESFLO_ORDER,
		---  BSTKD,
		PSD.ORDER_DATE ORDER_DATE,
		PSD.BILLING_DATE DELIVERY_DATE,
		CUSTOMER_NUMBER,
		CUSTOMER_NAME,
		BOOKER_ID,
		BOOKER_NAME,
		PSD.SUPPLIER_ID,
		SUPPLIER_NAME,
		PSD.BUSINESS_LINE_ID,
		PSD.BUSLINE_DESC,
		--- SUM(PSD.ORDER_AMOUNT)BOOKING,        
         
		isnull(
		CASE
			WHEN
               SALES_ORDER_TYPE NOT IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
                  'Cancel of Cred Memo',
                  'UB Cancel. Invoice',
                  'UB-Cancel Cred Memo' ,
                  'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN
               SUM(PSD.GROSS_AMOUNT)
		END
,
		0 ) EXECUTION,
		isnull(
		CASE
			WHEN
               SALES_ORDER_TYPE IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
                  'Cancel of Cred Memo',
                  'UB Cancel. Invoice',
                  'UB-Cancel Cred Memo' 
               )
            THEN
               SUM(PSD.GROSS_AMOUNT)
		END
,
		0 ) Cancelled ,
		isnull(
		CASE
			WHEN
               SALES_ORDER_TYPE IN 
               (
                  'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN
               SUM(PSD.GROSS_AMOUNT)
		END
,
		0 ) Returns ,
		--SUM(PSD.ORDER_UNITS)ORDER_UNITS,
		CASE
			WHEN
               SALES_ORDER_TYPE IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
			--  'Cancel of Cred Memo',
                 'UB Cancel. Invoice',
			'UB-Cancel Cred Memo' ,
                  'OPS-Sales Returns', 'IBL UB Billing Retur' , 'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN 
            0
			ELSE
               SUM(PSD.ORDER_UNITS)
		END ORDER_UNITS,
		CASE
			WHEN
               SALES_ORDER_TYPE IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
			--  'Cancel of Cred Memo',
                 'UB Cancel. Invoice',
			'UB-Cancel Cred Memo' ,
                  'OPS-Sales Returns', 'IBL UB Billing Retur' , 'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN 
            0
			ELSE
               SUM(PSD.ORDER_AMOUNT)
		END      
         
  ORDER_AMOUNT,
		--SUM(PSD.ORDER_AMOUNT)ORDER_AMOUNT,
         
		SUM(PSD.GROSS_AMOUNT)GROSS_AMOUNT ,
		sum(delivered_qty)delivered_qty,
		PSD.STATUS,
		PSD.SALES_ORDER_TYPE
	FROM
		PHNX_BOOKING_VS_EXECUTION_DETAIL_DATA AS PSD
	WHERE
		1 = 1
	GROUP BY
		PSD.SALES_ORDER_NO,
		PSD.ORDER_DATE,
		PSD.BILLING_DATE , 
		CUSTOMER_NUMBER ,
		CUSTOMER_NAME , 
		BOOKER_ID ,
		BOOKER_NAME , 
		SUPPLIER_ID , 
		SUPPLIER_NAME , 
		PSD.BUSINESS_LINE_ID , 
		BUSLINE_DESC , 
		SALES_ORDER_TYPE,
		PSD.STATUS,
		PSD.ORG_ID ,
		PSD.ORG_DESC ,
		PSD.COMPANY_CODE,
		PSD.SALESFLO_ORDER,
		PSD.SALES_ORDER_TYPE     
		
         )A
WHERE
	1 = 1
	---AND order_date = '02-FEB-22'
	AND COMPANY_CODE = 6100
--and 	ORDER_AMOUNT<>0
	--AND SALESFLO_ORDER = 'D0003ORD4485'
	
	GROUP 	BY
	COMPANY_CODE,
	ORG_ID,
	ORG_DESC,
	SALES_ORDER_NO,
	SALESFLO_ORDER,
	ORDER_DATE,
	DELIVERY_DATE,
	CUSTOMER_NUMBER,
	CUSTOMER_NAME,
	BOOKER_ID,
	BOOKER_NAME,
	SUPPLIER_ID,
	SUPPLIER_NAME,
	BUSINESS_LINE_ID,
	BUSLINE_DESC,	
	STATUS
	--SALES_ORDER_TYPE
	;
	--where ORDER_AMOUNT<>0
	---;


-- dbo.phnx_book_vs_exec1 source

CREATE view [dbo].[phnx_book_vs_exec1] as
SELECT
DISTINCT
   COMPANY_CODE,
   ORG_ID,
   ORG_DESC,
   SALES_ORDER_NO ,
    SALESFLO_ORDER,
  --  BSTKD,
   ORDER_DATE,
   DELIVERY_DATE,
   CUSTOMER_NUMBER,
   CUSTOMER_NAME,
   BOOKER_ID,
   BOOKER_NAME,
   SUPPLIER_ID,
   SUPPLIER_NAME,
   BUSINESS_LINE_ID,
   BUSLINE_DESC ,
  ORDER_AMOUNT AS   BOOKING,
   ---BOOKING-Cancelled-RETURNS
  ORDER_AMOUNT-ABS((RETURNS-Cancelled)) EXECUTION,
   --EXECUTION,
  ORDER_AMOUNT-(ORDER_AMOUNT-ABS((RETURNS-Cancelled))) LOSS_VALUE,
  (ORDER_AMOUNT)-(EXECUTION+(RETURNS-Cancelled)) SALESFLO_DROP_VALUE,
  
   
   Cancelled,
   [Returns] ,
    ORDER_UNITS,
   ORDER_AMOUNT,
   GROSS_AMOUNT,
    delivered_qty,
   STATUS,
   SALES_ORDER_TYPE
FROM
   (
      SELECT
      DISTINCT 
         PSD.COMPANY_CODE,
         PSD.ORG_ID,
         PSD.ORG_DESC,
         PSD.SALES_ORDER_NO,
         PSD.SALESFLO_ORDER,
       ---  BSTKD,
		 PSD.ORDER_DATE ORDER_DATE,
         PSD.BILLING_DATE DELIVERY_DATE,
         CUSTOMER_NUMBER,
         CUSTOMER_NAME,
         BOOKER_ID,
         BOOKER_NAME,
         PSD.SUPPLIER_ID,
         SUPPLIER_NAME,
         PSD.BUSINESS_LINE_ID,
         PSD.BUSLINE_DESC,
        --- SUM(PSD.ORDER_AMOUNT)BOOKING,        
         
           isnull( 
         CASE
            WHEN
               SALES_ORDER_TYPE NOT IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
                  'Cancel of Cred Memo',
                  'UB Cancel. Invoice',
                  'UB-Cancel Cred Memo' ,
                  'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN
               SUM(PSD.GROSS_AMOUNT) 
         END
, 0 )   EXECUTION,

         isnull( 
         CASE
            WHEN
               SALES_ORDER_TYPE IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
                  'Cancel of Cred Memo',
                  'UB Cancel. Invoice',
                  'UB-Cancel Cred Memo' 
               )
            THEN
               SUM(PSD.GROSS_AMOUNT) 
         END
, 0 ) Cancelled , isnull( 
         CASE
            WHEN
               SALES_ORDER_TYPE IN 
               (
                  'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN
               SUM(PSD.GROSS_AMOUNT) 
         END
, 0 ) Returns ,
	
SUM(PSD.ORDER_UNITS)ORDER_UNITS,
      
CASE
            WHEN
               SALES_ORDER_TYPE  IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
                --  'Cancel of Cred Memo',
                 -- 'UB Cancel. Invoice',
                 -- 'UB-Cancel Cred Memo' ,
                  'OPS-Sales Returns', 'IBL UB Billing Retur' ,'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN 0
            ELSE
              
            SUM(PSD.ORDER_AMOUNT) 
         
         END     
         
  ORDER_AMOUNT,
  
	--SUM(PSD.ORDER_AMOUNT)ORDER_AMOUNT,
         
SUM(PSD.GROSS_AMOUNT)GROSS_AMOUNT , 
sum(delivered_qty)delivered_qty,
PSD.STATUS,
PSD.SALES_ORDER_TYPE

      FROM
         PHNX_BOOKING_VS_EXECUTION_DETAIL_DATA AS PSD 
      WHERE
         1 = 1 
      GROUP BY
         PSD.SALES_ORDER_NO,
         PSD.ORDER_DATE,
		PSD.BILLING_DATE , 
		CUSTOMER_NUMBER ,
		CUSTOMER_NAME , 
		BOOKER_ID ,
		BOOKER_NAME , 
		SUPPLIER_ID , 
		SUPPLIER_NAME , 
		PSD.BUSINESS_LINE_ID , 
		BUSLINE_DESC , 
		SALES_ORDER_TYPE,
         PSD.STATUS,
 PSD.ORG_ID , 
 PSD.ORG_DESC , 
 PSD.COMPANY_CODE,
         PSD.SALESFLO_ORDER,
         PSD.SALES_ORDER_TYPE
         
         --,BSTKD
	) 
	
	A
	where ORDER_AMOUNT<>0
	;


-- dbo.phnx_test_data source

create view phnx_test_data as
select a.*,b.* from 
(SELECT OI.*,VD.BSTKD,vd.MATNR,vd.VBELN
FROM VBKD_DATA VD,ORDER_INFO OI
WHERE OI.ORDER_NUMBER=VD.BSTKD AND OI.SAP_SKU_CODE=VD.MATNR
--AND VBELN='3900230470'
) a,
(select * from PHNX_SALES_DATA psd 
---where psd.SALES_ORDER_NO='3900230470'
) b
where a.VBELN=b.sales_order_no and SUBSTRING(b.ITEM_CODE,9,30)=a.matnr
;


-- dbo.productivity_report_ra source

CREATE VIEW dbo.productivity_report_ra
AS
SELECT        br_cd, LOCATION, CATEG, REGION, Div_cd, NULL AS DIV_DES, '(' + ISNULL(br_cd, '') + ')' + ISNULL(BOOKER_ID, '') AS BOOKER_ID, TRX_DATE, TRX_NUMBER, UNQ, SUM(Sales) AS Sales, BL, BL_CD, BL_DES, 
                         BL_ID, BL_DES2, TSO_DIV, TSO_Name, DAY(TRX_DATE) AS Date, Source
FROM            (SELECT        vw.br_cd, vw.LOCATION, vw.CATEG, vw.REGION, vw.Div_cd, vw.Div_Des, vw.BOOKER_ID, vw.TRX_DATE, vw.TRX_NUMBER, vw.UNQ, SUM(vw.Sales) AS Sales, wt.DIV_CD AS BL, vw.BL_CD, 
                                                    vw.BL_DES, vw.BL_ID, '' AS BL_DES2, vw.TSO_DIV, vw.Source, vw.TSO_Name, '' AS type
                          FROM            dbo.wh_ra_sales_vw AS vw INNER JOIN
                                                    dbo.wh_ra_tso_pha_feh_tbl AS wt ON vw.br_cd = wt.BR_CD AND vw.BOOKER_ID = wt.TSO_CODE
                          WHERE        (vw.TRX_DATE BETWEEN DATEADD(mm, DATEDIFF(mm, 0, GETDATE()) - 12, 0) AND CONVERT(date, GETDATE() - 1)) AND (wt.TYPE = 'OK')
                          GROUP BY vw.br_cd, vw.LOCATION, vw.CATEG, vw.REGION, vw.Div_cd, vw.Div_Des, vw.BOOKER_ID, vw.TRX_DATE, vw.TRX_NUMBER, vw.UNQ, wt.DIV_CD, vw.BL_CD, vw.BL_DES, vw.BL_ID, vw.TSO_DIV, 
                                                    vw.Source, vw.TSO_Name
                          HAVING         (SUM(vw.Sales) > 0)) AS tt
GROUP BY br_cd, LOCATION, CATEG, REGION, Div_cd, '(' + ISNULL(br_cd, '') + ')' + ISNULL(BOOKER_ID, ''), TRX_DATE, TRX_NUMBER, UNQ, BL, BL_CD, BL_DES, BL_ID, BL_DES2, TSO_DIV, Source, TSO_Name, 
                         DAY(TRX_DATE);


-- dbo.productivity_report_ra_2202119 source

CREATE view productivity_report_ra as 
SELECT BR_CD, LOCATION, CATEG, REGION, DIV_CD, case DIV_DES when 'Pharmaceuticals Division' then 'Pharma' else div_des end DIV_DES, '('+ISNULL(BR_CD, '')+')'+ISNULL(BOOKER_ID, '') BOOKER_ID, TRX_DATE, TRX_NUMBER,UNQ, sum(Sales)  Sales,
       BL, BL_CD, BL_DES, BL_ID, BL_DES2, TSO_DIV, TSO_Name, day(trx_date) "Date",   Source FROM
       (
select vw.BR_CD, vw.LOCATION, vw.CATEG, vw.REGION, vw.DIV_CD, vw.DIV_DES, vw.BOOKER_ID, vw.TRX_DATE, vw.TRX_NUMBER,vw.UNQ, sum(vw.Sales)  Sales,
        wt.div_cd BL , vw.BL_CD, vw.BL_DES, vw.BL_ID,  '' BL_DES2, VW.TSO_DIV,  VW.Source, VW.TSO_Name, '' type
from wh_ra_sales_vw vw,   wh_ra_tso_pha_FEH wt
where vw.TRX_DATE between DATEADD(DAY, 1, EOMONTH(getdate(), -1)) and convert(date, getdate()-1) --'01-NOV-2018' and '30-NOV-2018' --
 
and vw.BR_CD = wt.BR_CD 
and vw.BOOKER_ID = wt.TSO_CODE 
 
and wt.TYPE = 'OK'
 
group by vw.BR_CD, vw.LOCATION, vw.CATEG, vw.REGION, vw.DIV_CD, vw.DIV_DES, vw.BOOKER_ID, vw.TRX_DATE, vw.TRX_NUMBER, vw.UNQ, 
          wt.DIV_CD, vw.BL_CD, vw.BL_DES,  vw.BL_ID,  VW.TSO_DIV, VW.Source, VW.TSO_Name 
having sum(sales)>0
) tt 
GROUP BY BR_CD, LOCATION, CATEG, REGION, DIV_CD, case DIV_DES when 'Pharmaceuticals Division' then 'Pharma' else div_des end, '('+ISNULL(BR_CD, '')+')'+ISNULL(BOOKER_ID, ''),TRX_DATE, TRX_NUMBER,UNQ, 
       BL, BL_CD, BL_DES, BL_ID, BL_DES2, TSO_DIV,  Source, TSO_Name,day(trx_date);


-- dbo.productivity_report_ra_250219 source

CREATE VIEW [dbo].[productivity_report_ra_250219]
AS
SELECT        br_cd, LOCATION, CATEG, REGION, Div_cd, NULL AS DIV_DES, '(' + ISNULL(br_cd, '') + ')' + ISNULL(BOOKER_ID, '') AS BOOKER_ID, TRX_DATE, TRX_NUMBER, UNQ, SUM(Sales) AS Sales, BL, BL_CD, BL_DES, 
                         BL_ID, BL_DES2, TSO_DIV, TSO_Name, DAY(TRX_DATE) AS Date, Source
FROM            (SELECT        vw.br_cd, vw.LOCATION, vw.CATEG, vw.REGION, vw.Div_cd, vw.Div_Des, vw.BOOKER_ID, vw.TRX_DATE, vw.TRX_NUMBER, vw.UNQ, SUM(vw.Sales) AS Sales, wt.DIV_CD AS BL, vw.BL_CD, 
                                                    vw.BL_DES, vw.BL_ID, '' AS BL_DES2, vw.TSO_DIV, vw.Source, vw.TSO_Name, '' AS type
                          FROM            dbo.wh_ra_sales_vw AS vw INNER JOIN
                                                    dbo.wh_ra_tso_pha_feh AS wt ON vw.br_cd = wt.BR_CD AND vw.BOOKER_ID = wt.TSO_CODE
                          WHERE        (vw.TRX_DATE BETWEEN '01-JUL-2018  00:00:00.000' AND CONVERT(date, GETDATE() - 1)) AND (wt.TYPE = 'OK')
                          GROUP BY vw.br_cd, vw.LOCATION, vw.CATEG, vw.REGION, vw.Div_cd, vw.Div_Des, vw.BOOKER_ID, vw.TRX_DATE, vw.TRX_NUMBER, vw.UNQ, wt.DIV_CD, vw.BL_CD, vw.BL_DES, vw.BL_ID, vw.TSO_DIV, 
                                                    vw.Source, vw.TSO_Name
                          HAVING         (SUM(vw.Sales) > 0)) AS tt
GROUP BY br_cd, LOCATION, CATEG, REGION, Div_cd, '(' + ISNULL(br_cd, '') + ')' + ISNULL(BOOKER_ID, ''), TRX_DATE, TRX_NUMBER, UNQ, BL, BL_CD, BL_DES, BL_ID, BL_DES2, TSO_DIV, Source, TSO_Name, 
                         DAY(TRX_DATE);


-- dbo.sales_suhail_work source

create view sales_suhail_work as
SELECT * FROM IBL_SALE_DISCOUNT_MIS_VW_BO WHERE
1=1 and trx_date>='01-jan-16' 
and ORG_ID IN (224,226,255);


-- dbo.salman_data source

create view salman_data as
 SELECT
    ST.ITEM_CODE,
    ST.ITEM_DESC,
    ST.ORG_ID,
    ST.ORG_DESC,
    ST.CHANNEL_DESC
    ,ST.BILLING_DATE
    ,sum(ST.QUANTITY)QUANTITY
    ,sum(ST.AMOUNT)AMOUNT 
    FROM SEARLE_SALES ST
    WHERE 1=1 and billing_date>='03-jan-22'
    --{vStartDate}
GROUP  BY 
    ST.ITEM_CODE,
    ST.ITEM_DESC,
    ST.ORG_ID,
    ST.ORG_DESC,
    ST.CHANNEL_DESC
    ,ST.BILLING_DATE;


-- dbo.sas_mrep_data source

CREATE VIEW sas_mrep_data AS
select 
CONCAT(TRX_NUMBER,TRX_DATE,ITEM_CODE) IND,
BR_CD,
        TRX_NUMBER AS BILL_NO,
        TRX_DATE AS BILL_DT        ,
        CUSTOMER_NUMBER AS EBS_CUST,
        CUSTOMER_NAME AS CUSTOMER_NAME        ,
        CONCAT(ADD1,' ',ADD2,' ',ADD3)ADDRESS ,
     CHANNEL AS CH_CD,
        ITEM_CODE AS ITEM_CODE,
        DESCRIPTION AS description,
        ' '   AS BATCH_NO,
        --MEASURE        
        unit_selling_price AS price        ,
        SUM(sold_qty) AS SOLD_QTY,
        SUM(BONUS_QTY) AS BON_QTY,
        SUM(DISCOUNT) AS disc_amt,
        SUM(NET_AMT) AS NET_amt,
        SUM(GROSS_VALUE) AS GROSS_VALUE,
        SUM(DISCOUNTED_RATE) AS discounted_rate        ,
        case when esa.SALES_ORDER_TYPE = 'Bill Near Exp Sales'
        then 'Near Expiry'
        when esa.SALES_ORDER_TYPE in ('Cancel Bill NE Sales',
            'OPS Cancel. Invoice', 'OPS-Cancel Cred Memo') then 'Cancel'
        when esa.SALES_ORDER_TYPE = 'OPS Sales Tax Cash'
        then 'Sale'
        when esa.SALES_ORDER_TYPE = 'OPS-Sales Returns'
        then 'Return'
        end as reason 
        ,' 'BrickCode
        ,' 'BrickName
        from EBS_SAS_ALL_LOC_DATA_NEW ESA
        where 1 = 1 
    and trx_date between '02-Feb-22' and '05-feb-22' 
        --AND TRX_NUMBER ='1720000010'
        ---and AND trx_date>={vStartDate}
        GROUP BY 
        CONCAT(TRX_NUMBER,TRX_DATE,ITEM_CODE) ,
        BR_CD,
        TRX_NUMBER,
        TRX_DATE      ,
        CUSTOMER_NUMBER,
        CUSTOMER_NAME,
        ESA.UNIT_SELLING_PRICE,
        SALES_ORDER_TYPE,
         CONCAT(ADD1,' ',ADD2,' ',ADD3) ,
        CHANNEL,
        ITEM_CODE,
        DESCRIPTION;


-- dbo.test_phnx source

CREATE view test_phnx as
select  DOCUMENT_NO ,count(*)count
--sum(AMOUNT)AMOUNT,sum(QUANTITY) QUANTITY,sum(GROSS_AMOUNT)GROSS_AMOUNT,sum(UNCLAIM_BONUS_QUANTITY)UNCLAIM_BONUS_QUANTITY,sum(CLAIM_BONUS_QUANTITY)CLAIM_BONUS_QUANTITY,
--sum(CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT,sum(UNCLAIMABLE_DISCOUNT) UNCLAIMABLE_DISCOUNT,
--sum(TAX_RECOVERABLE)TAX_RECOVERABLE,sum(UNIT_SELLING_PRICE) UNIT_SELLING_PRICE 
from PHNX_SALES_DETAIL_DATA psdd 
where LOADING_DATE  ='26-mar-2022'-- and document_no <>'2300287855'
group by DOCUMENT_NO;


-- dbo.test_sales_view source

create view test_sales_view as
SELECT
	COMPANY_CODE,
	ORG_ID,
	ORG_DESC,
	SALES_ORDER_NO,
	SALESFLO_ORDER,
	ORDER_DATE,
	DELIVERY_DATE,
	CUSTOMER_NUMBER,
	CUSTOMER_NAME,
	BOOKER_ID,
	BOOKER_NAME,
	SUPPLIER_ID,
	SUPPLIER_NAME,
	BUSINESS_LINE_ID,
	BUSLINE_DESC,
	
	SUM(EXECUTION)EXECUTION,
	SUM(Cancelled)Cancelled,
	SUM([Returns])[Returns],
	SUM(ORDER_UNITS)ORDER_UNITS,
	SUM(ORDER_AMOUNT)ORDER_AMOUNT,
	SUM(GROSS_AMOUNT)GROSS_AMOUNT,
	SUM(delivered_qty)delivered_qty,
	
	STATUS
	--SALES_ORDER_TYPE
FROM
	(
	SELECT
		DISTINCT 
         PSD.COMPANY_CODE,
		PSD.ORG_ID,
		PSD.ORG_DESC,
		PSD.SALES_ORDER_NO,
		PSD.SALESFLO_ORDER,
		---  BSTKD,
		PSD.ORDER_DATE ORDER_DATE,
		PSD.BILLING_DATE DELIVERY_DATE,
		CUSTOMER_NUMBER,
		CUSTOMER_NAME,
		BOOKER_ID,
		BOOKER_NAME,
		PSD.SUPPLIER_ID,
		SUPPLIER_NAME,
		PSD.BUSINESS_LINE_ID,
		PSD.BUSLINE_DESC,
		--- SUM(PSD.ORDER_AMOUNT)BOOKING,        
         
		isnull(
		CASE
			WHEN
               SALES_ORDER_TYPE NOT IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
                  'Cancel of Cred Memo',
                  'UB Cancel. Invoice',
                  'UB-Cancel Cred Memo' ,
                  'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN
               SUM(PSD.GROSS_AMOUNT)
		END
,
		0 ) EXECUTION,
		isnull(
		CASE
			WHEN
               SALES_ORDER_TYPE IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
                  'Cancel of Cred Memo',
                  'UB Cancel. Invoice',
                  'UB-Cancel Cred Memo' 
               )
            THEN
               SUM(PSD.GROSS_AMOUNT)
		END
,
		0 ) Cancelled ,
		isnull(
		CASE
			WHEN
               SALES_ORDER_TYPE IN 
               (
                  'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN
               SUM(PSD.GROSS_AMOUNT)
		END
,
		0 ) Returns ,
		--SUM(PSD.ORDER_UNITS)ORDER_UNITS,
		CASE
			WHEN
               SALES_ORDER_TYPE IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
			--  'Cancel of Cred Memo',
                 'UB Cancel. Invoice',
			'UB-Cancel Cred Memo' ,
                  'OPS-Sales Returns', 'IBL UB Billing Retur' , 'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN 
            0
			ELSE
               SUM(PSD.ORDER_UNITS)
		END ORDER_UNITS,
		CASE
			WHEN
               SALES_ORDER_TYPE IN 
               (
                  'Cancel Bill NE Sales',
                  'OPS Cancel. Invoice',
                  'OPS-Cancel Cred Memo',
			--  'Cancel of Cred Memo',
                 'UB Cancel. Invoice',
			'UB-Cancel Cred Memo' ,
                  'OPS-Sales Returns', 'IBL UB Billing Retur' , 'OPS-Sales Returns', 'IBL UB Billing Retur' 
               )
            THEN 
            0
			ELSE
               SUM(PSD.ORDER_AMOUNT)
		END      
         
  ORDER_AMOUNT,
		--SUM(PSD.ORDER_AMOUNT)ORDER_AMOUNT,
         
		SUM(PSD.GROSS_AMOUNT)GROSS_AMOUNT ,
		sum(delivered_qty)delivered_qty,
		PSD.STATUS,
		PSD.SALES_ORDER_TYPE
	FROM
		PHNX_BOOKING_VS_EXECUTION_DETAIL_DATA AS PSD
	WHERE
		1 = 1
	GROUP BY
		PSD.SALES_ORDER_NO,
		PSD.ORDER_DATE,
		PSD.BILLING_DATE , 
		CUSTOMER_NUMBER ,
		CUSTOMER_NAME , 
		BOOKER_ID ,
		BOOKER_NAME , 
		SUPPLIER_ID , 
		SUPPLIER_NAME , 
		PSD.BUSINESS_LINE_ID , 
		BUSLINE_DESC , 
		SALES_ORDER_TYPE,
		PSD.STATUS,
		PSD.ORG_ID ,
		PSD.ORG_DESC ,
		PSD.COMPANY_CODE,
		PSD.SALESFLO_ORDER,
		PSD.SALES_ORDER_TYPE     
		
         )A
WHERE
	1 = 1
	AND order_date = '02-FEB-22'
	AND COMPANY_CODE = 6100
	--AND SALESFLO_ORDER = 'D0001ORD46770'
	
	GROUP 	BY
	COMPANY_CODE,
	ORG_ID,
	ORG_DESC,
	SALES_ORDER_NO,
	SALESFLO_ORDER,
	ORDER_DATE,
	DELIVERY_DATE,
	CUSTOMER_NUMBER,
	CUSTOMER_NAME,
	BOOKER_ID,
	BOOKER_NAME,
	SUPPLIER_ID,
	SUPPLIER_NAME,
	BUSINESS_LINE_ID,
	BUSLINE_DESC,	
	STATUS
	--SALES_ORDER_TYPE;


-- dbo.vw_MaxDate source

CREATE VIEW dbo.vw_MaxDate
AS
SELECT        [RCTLA_ROWID], [TRX_DATE], ROW_NUMBER() OVER (PARTITION BY RCTLA_ROWID
ORDER BY RCTLA_ROWID, [TRX_DATE] ASC) AS Row#
FROM            [IBL_DW].[dbo].[vw_RCTLA DUPLICATE ENTRIES] Q;


-- dbo.vw_Max_Date source

CREATE VIEW dbo.vw_Max_Date
AS
SELECT        RCTLA_ROWID AS rowid, MAX(TRX_DATE) AS maxdate
FROM            dbo.[RCTLA DUPLICATE ENTRIES]
GROUP BY RCTLA_ROWID;


-- dbo.vw_MonthWiseSummary source

--SELECT max([TRX_DATE])  FROM [IBL_DW].[dbo].[wh_rcta_ooha_msi_party_tbl _IBL]
CREATE VIEW [dbo].[vw_MonthWiseSummary]
AS
SELECT        FORMAT(TRX_DATE, 'yyyy-MMM') AS Month, SUM(REVENUE) AS Rev, COUNT(*) AS Records, SUM(UNIT_SELLING_PRICE) AS sumUnitPrice
FROM            dbo.[wh_rcta_ooha_msi_party_tbl _IBL]
GROUP BY FORMAT(TRX_DATE, 'yyyy-MMM');


-- dbo.[vw_RCTLA DUPLICATE ENTRIES] source

/****** Script for SelectTopNRows command from SSMS  ******/
CREATE VIEW dbo.[vw_RCTLA DUPLICATE ENTRIES]
AS
SELECT        RCTA_ROWID, RCTLA_ROWID, ORG_ID, BR_CD, TRX_NUMBER, PREVIOUS_CUSTOMER_TRX_ID, PREVIOUS_CUSTOMER_TRX_LINE_ID, CUSTOMER_TRX_ID, CUSTOMER_TRX_LINE_ID, LINE_NUMBER, 
                         INVENTORY_ITEM_ID, MAIN_SALES_ORDER_NUMBER, PREVIOUS_SALES_ORDER, TRX_DATE, CUST_PO_NUMBER, BUS_LINE_ID, ITEM_CODE, ITEM_DESC, BL_DESC, WAREHOUSE_ID, 
                         SHIP_TO_CUSTOMER_ID, BILL_TO_CUSTOMER_ID, CUSTOMER_ID, CUSTOMER_NUMBER, CUSTOMER_NAME, ADDRESS1, ADDRESS2, ADDRESS3, ADDRESS4, CITY, CNIC_PARTY, CNIC_CUST, NTN, 
                         TAX_REFERENCE, TAX_NAME, CUST_COD_OLD, CUSTOMER_TYPE, SUPPLIER_ID, SUPPLIER_NAME, BOOKER_ID, SALESREP_ID, BOOKER_NAME, REASON_CODE, CH_DESC, BATCH_ID, BATCH_SOURCE_ID, 
                         TERM_ID, COMPLETE_FLAG, INTERFACE_HEADER_CONTEXT, STATUS_TRX, DOC_SEQUENCE_VALUE, DOC_SEQUENCE_VALUE_RCTA, SEGMENT1, SEGMENT1_DESC, SEGMENT2, SEGMENT2_DESC, 
                         SEGMENT3, SEGMENT3_DESC, SEGMENT4, SEGMENT4_DESC, CODE_COMBINATION_ID, UNIT_STANDARD_PRICE, SALES_ORDER_LINE, TAX_RATE, TAX_EXEMPT_FLAG, LINE_RECOVERABLE, 
                         ORDER_NUMBER, SOURCE_DOCUMENT_ID, ORDER_SOURCE_ID, ORIG_SYS_DOCUMENT_REF, ORDERED_DATE, PRICE_LIST_ID, ORDER_SOURCE, CANCELLED_FLAG_OOHA, BOOKED_FLAG, 
                         OPEN_FLAG_OOHA, FLOW_STATUS_CODE, PRICING_QUANTITY, CANCELLED_QUANTITY, SHIPPED_QUANTITY, ORDERED_QUANTITY, FULFILLED_QUANTITY, SHIPPING_QUANTITY, TAX_CODE, 
                         INVOICE_INTERFACE_STATUS_CODE, PRICE_LIST_ID_OOLA, UNIT_LIST_PRICE, TAX_VALUE, ITEM_TYPE_CODE, ACTUAL_SHIPMENT_DATE, LINE_CATEGORY_CODE, RETURN_CONTEXT, 
                         RETURN_ATTRIBUTE1, RETURN_ATTRIBUTE2, SOURCE_TYPE_CODE, RETURN_REASON_CODE, SHIPPING_INTERFACED_FLAG, INVOICED_QUANTITY, UNIT_SELLING_PRICE_OOLA, 
                         UNIT_SELLING_PRICE_PER_PQTY, ATTRIBUTE_CATEGORY_MSI, ATTRIBUTE3_MSI, EXPENSE_ACCOUNT, COST_OF_SALES_ACCOUNT, SALES_ACCOUNT, UNQ_TRX_NUMBER, PREVIOUS_TRX_NUMBER, 
                         LINETYPE, LIST_TYPE_CODE, MODIFIER_TYPE, MODIFIER_NUMBER, MODIFIER_DESCRIPTION, GL_CS, GL_CR, BILL_TYPE, SALE_TYPE, SALE_ORDER_TYPE_L, SALE_ORDER_TYPE_H, DN, QTY, 
                         UNIT_SELLING_PRICE, ORDER_UNIT_SELLING_PRICE, REVENUE_EXT, REVENUE, TAX, UNQ__TRX_DATE, UNQ__BILL_TYPE, AC_UPDATE_DATE, MODIFIER_TYPE2, INV_TYPE, OOHA_HEADER_ID, 
                         OOLA_LINE_ID, TRX_NO_UNQ, UNQ_CUSTOMER_TRX_ID, UNQ__SALE_TYPE, UNQ__TRX_NUMBER, UNQ__INV_TYPE, UNQ__MONTH, X_MODIFIER_TYPE, X_RTN, TSO_DIV, LOCATION, REGION, CATEG, 
                         MONTH, BL_CD
FROM            dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS Q
WHERE        (RCTLA_ROWID COLLATE SQL_Latin1_General_CP1_CS_AS IN
                             (SELECT        RCTLA_ROWID COLLATE SQL_Latin1_General_CP1_CS_AS AS rowid
                               FROM            dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS t
                               GROUP BY RCTLA_ROWID COLLATE SQL_Latin1_General_CP1_CS_AS
                               HAVING         (COUNT(RCTLA_ROWID COLLATE SQL_Latin1_General_CP1_CS_AS) > 1)));


-- dbo.[vw_WH_RCTA_OOHA_MSI_PARTY_TRXID_short not in use] source

CREATE VIEW dbo.vw_WH_RCTA_OOHA_MSI_PARTY_TRXID_short
AS
SELECT        CUSTOMER_TRX_ID, UNQ_CUSTOMER_TRX_ID, PREVIOUS_CUSTOMER_TRX_ID
FROM            dbo.WH_RCTA_OOHA_MSI_PARTY_TBL
WHERE        (UNQ_CUSTOMER_TRX_ID IS NULL);


-- dbo.vw_WH_SALES_LEGEBS_SUPUNQ source

CREATE VIEW dbo.vw_WH_SALES_LEGEBS_SUPUNQ
AS
SELECT        ISNULL(BR_CD, '') + '-' + ISNULL(CAST(SUPPLIER_ID AS varchar(12)), '') + ISNULL(CASE CAST(ID AS varchar(2)) WHEN 1 THEN NULL ELSE '(' + ISNULL(CAST(ID AS varchar(2)), '') + ')' END, '') 
                         AS SUPPLIER_ID_UNQ, BR_CD, SUPPLIER_ID, SUPPLIER_NAME
FROM            dbo.WH_SALES_LEGEBS_SUPUNQ;


-- dbo.vw_WH_SALES_LEGEBS_TSOUNQ source

CREATE VIEW dbo.vw_WH_SALES_LEGEBS_TSOUNQ
AS
SELECT        ISNULL(BR_CD, '') + '-' + ISNULL(CAST(BOOKER_ID AS varchar(12)), '') + ISNULL(CASE CAST(Q.ID AS varchar(2)) WHEN 1 THEN NULL ELSE '(' + ISNULL(CAST(Q.ID AS varchar(2)), '') + ')' END, '') 
                         AS BOOKER_ID_UNQ, BOOKER_ID, BOOKER_NAME, BR_CD
FROM            dbo.WH_SALES_LEGEBS_TSOUNQ AS Q;


-- dbo.w_WH_RCTA_OOHA_MSI_PARTY_TRXID_view source

CREATE VIEW dbo.w_WH_RCTA_OOHA_MSI_PARTY_TRXID_view
AS
SELECT        COALESCE (P6.CUSTOMER_TRX_ID, P5.CUSTOMER_TRX_ID, P4.CUSTOMER_TRX_ID, P3.CUSTOMER_TRX_ID, P2.CUSTOMER_TRX_ID, P1.CUSTOMER_TRX_ID, T.CUSTOMER_TRX_ID) 
                         AS UNQ_CUSTOMER_TRX_ID, T.CUSTOMER_TRX_ID
FROM            dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS P2 RIGHT OUTER JOIN
                         dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS P4 LEFT OUTER JOIN
                         dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS P3 ON P4.CUSTOMER_TRX_ID = P3.PREVIOUS_CUSTOMER_TRX_ID ON P2.PREVIOUS_CUSTOMER_TRX_ID = P3.CUSTOMER_TRX_ID LEFT OUTER JOIN
                         dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS P1 ON P2.CUSTOMER_TRX_ID = P1.PREVIOUS_CUSTOMER_TRX_ID LEFT OUTER JOIN
                         dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS T ON P1.CUSTOMER_TRX_ID = T.PREVIOUS_CUSTOMER_TRX_ID FULL OUTER JOIN
                         dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS P6 LEFT OUTER JOIN
                         dbo.WH_RCTA_OOHA_MSI_PARTY_TBL AS P5 ON P6.CUSTOMER_TRX_ID = P5.PREVIOUS_CUSTOMER_TRX_ID ON P4.PREVIOUS_CUSTOMER_TRX_ID = P5.CUSTOMER_TRX_ID
WHERE        (T.UNQ_CUSTOMER_TRX_ID IS NULL);


-- dbo.wh_business_line source

CREATE view [dbo].[wh_business_line] 
as 
SELECT 
FLEX_VALUE,FLEX_VALUE_SET_ID,DESCRIPTION
,CASE 
	WHEN FLEX_VALUE IN ( '119',	'110',	'131',	'163',	'137',	'107',	'109',	'153') THEN 'PHARMA'
	WHEN DESCRIPTION IN (  
	 'Calibur',
'Canderel',
'Corian/DuPont Solid',
'Future Technologies',
'Hayat Kimya',
--'Kellogg's',
'LOreal',
'Lotte Beverages',
'Ovaltine',
'Pringles',
'Schick',
'Spot Free',
'Twinings'
   ) OR DESCRIPTION LIKE 'Kellogg%'
	
	 THEN 'CONSUMER'
	
	END BUS_GROUP
 FROM BO_BUSLINE_CODE;


-- dbo.wh_inventory_data_all source

CREATE VIEW [dbo].[wh_inventory_data_all]
AS
SELECT        EBI.BUSLINE_ID BUSLINE_ID, BUSLINE_DESC, WTV.BL, WTV.TDIVISION, SUBINVENTORY_CODE, ITEM_CODE, ITEM_DESC, SUM(QTY) AS QTY, SUM(QTY * TRADE_PRICE) AS QTY_VAL_TP
FROM            EBS_ONHAND_STOCK AS EBI LEFT OUTER JOIN
                         dbo.targetrefTBL AS WTV ON WTV.BUSINESS_LINE_ID = EBI.BUSLINE_ID
						  WHERE 1=1 AND WTV.TDIVISION<>'Consumer'
GROUP BY EBI.BUSLINE_ID, BUSLINE_DESC, SUBINVENTORY_CODE, WTV.BL, WTV.TDIVISION, ITEM_CODE, ITEM_DESC

UNION ALL

SELECT 
PODV.BUSLINE_ID,PODV.BUSLINE_DESC,WTV.BL,WTV.TDIVISION,PODV.SUBINVENTORY_CODE,PODV.ITEM_CODE,PODV.ITEM_DESC
,SUM(PODV.QTY) AS QTY,SUM(PODV.QTY*PODV.TRADE_PRICE) AS QTY_VAL_TP
FROM PHNX_ONHAND_DATA_VW PODV
LEFT OUTER JOIN
                         dbo.targetrefTBL AS WTV ON WTV.BUSINESS_LINE_ID = PODV.BUSLINE_ID
						 WHERE 1=1 AND WTV.TDIVISION='Consumer'
GROUP BY
PODV.BUSLINE_ID,PODV.BUSLINE_DESC, BL, TDIVISION,PODV.SUBINVENTORY_CODE,PODV.ITEM_CODE,PODV.ITEM_DESC;


-- dbo.wh_inventory_data_consumer source

CREATE VIEW [dbo].[wh_inventory_data_consumer] AS 
      select
         BUSLINE_ID,
        -- BUSLINE_DESC,
		CASE  
		 WHEN 
		 --WIDA.BUSLINE_ID IN  (            147,173         )
		 WIDA.BL IN ('CNS','MJU')
      THEN
         'OTHERS' 		ELSE BUSLINE_DESC END BUSLINE_DESC,
        -- BL,
		CASE   
		WHEN 
		--WIDA.BUSLINE_ID IN  (            147,173         ) 
		  WIDA.BL IN ('CNS','MJU')
		THEN 'OTHERS' ELSE BL END BL,

         TDIVISION,
		  CASE 
		  WHEN SUBINVENTORY_CODE='SELLABLE' THEN 1 
		  ELSE 2 END SUBINV_SORT_INDEX,
         CASE 
     WHEN SUBINVENTORY_CODE='SELLABLE'
	 OR SUBINVENTORY_CODE LIKE '%SELL%'  OR SUBINVENTORY_CODE LIKE '%SEL%'  
	 THEN 'SELLABLE' ELSE SUBINVENTORY_CODE END  SUBINVENTORY_CODE,
		 
		 ITEM_CODE,ITEM_DESC,
         SUM(QTY)QTY,
         sum(QTY_VAL_TP)qty_val_tp 
      from
         wh_inventory_data_all WIDA
      where
         1 = 1 
         and TDIVISION = 'Consumer' 
		 --AND WIDA.BUSLINE_ID IN       (   147,	169,	166,	143,	150,	173,	135,	144,	140,	165,	136   )
		 AND WIDA.BL IN ('CRBU','CNS','HTK','KLGU','LRL','MJU','OVL','PGLU','SHK','SPF','TNG')

   
      GROUP BY
         BUSLINE_ID,
         BUSLINE_DESC,
         BL,
         TDIVISION,
         SUBINVENTORY_CODE,ITEM_CODE,ITEM_DESC ;


-- dbo.wh_inventory_data_pharma source

CREATE VIEW [dbo].[wh_inventory_data_pharma] AS 
      select
         BUSLINE_ID
		,CASE WHEN BUSLINE_ID IN (
           153
         )
      THEN
         'OTHERS'  ELSE 		BUSLINE_DESC END BUSLINE_DESC
		,CASE WHEN BUSLINE_ID IN (
           153
         )
      THEN
         'OTHERS' ELSE BL END 		BL,
         TDIVISION,
         SUBINVENTORY_CODE,
		 ITEM_CODE,ITEM_DESC,
         SUM(QTY)QTY,
         sum(QTY_VAL_TP)qty_val_tp 
      from
         wh_inventory_data_all 
      where
         1 = 1 
         and TDIVISION = 'Pharma' 
		 AND BUSLINE_ID IN (
   119,	110,	131,	163,	137,	107,	109,	153

   )
      GROUP BY
         BUSLINE_ID,
         BUSLINE_DESC,
         BL,
         TDIVISION,
         SUBINVENTORY_CODE,ITEM_CODE,ITEM_DESC ;


-- dbo.wh_month_ra_sales_ch_gross source

create view wh_month_ra_sales_ch_gross as
select case t.br_cd when 'DSS' then 'KHI' when 'FTN' then 'KHI' when 'KMT' then 'KHI' when 'KRC' then 'KHI' when 'KRG' then 'KHI' when 'NCH' then 'KHI' when 'NUS' then 'KHI' when 'LH2' then 'LHR' else t.br_cd end br_cd
, t.month,
CASE t.bl_cd WHEN 'AXE' THEN 'AXE'
 WHEN 'CDS' THEN 'CDS'
 WHEN 'CDSU' THEN 'CDS'
 WHEN 'CNS' THEN 'CDS'
 WHEN 'HIZ' THEN 'HIZ'
 WHEN 'HIZU' THEN 'HIZ'
 WHEN 'KLG' THEN 'KLG'
 WHEN 'KLGU' THEN 'KLG'
 WHEN 'MRS' THEN 'MRS'
 WHEN 'MRSU' THEN 'MRS'
 WHEN 'OVL' THEN 'OVL'
 WHEN 'PGL' THEN 'PGL'
 WHEN 'PGLU' THEN 'PGL'
 WHEN 'PRG' THEN 'PGL'
 WHEN 'SHK' THEN 'SHK'
 WHEN 'SRW' THEN 'SVW'
 WHEN 'SVW' THEN 'SVW'
 WHEN 'SVWU' THEN 'SVW'
 WHEN 'TNG' THEN 'TNG'
 WHEN 'UBJ' THEN 'UBJ'
 WHEN 'WRB' THEN 'WRB'
 WHEN 'RDB' THEN 'WRB'
 WHEN 'WRBU' THEN 'WRB'
 WHEN 'WRG' THEN 'WRG'
 WHEN 'WRGU' THEN 'WRG'
 WHEN 'DSS' THEN 'DSS'
 WHEN 'DSSU' THEN 'DSS'
 WHEN 'LNT' THEN 'LNT'
 WHEN 'LRL' THEN 'LRL'
 WHEN 'IFC' THEN 'IFC'
 WHEN 'NOR' THEN 'NOR'
 WHEN 'NTR' THEN 'NTR'
 WHEN 'MBR' THEN 'MBR'
 WHEN 'HLB' THEN 'HLB'
 WHEN 'BLG' THEN 'BLG'
  ELSE t.bl_cd END bl_cd
, t.bl_des, t.customer_number, t.customer_name,
       isnull(case g.group_ch when 'Institution' then 'IMT/LMT/Institution' when 'IMT/LMT' then 'IMT/LMT/Institution' else g.group_ch end,'GT') Group_ch, t.source, sum(t.NET) NET,
        (isnull(case t.br_cd when 'DSS' then 'KHI' when 'FTN' then 'KHI' when 'KMT' then 'KHI' when 'KRC' then 'KHI' when 'KRG' then 'KHI' when 'NCH' then 'KHI' when 'NUS' then 'KHI' when 'LH2' then 'LHR' else t.br_cd end, '')+isnull(t.customer_number, '')+isnull(t.customer_name, '')) UNQ_Customer from WH_Month_RA_Sales_Gross t
left outer join WH_CH_GROUP g on t.ch_des = g.ch_des  and t.source = g.source 
where T.MONTH between  dateadd(month, -13, convert(datetime, convert(varchar(7), getdate(),120) + '-01')) and dateadd(month, -1, convert(datetime, convert(date,getdate())))
and t.bl_cd not in (/*'DSS',*/'CDS','CDSU','CNS','NTR'/*,'TNG'*/)   -----DSS, CDS, TNG  REMOVE ON 05-MAY-2017 --now remove canderl on 3-aug-2017
group by case t.br_cd when 'DSS' then 'KHI' when 'FTN' then 'KHI' when 'KMT' then 'KHI' when 'KRC' then 'KHI' when 'KRG' then 'KHI' when 'NCH' then 'KHI' when 'NUS' then 'KHI' when 'LH2' then 'LHR' else t.br_cd end
, t.month, t.bl_cd, t.bl_des, t.customer_number, t.customer_name, g.group_ch, t.source;


-- dbo.wh_qa_results source

create   view wh_qa_results as
select distinct qa.plan_id, qa.character1, qa.character2, qa.character3 , qa.character4  from qa_results qa
where 1=1
 and qa.plan_id = '102'
 and qa.character4 <> 'Tea';


-- dbo.wh_ra_sales_vw source

CREATE VIEW dbo.wh_ra_sales_vw
AS
SELECT        ISNULL(br_cd, '') + '-' + ISNULL(TRX_NUMBER, '') AS UNQ, br_cd, LOCATION, CATEG, REGION, Div_cd, Div_Des, UPPER(BOOKER_ID) AS BOOKER_ID, TRX_DATE, TRX_NUMBER, [Gross Sales] AS Sales, BL_CD,
                          BL_ID, BL_DES, TSO_DIV, 'EBS' AS Source, TSO_Name
FROM            dbo.WH_RA_SALES_EBS AS e;


-- dbo.wh_ra_sales_vw_ebs_cus source

create  view wh_ra_sales_vw_ebs_cus as
select ISNULL(e.BR_CD, '')+'-'+ISNULL(e.TRX_NUMBER, '') UNQ,e.BR_CD, e.location,e.categ, e.region, e.DIV_CD, e.DIV_DES, e.BOOKER_ID, e.TRX_DATE,
        e.TRX_NUMBER, e."Gross Sales" Sales, e.BL_CD, e.BL_ID, e.BL_DES, e.TSO_DIV,  'EBS' Source, TSO_Name,  Bills  from WH_RA_SALES_ebs_cus e;


-- dbo.wh_ra_tso_pha_feh source

create   view wh_ra_tso_pha_feh as
select T.BR_CD, T.DIV DIV_CD, T.TSO_CODE, T.TSO_NAM, T.TSO_UNQ, T.TYPE, coalesce(t.remarks,t.div) DIV2 from /*wh_pilot_tso_selected*/wh_pilot_tso_selected_28nov18 t
UNION
select DISTINCT t.br_cd, /*T.BL*/'PHA/WS/IMT' DIV_CD, BOOKER_ID TSO_CODE, ''  TSO_NAM, '('+ISNULL(t.BR_CD, '')+')'+ISNULL(t.BOOKER_ID, '') TSO_UNQ, T.TYPE, /*DECODE(T.BL_CD,'NEW','PHA/WS/IMT',T.BL)*/ 'PHA/WS/IMT' DIV2 from wh_ra_tso_selected t
where t.BL = 'PHA' -- DIV_CD
AND T.BL_CD = 'NEW'
UNION
select DISTINCT t.br_cd, T.BL DIV_CD, BOOKER_ID TSO_CODE, ''  TSO_NAM, '('+ISNULL(t.BR_CD, '')+')'+ISNULL(t.BOOKER_ID, '') TSO_UNQ, T.TYPE, T.BL DIV2 from wh_ra_tso_selected t
where t.BL = 'PHA' -- DIV_CD;
and '('+ISNULL(t.BR_CD, '')+')'+ISNULL(t.BOOKER_ID, '') not in
    (select DISTINCT   '('+ISNULL(t.BR_CD, '')+')'+ISNULL(t.BOOKER_ID, '')  from wh_ra_tso_selected t
where t.BL = 'PHA' -- DIV_CD
AND T.BL_CD = 'NEW');


-- dbo.wh_sales_ebs_106 source

CREATE VIEW [dbo].[wh_sales_ebs_106]
AS 
SELECT
   UNQ__INV_TYPE,
   TRX_DATE,
   MONTH,
   CUSTOMER_ID,
   CUSTOMER_NAME,
   UNQ_CUSTOMER_TRX_ID,
   REGION,
   BR_CD,
   CATEG,
   LOCATION,
   TSO_DIV AS div_cd,
   BL_CD,
   BOOKER_ID,
   BOOKER_NAME,
   SUPPLIER_ID,
   SUPPLIER_NAME,
   CHANNEL,
   BILL_TYPE,
   SOURCE,
   SUM(GROSS) AS Gross,
   SUM(CLAIMABLE_DISCOUNT) AS claimable_discount,
   SUM(UNCLAIMABLE_DISCOUNT) AS unclaimable_discount,
   SUM(TAX_RECOVERABLE) AS tax_recoverable,
   SUM(SOLD_QTY) AS sold_qty,
   SUM(BONUS_QTY) AS bonus_qty 
FROM
   dbo.IBL_SALE_DISCOUNT_MIS_VW_EXT_T AS t 
WHERE
   (
      1 = 1
   )
GROUP BY
   UNQ__INV_TYPE,
   TRX_DATE,
   MONTH,
   CUSTOMER_ID,
   CUSTOMER_NAME,
   UNQ_CUSTOMER_TRX_ID,
   REGION,
   BR_CD,
   CATEG,
   LOCATION,
   TSO_DIV,
   BL_CD,
   BOOKER_ID,
   BOOKER_NAME,
   SUPPLIER_ID,
   SUPPLIER_NAME,
   CHANNEL,
   BILL_TYPE,
   SOURCE;


-- dbo.wh_sales_items_data_all source

CREATE VIEW [dbo].[wh_sales_items_data_all] AS 
SELECT
   TRX_DATE,
   DATEADD(M, DATEDIFF(M, 0, TRX_DATE), 0)FIRST_MONTH,
   TRIM(ISDM.BUSINESS_LINE_ID)BUSINESS_LINE_ID,
   ISDM.BUSINESS_LINE BUSLINE_DESC,
   BL,
   TDIVISION,
   ITEM_CODE,
   DESCRIPTION,
 CASE
      WHEN
         UPPER(ISDM.BILL_TYPE_DESC) LIKE '%CASH%' 
         AND ( UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% IBL UB Billing Retur %'  or UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% MR %' )
      THEN
         'CASH' 
      WHEN
         UPPER(ISDM.BILL_TYPE_DESC) LIKE '%CREDIT%' 
          AND ( UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% IBL UB Billing Retur %'  or UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% MR %' )
      THEN
         'CREDIT' 
      WHEN
         (
            UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% CREDIT %' 
            OR UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% CASH %' 
         )
         AND UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% MR %' 
      THEN
         'MR' 
      ELSE
         UPPER(ISDM.SALES_ORDER_TYPE) 
   END
   BILL_TYPE , CUSTOMER_ID , SUM(GROSS)GROSS , SUM(ISDM.CLAIMABLE_DISCOUNT)CLAIMABLE_DISCOUNT , SUM(ISDM.UNCLAIMABLE_DISCOUNT)UNCLAIMABLE_DISCOUNT
   , SUM(ISDM.TAX_RECOVERABLE)TAX , SUM(GROSS) + SUM(ISDM.CLAIMABLE_DISCOUNT) + SUM(ISDM.UNCLAIMABLE_DISCOUNT) + SUM(ISDM.TAX_RECOVERABLE) NET , 0 TARGET 
   ,'SALE' DATA_FLAG
FROM
 TARGETREFTBL WTV 
     LEFT OUTER JOIN
   IBL_SALE_DISCOUNT_MIS_VW_BO ISDM 
   
     
	 ON (
			CAST(TRIM(WTV.BUSINESS_LINE_ID) AS VARCHAR(50))= CAST(TRIM(ISDM.BUSINESS_LINE_ID) AS VARCHAR(50)) 
	      ) 
WHERE
   1 = 1 
   --AND ISDM.BUSINESS_LINE_ID=TRIM('N02  ')
   --and trx_date between '01-jan-21'  and  '31-jan-21'
   --and trx_date<'07-feb-21' 
   ---and BUSINESS_LINE_ID=150
GROUP BY
   TRX_DATE , DATEADD(M, DATEDIFF(M, 0, TRX_DATE), 0)
   , TRIM(ISDM.BUSINESS_LINE_ID)
   , ISDM.BUSINESS_LINE , BL , TDIVISION , ITEM_CODE, DESCRIPTION , 
  CASE
      WHEN
         UPPER(ISDM.BILL_TYPE_DESC) LIKE '%CASH%' 
         AND ( UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% IBL UB Billing Retur %'  or UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% MR %' )
      THEN
         'CASH' 
      WHEN
         UPPER(ISDM.BILL_TYPE_DESC) LIKE '%CREDIT%' 
          AND ( UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% IBL UB Billing Retur %'  or UPPER(ISDM.SALES_ORDER_TYPE) NOT LIKE '% MR %' )
      THEN
         'CREDIT' 
      WHEN
         (
            UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% CREDIT %' 
            OR UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% CASH %' 
         )
         AND UPPER(ISDM.SALES_ORDER_TYPE) LIKE '% MR %' 
      THEN
         'MR' 
      ELSE
         UPPER(ISDM.SALES_ORDER_TYPE) 
   END
, CUSTOMER_ID 



UNION ALL
SELECT
   MONTH  TRX_DATE,
   MONTH,
   CAST( TRIM(B.BUSINESS_LINE_ID) AS varchar(50)) BUSINESS_LINE_ID,
   B.BL_DESCRIPTION BUSLINE_DESC,
   A.TBL BL,
   B.TDIVISION TDIVISION,
   NULL ITEM_CODE,
   NULL DESCRIPTION,
   NULL BILL_TYPE,
   NULL CUSTOMER_ID,
   0 GROSS,
   0 CLAIMABLE_DISCOUNT,
   0 UNCLAIMABLE_DISCOUNT,
   0 TAX,
   0 NET,
   TARGET ,
   'TARGET' DATA_FLAG
FROM
   BI_SALES_TARGETS A 
   LEFT OUTER JOIN
      TARGETREFTBL B 
      ON (TRIM(A.busline_id) = TRIM(B.BUSINESS_LINE_ID)) 
	  
	  

	  ;


-- dbo.wh_snd_data_pivot source

-- SQLINES LICENSE FOR EVALUATION USE ONLY
--CREATE VIEW WH_SND_CONS_BR AS
CREATE view wh_snd_data_pivot as
SELECT BES.ORGINIZATION
			,BES.DIVISION
			,BES.SND_DATE,
		ISNULL(BES.ADV_REMITT_THRO_BANK,0)ADV_REMITT_THRO_BANK,
ISNULL( BES.AMOUNT_ROBBED,0)AMOUNT_ROBBED,
ISNULL( BES.BAD_DEBTS_CRDT_SALE,0)BAD_DEBTS_CRDT_SALE,
ISNULL( BES.BAD_DEBTS_CSH_SALE,0)BAD_DEBTS_CSH_SALE,
ISNULL( BES.BRGHT_FWD_BAL_BRAN,0)BRGHT_FWD_BAL_BRAN,
ISNULL( BES.BRGHT_FWD_BAL_CRDT_OUTSTNDG,0)BRGHT_FWD_BAL_CRDT_OUTSTNDG,
ISNULL( BES.CASH_IN_SAFE_VAULT,0)CASH_IN_SAFE_VAULT,
ISNULL( BES.CASH_REMITTANCES_THRO_BNK,0)CASH_REMITTANCES_THRO_BNK,
ISNULL( BES.CASH_SALE_RETURN_ADJUSTMENT,0)CASH_SALE_RETURN_ADJUSTMENT,
ISNULL( BES.CENTERLIZED_REMIT_THRO_HO,0)CENTERLIZED_REMIT_THRO_HO,
ISNULL( BES.CHQ_REMIT_THRO_BANK_CASH,0)CHQ_REMIT_THRO_BANK_CASH,
ISNULL( BES.CHQ_REMIT_THRO_BANK_CRDT,0)CHQ_REMIT_THRO_BANK_CRDT,
ISNULL( BES.CHQ_RETURN_BOUNCE,0)CHQ_RETURN_BOUNCE,
ISNULL( BES.CHQ_UNER_CLEARING_ADVANCE,0)CHQ_UNER_CLEARING_ADVANCE,
ISNULL( BES.CHQ_UNER_CLEARING_CASH_SALE,0)CHQ_UNER_CLEARING_CASH_SALE,
ISNULL( BES.CHQ_UNER_CLEARING_CRDT_SALE,0)CHQ_UNER_CLEARING_CRDT_SALE,
ISNULL( BES.CREDIT_SALE_RETURN_ADJUSTMENT,0)CREDIT_SALE_RETURN_ADJUSTMENT,
ISNULL( BES.DD_TC_PO_CHQ_IN_HAND,0)DD_TC_PO_CHQ_IN_HAND,
ISNULL( BES.DD_TC_PO_REMT_THRO_BNK_CSH_SAL,0)DD_TC_PO_REMT_THRO_BNK_CSH_SAL,
ISNULL( BES.DETAIL_OF_REMAING_BAL_CASH,0)DETAIL_OF_REMAING_BAL_CASH,
ISNULL( BES.DIFFERENCE_BW_BAL_AND_DETAIL,0)DIFFERENCE_BW_BAL_AND_DETAIL,
ISNULL( BES.IMPREST_RECVED_FROM_HO_CRDT,0)IMPREST_RECVED_FROM_HO_CRDT,
ISNULL( BES.IMPREST_RECVED_FROM_HO_CSH,0)IMPREST_RECVED_FROM_HO_CSH,
ISNULL( BES.INSURANCE_CLAIM_CSH_SALE,0)INSURANCE_CLAIM_CSH_SALE,
ISNULL( BES.INSURANCE_CRDT_SALE,0)INSURANCE_CRDT_SALE,
ISNULL( BES.LESS_ADVANCE_FROM_CUSTOERS,0)LESS_ADVANCE_FROM_CUSTOERS,
ISNULL( BES.NET_SDR_SHORTAGE,0)NET_SDR_SHORTAGE,
ISNULL( BES.REMAING_BAL_HELD_AT_MARKT_CRDT,0)REMAING_BAL_HELD_AT_MARKT_CRDT,
ISNULL( BES.SALES_AGAINST_ADVANCE,0)SALES_AGAINST_ADVANCE,
ISNULL( BES.SD_SALES_RETURN_ADJUTMENT,0)SD_SALES_RETURN_ADJUTMENT,
ISNULL( BES.TODAYS_BANK_PENALTY,0)TODAYS_BANK_PENALTY,
ISNULL( BES.TODAYS_CASH_SALES,0)TODAYS_CASH_SALES,
ISNULL( BES.TODAYS_COLL_CASH_SALES,0)TODAYS_COLL_CASH_SALES,
ISNULL( BES.TODAYS_COLL_CREDIT_RECIVABLE,0)TODAYS_COLL_CREDIT_RECIVABLE,
ISNULL( BES.TODAYS_CREDIT_SALES,0)TODAYS_CREDIT_SALES,
ISNULL( BES.TODAYS_TOTAL_COLLECTION,0)TODAYS_TOTAL_COLLECTION,
ISNULL( BES.TODAYS_TOTAL_SALES,0)TODAYS_TOTAL_SALES,
ISNULL( BES.TODAYS_TOT_REMITTANCE,0)TODAYS_TOT_REMITTANCE,
ISNULL( BES.TODAY_TOT_ADJSMNT_ADVI_CRD_SAL,0)TODAY_TOT_ADJSMNT_ADVI_CRD_SAL,
ISNULL( BES.TODAY_TOT_ADJSMT_ADVIC_CSH_SAL,0)TODAY_TOT_ADJSMT_ADVIC_CSH_SAL,
ISNULL( BES.TODAY_TOT_FUND_TRANSFER,0)TODAY_TOT_FUND_TRANSFER,
ISNULL(TOT_BAL_BRGHT_CASH_CRDT,0)TOT_BAL_BRGHT_CASH_CRDT,
ISNULL( TOT_BAL_CARIED_FWD_CRD_CASH,0)TOT_BAL_CARIED_FWD_CRD_CASH,
ISNULL( TOT_BAL_TRANSFERED_CASH,0)TOT_BAL_TRANSFERED_CASH,
ISNULL( TOT_BAL_TRANSFERED_CRDT,0)TOT_BAL_TRANSFERED_CRDT,
ISNULL( TOT_BAL_TRANSF_CSH_CRDT,0)TOT_BAL_TRANSF_CSH_CRDT,
ISNULL( TO_DATE_DUE_RECIVABLE,0)TO_DATE_DUE_RECIVABLE,
ISNULL( TO_DATE_NOT_YET_DUE_RECIVABLE,0)TO_DATE_NOT_YET_DUE_RECIVABLE,
ISNULL( WITHOLNG_TAX_ADJSMENT_CRDT_SAL,0)WITHOLNG_TAX_ADJSMENT_CRDT_SAL,
ISNULL( WITHOLNG_TAX_ADJSMENT_CSH_SAL,0)WITHOLNG_TAX_ADJSMENT_CSH_SAL
--TOTAL
,ISNULL(ADV_REMITT_THRO_BANK,0)+
ISNULL(AMOUNT_ROBBED,0)+
ISNULL(BAD_DEBTS_CRDT_SALE,0)+
ISNULL(BAD_DEBTS_CSH_SALE,0)+
ISNULL(BRGHT_FWD_BAL_BRAN,0)+
ISNULL(BRGHT_FWD_BAL_CRDT_OUTSTNDG,0)+
ISNULL(CASH_IN_SAFE_VAULT,0)+
ISNULL(CASH_REMITTANCES_THRO_BNK,0)+
ISNULL(CASH_SALE_RETURN_ADJUSTMENT,0)+
ISNULL(CENTERLIZED_REMIT_THRO_HO,0)+
ISNULL(CHQ_REMIT_THRO_BANK_CASH,0)+
ISNULL(CHQ_REMIT_THRO_BANK_CRDT,0)+
ISNULL(CHQ_RETURN_BOUNCE,0)+
ISNULL(CHQ_UNER_CLEARING_ADVANCE,0)+
ISNULL(CHQ_UNER_CLEARING_CASH_SALE,0)+
ISNULL(CHQ_UNER_CLEARING_CRDT_SALE,0)+
ISNULL(CREDIT_SALE_RETURN_ADJUSTMENT,0)+
ISNULL(DD_TC_PO_CHQ_IN_HAND,0)+
ISNULL(DD_TC_PO_REMT_THRO_BNK_CSH_SAL,0)+
ISNULL(DETAIL_OF_REMAING_BAL_CASH,0)+
ISNULL(DIFFERENCE_BW_BAL_AND_DETAIL,0)+
ISNULL(IMPREST_RECVED_FROM_HO_CRDT,0)+
ISNULL(IMPREST_RECVED_FROM_HO_CSH,0)+
ISNULL(INSURANCE_CLAIM_CSH_SALE,0)+
ISNULL(INSURANCE_CRDT_SALE,0)+
ISNULL(LESS_ADVANCE_FROM_CUSTOERS,0)+
ISNULL(NET_SDR_SHORTAGE,0)+
ISNULL(REMAING_BAL_HELD_AT_MARKT_CRDT,0)+
ISNULL(SALES_AGAINST_ADVANCE,0)+
ISNULL(SD_SALES_RETURN_ADJUTMENT,0)+
ISNULL(TODAYS_BANK_PENALTY,0)+
ISNULL(TODAYS_CASH_SALES,0)+
ISNULL(TODAYS_COLL_CASH_SALES,0)+
ISNULL(TODAYS_COLL_CREDIT_RECIVABLE,0)+
ISNULL(TODAYS_CREDIT_SALES,0)+
ISNULL(TODAYS_TOTAL_COLLECTION,0)+
ISNULL(TODAYS_TOTAL_SALES,0)+
ISNULL(TODAYS_TOT_REMITTANCE,0)+
ISNULL(TODAY_TOT_ADJSMNT_ADVI_CRD_SAL,0)+
ISNULL(TODAY_TOT_ADJSMT_ADVIC_CSH_SAL,0)+
ISNULL(TOT_BAL_BRGHT_CASH_CRDT,0)+
ISNULL(TOT_BAL_CARIED_FWD_CRD_CASH,0)+
ISNULL(TOT_BAL_TRANSFERED_CASH,0)+
ISNULL(TOT_BAL_TRANSFERED_CRDT,0)+
ISNULL(TOT_BAL_TRANSF_CSH_CRDT,0)+
ISNULL(TO_DATE_DUE_RECIVABLE,0)+
ISNULL(TO_DATE_NOT_YET_DUE_RECIVABLE,0)+
ISNULL(WITHOLNG_TAX_ADJSMENT_CRDT_SAL,0)+
ISNULL(WITHOLNG_TAX_ADJSMENT_CSH_SAL,0) TOT_TRANS

FROM   BO_EBS_SND BES
WHERE  1 = 1
---AND    BES.SND_DATE = '03-MAY-21'
--AND    BES.ORGINIZATION = 226
--AND    BES.DIVISION = 'FLC'
;


-- dbo.wh_targetref_vw source

CREATE VIEW [dbo].[wh_targetref_vw]
AS
SELECT DISTINCT 
                         CASE t .bl WHEN 'NOR' THEN 'New1' WHEN 'BLG' THEN 'New1' WHEN 'HLB' THEN 'New1' ELSE t .bl END AS BL, TBL, TSALES_MAN, TDIVISION, DIV, 
						 CASE t .bl WHEN 'NOR' THEN 'New1' WHEN 'BLG' THEN 'New1' WHEN 'HLB' THEN 'New1' ELSE  t .bl_description END AS bl_description
FROM            dbo.wh_targetref AS t;


-- dbo.wh_targetref_vw120319 source

CREATE VIEW [dbo].[wh_targetref_vw120319]
AS
SELECT DISTINCT 
                         CASE t .bl WHEN 'GAN' THEN 'New1' WHEN 'IFC' THEN 'New1' WHEN 'LRL' THEN 'New1' WHEN 'NOR' THEN 'New1' WHEN 'BLG' THEN 'New1' WHEN 'HLB' THEN 'New1' WHEN 'MBR' THEN 'New2' ELSE t .bl END
                          AS BL, TBL, TSALES_MAN, TDIVISION, DIV, 
                         CASE t .bl WHEN 'GAN' THEN 'New1' WHEN 'IFC' THEN 'New1' WHEN 'LRL' THEN 'New1' WHEN 'NOR' THEN 'New1' WHEN 'BLG' THEN 'New1' WHEN 'HLB' THEN 'New1' WHEN 'MBR' THEN 'New2' ELSE t .bl_description
                          END AS bl_description
FROM            dbo.wh_targetref AS t;

